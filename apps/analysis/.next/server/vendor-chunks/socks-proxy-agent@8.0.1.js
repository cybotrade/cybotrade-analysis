"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/socks-proxy-agent@8.0.1";
exports.ids = ["vendor-chunks/socks-proxy-agent@8.0.1"];
exports.modules = {

/***/ "(rsc)/../../node_modules/.pnpm/socks-proxy-agent@8.0.1/node_modules/socks-proxy-agent/dist/index.js":
/*!*****************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/socks-proxy-agent@8.0.1/node_modules/socks-proxy-agent/dist/index.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SocksProxyAgent = void 0;\nconst socks_1 = __webpack_require__(/*! socks */ \"(rsc)/../../node_modules/.pnpm/socks@2.7.1/node_modules/socks/build/index.js\");\nconst agent_base_1 = __webpack_require__(/*! agent-base */ \"(rsc)/../../node_modules/.pnpm/agent-base@7.1.0/node_modules/agent-base/dist/index.js\");\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(rsc)/../../node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/index.js\"));\nconst dns = __importStar(__webpack_require__(/*! dns */ \"dns\"));\nconst net = __importStar(__webpack_require__(/*! net */ \"net\"));\nconst tls = __importStar(__webpack_require__(/*! tls */ \"tls\"));\nconst debug = (0, debug_1.default)(\"socks-proxy-agent\");\nfunction parseSocksURL(url) {\n    let lookup = false;\n    let type = 5;\n    const host = url.hostname;\n    // From RFC 1928, Section 3: https://tools.ietf.org/html/rfc1928#section-3\n    // \"The SOCKS service is conventionally located on TCP port 1080\"\n    const port = parseInt(url.port, 10) || 1080;\n    // figure out if we want socks v4 or v5, based on the \"protocol\" used.\n    // Defaults to 5.\n    switch(url.protocol.replace(\":\", \"\")){\n        case \"socks4\":\n            lookup = true;\n            type = 4;\n            break;\n        // pass through\n        case \"socks4a\":\n            type = 4;\n            break;\n        case \"socks5\":\n            lookup = true;\n            type = 5;\n            break;\n        // pass through\n        case \"socks\":\n            type = 5;\n            break;\n        case \"socks5h\":\n            type = 5;\n            break;\n        default:\n            throw new TypeError(`A \"socks\" protocol must be specified! Got: ${String(url.protocol)}`);\n    }\n    const proxy = {\n        host,\n        port,\n        type\n    };\n    if (url.username) {\n        Object.defineProperty(proxy, \"userId\", {\n            value: decodeURIComponent(url.username),\n            enumerable: false\n        });\n    }\n    if (url.password != null) {\n        Object.defineProperty(proxy, \"password\", {\n            value: decodeURIComponent(url.password),\n            enumerable: false\n        });\n    }\n    return {\n        lookup,\n        proxy\n    };\n}\nclass SocksProxyAgent extends agent_base_1.Agent {\n    constructor(uri, opts){\n        super(opts);\n        const url = typeof uri === \"string\" ? new URL(uri) : uri;\n        const { proxy, lookup } = parseSocksURL(url);\n        this.shouldLookup = lookup;\n        this.proxy = proxy;\n        this.timeout = opts?.timeout ?? null;\n    }\n    /**\n     * Initiates a SOCKS connection to the specified SOCKS proxy server,\n     * which in turn connects to the specified remote host and port.\n     */ async connect(req, opts) {\n        const { shouldLookup, proxy, timeout } = this;\n        if (!opts.host) {\n            throw new Error(\"No `host` defined!\");\n        }\n        let { host } = opts;\n        const { port, lookup: lookupFn = dns.lookup } = opts;\n        if (shouldLookup) {\n            // Client-side DNS resolution for \"4\" and \"5\" socks proxy versions.\n            host = await new Promise((resolve, reject)=>{\n                // Use the request's custom lookup, if one was configured:\n                lookupFn(host, {}, (err, res)=>{\n                    if (err) {\n                        reject(err);\n                    } else {\n                        resolve(res);\n                    }\n                });\n            });\n        }\n        const socksOpts = {\n            proxy,\n            destination: {\n                host,\n                port: typeof port === \"number\" ? port : parseInt(port, 10)\n            },\n            command: \"connect\",\n            timeout: timeout ?? undefined\n        };\n        const cleanup = (tlsSocket)=>{\n            req.destroy();\n            socket.destroy();\n            if (tlsSocket) tlsSocket.destroy();\n        };\n        debug(\"Creating socks proxy connection: %o\", socksOpts);\n        const { socket } = await socks_1.SocksClient.createConnection(socksOpts);\n        debug(\"Successfully created socks proxy connection\");\n        if (timeout !== null) {\n            socket.setTimeout(timeout);\n            socket.on(\"timeout\", ()=>cleanup());\n        }\n        if (opts.secureEndpoint) {\n            // The proxy is connecting to a TLS server, so upgrade\n            // this socket connection to a TLS connection.\n            debug(\"Upgrading socket connection to TLS\");\n            const servername = opts.servername || opts.host;\n            const tlsSocket = tls.connect({\n                ...omit(opts, \"host\", \"path\", \"port\"),\n                socket,\n                servername: net.isIP(servername) ? undefined : servername\n            });\n            tlsSocket.once(\"error\", (error)=>{\n                debug(\"Socket TLS error\", error.message);\n                cleanup(tlsSocket);\n            });\n            return tlsSocket;\n        }\n        return socket;\n    }\n}\nSocksProxyAgent.protocols = [\n    \"socks\",\n    \"socks4\",\n    \"socks4a\",\n    \"socks5\",\n    \"socks5h\"\n];\nexports.SocksProxyAgent = SocksProxyAgent;\nfunction omit(obj, ...keys) {\n    const ret = {};\n    let key;\n    for(key in obj){\n        if (!keys.includes(key)) {\n            ret[key] = obj[key];\n        }\n    }\n    return ret;\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/socks-proxy-agent@8.0.1/node_modules/socks-proxy-agent/dist/index.js\n");

/***/ })

};
;
"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@kurkle+color@0.3.2";
exports.ids = ["vendor-chunks/@kurkle+color@0.3.2"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/@kurkle+color@0.3.2/node_modules/@kurkle/color/dist/color.esm.js":
/*!*************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@kurkle+color@0.3.2/node_modules/@kurkle/color/dist/color.esm.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Color: () => (/* binding */ Color),\n/* harmony export */   b2n: () => (/* binding */ b2n),\n/* harmony export */   b2p: () => (/* binding */ b2p),\n/* harmony export */   \"default\": () => (/* binding */ index_esm),\n/* harmony export */   hexParse: () => (/* binding */ hexParse),\n/* harmony export */   hexString: () => (/* binding */ hexString),\n/* harmony export */   hsl2rgb: () => (/* binding */ hsl2rgb),\n/* harmony export */   hslString: () => (/* binding */ hslString),\n/* harmony export */   hsv2rgb: () => (/* binding */ hsv2rgb),\n/* harmony export */   hueParse: () => (/* binding */ hueParse),\n/* harmony export */   hwb2rgb: () => (/* binding */ hwb2rgb),\n/* harmony export */   lim: () => (/* binding */ lim),\n/* harmony export */   n2b: () => (/* binding */ n2b),\n/* harmony export */   n2p: () => (/* binding */ n2p),\n/* harmony export */   nameParse: () => (/* binding */ nameParse),\n/* harmony export */   p2b: () => (/* binding */ p2b),\n/* harmony export */   rgb2hsl: () => (/* binding */ rgb2hsl),\n/* harmony export */   rgbParse: () => (/* binding */ rgbParse),\n/* harmony export */   rgbString: () => (/* binding */ rgbString),\n/* harmony export */   rotate: () => (/* binding */ rotate),\n/* harmony export */   round: () => (/* binding */ round)\n/* harmony export */ });\n/*!\n * @kurkle/color v0.3.2\n * https://github.com/kurkle/color#readme\n * (c) 2023 Jukka Kurkela\n * Released under the MIT License\n */ function round(v) {\n    return v + 0.5 | 0;\n}\nconst lim = (v, l, h)=>Math.max(Math.min(v, h), l);\nfunction p2b(v) {\n    return lim(round(v * 2.55), 0, 255);\n}\nfunction b2p(v) {\n    return lim(round(v / 2.55), 0, 100);\n}\nfunction n2b(v) {\n    return lim(round(v * 255), 0, 255);\n}\nfunction b2n(v) {\n    return lim(round(v / 2.55) / 100, 0, 1);\n}\nfunction n2p(v) {\n    return lim(round(v * 100), 0, 100);\n}\nconst map$1 = {\n    0: 0,\n    1: 1,\n    2: 2,\n    3: 3,\n    4: 4,\n    5: 5,\n    6: 6,\n    7: 7,\n    8: 8,\n    9: 9,\n    A: 10,\n    B: 11,\n    C: 12,\n    D: 13,\n    E: 14,\n    F: 15,\n    a: 10,\n    b: 11,\n    c: 12,\n    d: 13,\n    e: 14,\n    f: 15\n};\nconst hex = [\n    ...\"0123456789ABCDEF\"\n];\nconst h1 = (b)=>hex[b & 0xF];\nconst h2 = (b)=>hex[(b & 0xF0) >> 4] + hex[b & 0xF];\nconst eq = (b)=>(b & 0xF0) >> 4 === (b & 0xF);\nconst isShort = (v)=>eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);\nfunction hexParse(str) {\n    var len = str.length;\n    var ret;\n    if (str[0] === \"#\") {\n        if (len === 4 || len === 5) {\n            ret = {\n                r: 255 & map$1[str[1]] * 17,\n                g: 255 & map$1[str[2]] * 17,\n                b: 255 & map$1[str[3]] * 17,\n                a: len === 5 ? map$1[str[4]] * 17 : 255\n            };\n        } else if (len === 7 || len === 9) {\n            ret = {\n                r: map$1[str[1]] << 4 | map$1[str[2]],\n                g: map$1[str[3]] << 4 | map$1[str[4]],\n                b: map$1[str[5]] << 4 | map$1[str[6]],\n                a: len === 9 ? map$1[str[7]] << 4 | map$1[str[8]] : 255\n            };\n        }\n    }\n    return ret;\n}\nconst alpha = (a, f)=>a < 255 ? f(a) : \"\";\nfunction hexString(v) {\n    var f = isShort(v) ? h1 : h2;\n    return v ? \"#\" + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f) : undefined;\n}\nconst HUE_RE = /^(hsla?|hwb|hsv)\\(\\s*([-+.e\\d]+)(?:deg)?[\\s,]+([-+.e\\d]+)%[\\s,]+([-+.e\\d]+)%(?:[\\s,]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction hsl2rgbn(h, s, l) {\n    const a = s * Math.min(l, 1 - l);\n    const f = (n, k = (n + h / 30) % 12)=>l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n    return [\n        f(0),\n        f(8),\n        f(4)\n    ];\n}\nfunction hsv2rgbn(h, s, v) {\n    const f = (n, k = (n + h / 60) % 6)=>v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n    return [\n        f(5),\n        f(3),\n        f(1)\n    ];\n}\nfunction hwb2rgbn(h, w, b) {\n    const rgb = hsl2rgbn(h, 1, 0.5);\n    let i;\n    if (w + b > 1) {\n        i = 1 / (w + b);\n        w *= i;\n        b *= i;\n    }\n    for(i = 0; i < 3; i++){\n        rgb[i] *= 1 - w - b;\n        rgb[i] += w;\n    }\n    return rgb;\n}\nfunction hueValue(r, g, b, d, max) {\n    if (r === max) {\n        return (g - b) / d + (g < b ? 6 : 0);\n    }\n    if (g === max) {\n        return (b - r) / d + 2;\n    }\n    return (r - g) / d + 4;\n}\nfunction rgb2hsl(v) {\n    const range = 255;\n    const r = v.r / range;\n    const g = v.g / range;\n    const b = v.b / range;\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    const l = (max + min) / 2;\n    let h, s, d;\n    if (max !== min) {\n        d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        h = hueValue(r, g, b, d, max);\n        h = h * 60 + 0.5;\n    }\n    return [\n        h | 0,\n        s || 0,\n        l\n    ];\n}\nfunction calln(f, a, b, c) {\n    return (Array.isArray(a) ? f(a[0], a[1], a[2]) : f(a, b, c)).map(n2b);\n}\nfunction hsl2rgb(h, s, l) {\n    return calln(hsl2rgbn, h, s, l);\n}\nfunction hwb2rgb(h, w, b) {\n    return calln(hwb2rgbn, h, w, b);\n}\nfunction hsv2rgb(h, s, v) {\n    return calln(hsv2rgbn, h, s, v);\n}\nfunction hue(h) {\n    return (h % 360 + 360) % 360;\n}\nfunction hueParse(str) {\n    const m = HUE_RE.exec(str);\n    let a = 255;\n    let v;\n    if (!m) {\n        return;\n    }\n    if (m[5] !== v) {\n        a = m[6] ? p2b(+m[5]) : n2b(+m[5]);\n    }\n    const h = hue(+m[2]);\n    const p1 = +m[3] / 100;\n    const p2 = +m[4] / 100;\n    if (m[1] === \"hwb\") {\n        v = hwb2rgb(h, p1, p2);\n    } else if (m[1] === \"hsv\") {\n        v = hsv2rgb(h, p1, p2);\n    } else {\n        v = hsl2rgb(h, p1, p2);\n    }\n    return {\n        r: v[0],\n        g: v[1],\n        b: v[2],\n        a: a\n    };\n}\nfunction rotate(v, deg) {\n    var h = rgb2hsl(v);\n    h[0] = hue(h[0] + deg);\n    h = hsl2rgb(h);\n    v.r = h[0];\n    v.g = h[1];\n    v.b = h[2];\n}\nfunction hslString(v) {\n    if (!v) {\n        return;\n    }\n    const a = rgb2hsl(v);\n    const h = a[0];\n    const s = n2p(a[1]);\n    const l = n2p(a[2]);\n    return v.a < 255 ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})` : `hsl(${h}, ${s}%, ${l}%)`;\n}\nconst map = {\n    x: \"dark\",\n    Z: \"light\",\n    Y: \"re\",\n    X: \"blu\",\n    W: \"gr\",\n    V: \"medium\",\n    U: \"slate\",\n    A: \"ee\",\n    T: \"ol\",\n    S: \"or\",\n    B: \"ra\",\n    C: \"lateg\",\n    D: \"ights\",\n    R: \"in\",\n    Q: \"turquois\",\n    E: \"hi\",\n    P: \"ro\",\n    O: \"al\",\n    N: \"le\",\n    M: \"de\",\n    L: \"yello\",\n    F: \"en\",\n    K: \"ch\",\n    G: \"arks\",\n    H: \"ea\",\n    I: \"ightg\",\n    J: \"wh\"\n};\nconst names$1 = {\n    OiceXe: \"f0f8ff\",\n    antiquewEte: \"faebd7\",\n    aqua: \"ffff\",\n    aquamarRe: \"7fffd4\",\n    azuY: \"f0ffff\",\n    beige: \"f5f5dc\",\n    bisque: \"ffe4c4\",\n    black: \"0\",\n    blanKedOmond: \"ffebcd\",\n    Xe: \"ff\",\n    XeviTet: \"8a2be2\",\n    bPwn: \"a52a2a\",\n    burlywood: \"deb887\",\n    caMtXe: \"5f9ea0\",\n    KartYuse: \"7fff00\",\n    KocTate: \"d2691e\",\n    cSO: \"ff7f50\",\n    cSnflowerXe: \"6495ed\",\n    cSnsilk: \"fff8dc\",\n    crimson: \"dc143c\",\n    cyan: \"ffff\",\n    xXe: \"8b\",\n    xcyan: \"8b8b\",\n    xgTMnPd: \"b8860b\",\n    xWay: \"a9a9a9\",\n    xgYF: \"6400\",\n    xgYy: \"a9a9a9\",\n    xkhaki: \"bdb76b\",\n    xmagFta: \"8b008b\",\n    xTivegYF: \"556b2f\",\n    xSange: \"ff8c00\",\n    xScEd: \"9932cc\",\n    xYd: \"8b0000\",\n    xsOmon: \"e9967a\",\n    xsHgYF: \"8fbc8f\",\n    xUXe: \"483d8b\",\n    xUWay: \"2f4f4f\",\n    xUgYy: \"2f4f4f\",\n    xQe: \"ced1\",\n    xviTet: \"9400d3\",\n    dAppRk: \"ff1493\",\n    dApskyXe: \"bfff\",\n    dimWay: \"696969\",\n    dimgYy: \"696969\",\n    dodgerXe: \"1e90ff\",\n    fiYbrick: \"b22222\",\n    flSOwEte: \"fffaf0\",\n    foYstWAn: \"228b22\",\n    fuKsia: \"ff00ff\",\n    gaRsbSo: \"dcdcdc\",\n    ghostwEte: \"f8f8ff\",\n    gTd: \"ffd700\",\n    gTMnPd: \"daa520\",\n    Way: \"808080\",\n    gYF: \"8000\",\n    gYFLw: \"adff2f\",\n    gYy: \"808080\",\n    honeyMw: \"f0fff0\",\n    hotpRk: \"ff69b4\",\n    RdianYd: \"cd5c5c\",\n    Rdigo: \"4b0082\",\n    ivSy: \"fffff0\",\n    khaki: \"f0e68c\",\n    lavFMr: \"e6e6fa\",\n    lavFMrXsh: \"fff0f5\",\n    lawngYF: \"7cfc00\",\n    NmoncEffon: \"fffacd\",\n    ZXe: \"add8e6\",\n    ZcSO: \"f08080\",\n    Zcyan: \"e0ffff\",\n    ZgTMnPdLw: \"fafad2\",\n    ZWay: \"d3d3d3\",\n    ZgYF: \"90ee90\",\n    ZgYy: \"d3d3d3\",\n    ZpRk: \"ffb6c1\",\n    ZsOmon: \"ffa07a\",\n    ZsHgYF: \"20b2aa\",\n    ZskyXe: \"87cefa\",\n    ZUWay: \"778899\",\n    ZUgYy: \"778899\",\n    ZstAlXe: \"b0c4de\",\n    ZLw: \"ffffe0\",\n    lime: \"ff00\",\n    limegYF: \"32cd32\",\n    lRF: \"faf0e6\",\n    magFta: \"ff00ff\",\n    maPon: \"800000\",\n    VaquamarRe: \"66cdaa\",\n    VXe: \"cd\",\n    VScEd: \"ba55d3\",\n    VpurpN: \"9370db\",\n    VsHgYF: \"3cb371\",\n    VUXe: \"7b68ee\",\n    VsprRggYF: \"fa9a\",\n    VQe: \"48d1cc\",\n    VviTetYd: \"c71585\",\n    midnightXe: \"191970\",\n    mRtcYam: \"f5fffa\",\n    mistyPse: \"ffe4e1\",\n    moccasR: \"ffe4b5\",\n    navajowEte: \"ffdead\",\n    navy: \"80\",\n    Tdlace: \"fdf5e6\",\n    Tive: \"808000\",\n    TivedBb: \"6b8e23\",\n    Sange: \"ffa500\",\n    SangeYd: \"ff4500\",\n    ScEd: \"da70d6\",\n    pOegTMnPd: \"eee8aa\",\n    pOegYF: \"98fb98\",\n    pOeQe: \"afeeee\",\n    pOeviTetYd: \"db7093\",\n    papayawEp: \"ffefd5\",\n    pHKpuff: \"ffdab9\",\n    peru: \"cd853f\",\n    pRk: \"ffc0cb\",\n    plum: \"dda0dd\",\n    powMrXe: \"b0e0e6\",\n    purpN: \"800080\",\n    YbeccapurpN: \"663399\",\n    Yd: \"ff0000\",\n    Psybrown: \"bc8f8f\",\n    PyOXe: \"4169e1\",\n    saddNbPwn: \"8b4513\",\n    sOmon: \"fa8072\",\n    sandybPwn: \"f4a460\",\n    sHgYF: \"2e8b57\",\n    sHshell: \"fff5ee\",\n    siFna: \"a0522d\",\n    silver: \"c0c0c0\",\n    skyXe: \"87ceeb\",\n    UXe: \"6a5acd\",\n    UWay: \"708090\",\n    UgYy: \"708090\",\n    snow: \"fffafa\",\n    sprRggYF: \"ff7f\",\n    stAlXe: \"4682b4\",\n    tan: \"d2b48c\",\n    teO: \"8080\",\n    tEstN: \"d8bfd8\",\n    tomato: \"ff6347\",\n    Qe: \"40e0d0\",\n    viTet: \"ee82ee\",\n    JHt: \"f5deb3\",\n    wEte: \"ffffff\",\n    wEtesmoke: \"f5f5f5\",\n    Lw: \"ffff00\",\n    LwgYF: \"9acd32\"\n};\nfunction unpack() {\n    const unpacked = {};\n    const keys = Object.keys(names$1);\n    const tkeys = Object.keys(map);\n    let i, j, k, ok, nk;\n    for(i = 0; i < keys.length; i++){\n        ok = nk = keys[i];\n        for(j = 0; j < tkeys.length; j++){\n            k = tkeys[j];\n            nk = nk.replace(k, map[k]);\n        }\n        k = parseInt(names$1[ok], 16);\n        unpacked[nk] = [\n            k >> 16 & 0xFF,\n            k >> 8 & 0xFF,\n            k & 0xFF\n        ];\n    }\n    return unpacked;\n}\nlet names;\nfunction nameParse(str) {\n    if (!names) {\n        names = unpack();\n        names.transparent = [\n            0,\n            0,\n            0,\n            0\n        ];\n    }\n    const a = names[str.toLowerCase()];\n    return a && {\n        r: a[0],\n        g: a[1],\n        b: a[2],\n        a: a.length === 4 ? a[3] : 255\n    };\n}\nconst RGB_RE = /^rgba?\\(\\s*([-+.\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?(?:[\\s,/]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction rgbParse(str) {\n    const m = RGB_RE.exec(str);\n    let a = 255;\n    let r, g, b;\n    if (!m) {\n        return;\n    }\n    if (m[7] !== r) {\n        const v = +m[7];\n        a = m[8] ? p2b(v) : lim(v * 255, 0, 255);\n    }\n    r = +m[1];\n    g = +m[3];\n    b = +m[5];\n    r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));\n    g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));\n    b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));\n    return {\n        r: r,\n        g: g,\n        b: b,\n        a: a\n    };\n}\nfunction rgbString(v) {\n    return v && (v.a < 255 ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})` : `rgb(${v.r}, ${v.g}, ${v.b})`);\n}\nconst to = (v)=>v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;\nconst from = (v)=>v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\nfunction interpolate(rgb1, rgb2, t) {\n    const r = from(b2n(rgb1.r));\n    const g = from(b2n(rgb1.g));\n    const b = from(b2n(rgb1.b));\n    return {\n        r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),\n        g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),\n        b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),\n        a: rgb1.a + t * (rgb2.a - rgb1.a)\n    };\n}\nfunction modHSL(v, i, ratio) {\n    if (v) {\n        let tmp = rgb2hsl(v);\n        tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));\n        tmp = hsl2rgb(tmp);\n        v.r = tmp[0];\n        v.g = tmp[1];\n        v.b = tmp[2];\n    }\n}\nfunction clone(v, proto) {\n    return v ? Object.assign(proto || {}, v) : v;\n}\nfunction fromObject(input) {\n    var v = {\n        r: 0,\n        g: 0,\n        b: 0,\n        a: 255\n    };\n    if (Array.isArray(input)) {\n        if (input.length >= 3) {\n            v = {\n                r: input[0],\n                g: input[1],\n                b: input[2],\n                a: 255\n            };\n            if (input.length > 3) {\n                v.a = n2b(input[3]);\n            }\n        }\n    } else {\n        v = clone(input, {\n            r: 0,\n            g: 0,\n            b: 0,\n            a: 1\n        });\n        v.a = n2b(v.a);\n    }\n    return v;\n}\nfunction functionParse(str) {\n    if (str.charAt(0) === \"r\") {\n        return rgbParse(str);\n    }\n    return hueParse(str);\n}\nclass Color {\n    constructor(input){\n        if (input instanceof Color) {\n            return input;\n        }\n        const type = typeof input;\n        let v;\n        if (type === \"object\") {\n            v = fromObject(input);\n        } else if (type === \"string\") {\n            v = hexParse(input) || nameParse(input) || functionParse(input);\n        }\n        this._rgb = v;\n        this._valid = !!v;\n    }\n    get valid() {\n        return this._valid;\n    }\n    get rgb() {\n        var v = clone(this._rgb);\n        if (v) {\n            v.a = b2n(v.a);\n        }\n        return v;\n    }\n    set rgb(obj) {\n        this._rgb = fromObject(obj);\n    }\n    rgbString() {\n        return this._valid ? rgbString(this._rgb) : undefined;\n    }\n    hexString() {\n        return this._valid ? hexString(this._rgb) : undefined;\n    }\n    hslString() {\n        return this._valid ? hslString(this._rgb) : undefined;\n    }\n    mix(color, weight) {\n        if (color) {\n            const c1 = this.rgb;\n            const c2 = color.rgb;\n            let w2;\n            const p = weight === w2 ? 0.5 : weight;\n            const w = 2 * p - 1;\n            const a = c1.a - c2.a;\n            const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n            w2 = 1 - w1;\n            c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;\n            c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;\n            c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;\n            c1.a = p * c1.a + (1 - p) * c2.a;\n            this.rgb = c1;\n        }\n        return this;\n    }\n    interpolate(color, t) {\n        if (color) {\n            this._rgb = interpolate(this._rgb, color._rgb, t);\n        }\n        return this;\n    }\n    clone() {\n        return new Color(this.rgb);\n    }\n    alpha(a) {\n        this._rgb.a = n2b(a);\n        return this;\n    }\n    clearer(ratio) {\n        const rgb = this._rgb;\n        rgb.a *= 1 - ratio;\n        return this;\n    }\n    greyscale() {\n        const rgb = this._rgb;\n        const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);\n        rgb.r = rgb.g = rgb.b = val;\n        return this;\n    }\n    opaquer(ratio) {\n        const rgb = this._rgb;\n        rgb.a *= 1 + ratio;\n        return this;\n    }\n    negate() {\n        const v = this._rgb;\n        v.r = 255 - v.r;\n        v.g = 255 - v.g;\n        v.b = 255 - v.b;\n        return this;\n    }\n    lighten(ratio) {\n        modHSL(this._rgb, 2, ratio);\n        return this;\n    }\n    darken(ratio) {\n        modHSL(this._rgb, 2, -ratio);\n        return this;\n    }\n    saturate(ratio) {\n        modHSL(this._rgb, 1, ratio);\n        return this;\n    }\n    desaturate(ratio) {\n        modHSL(this._rgb, 1, -ratio);\n        return this;\n    }\n    rotate(deg) {\n        rotate(this._rgb, deg);\n        return this;\n    }\n}\nfunction index_esm(input) {\n    return new Color(input);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BrdXJrbGUrY29sb3JAMC4zLjIvbm9kZV9tb2R1bGVzL0BrdXJrbGUvY29sb3IvZGlzdC9jb2xvci5lc20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7O0NBS0MsR0FDRCxTQUFTQSxNQUFNQyxDQUFDO0lBQ2QsT0FBT0EsSUFBSSxNQUFNO0FBQ25CO0FBQ0EsTUFBTUMsTUFBTSxDQUFDRCxHQUFHRSxHQUFHQyxJQUFNQyxLQUFLQyxHQUFHLENBQUNELEtBQUtFLEdBQUcsQ0FBQ04sR0FBR0csSUFBSUQ7QUFDbEQsU0FBU0ssSUFBSVAsQ0FBQztJQUNaLE9BQU9DLElBQUlGLE1BQU1DLElBQUksT0FBTyxHQUFHO0FBQ2pDO0FBQ0EsU0FBU1EsSUFBSVIsQ0FBQztJQUNaLE9BQU9DLElBQUlGLE1BQU1DLElBQUksT0FBTyxHQUFHO0FBQ2pDO0FBQ0EsU0FBU1MsSUFBSVQsQ0FBQztJQUNaLE9BQU9DLElBQUlGLE1BQU1DLElBQUksTUFBTSxHQUFHO0FBQ2hDO0FBQ0EsU0FBU1UsSUFBSVYsQ0FBQztJQUNaLE9BQU9DLElBQUlGLE1BQU1DLElBQUksUUFBUSxLQUFLLEdBQUc7QUFDdkM7QUFDQSxTQUFTVyxJQUFJWCxDQUFDO0lBQ1osT0FBT0MsSUFBSUYsTUFBTUMsSUFBSSxNQUFNLEdBQUc7QUFDaEM7QUFFQSxNQUFNWSxRQUFRO0lBQUMsR0FBRztJQUFHLEdBQUc7SUFBRyxHQUFHO0lBQUcsR0FBRztJQUFHLEdBQUc7SUFBRyxHQUFHO0lBQUcsR0FBRztJQUFHLEdBQUc7SUFBRyxHQUFHO0lBQUcsR0FBRztJQUFHQyxHQUFHO0lBQUlDLEdBQUc7SUFBSUMsR0FBRztJQUFJQyxHQUFHO0lBQUlDLEdBQUc7SUFBSUMsR0FBRztJQUFJQyxHQUFHO0lBQUlDLEdBQUc7SUFBSUMsR0FBRztJQUFJQyxHQUFHO0lBQUlDLEdBQUc7SUFBSUMsR0FBRztBQUFFO0FBQzdKLE1BQU1DLE1BQU07T0FBSTtDQUFtQjtBQUNuQyxNQUFNQyxLQUFLTixDQUFBQSxJQUFLSyxHQUFHLENBQUNMLElBQUksSUFBSTtBQUM1QixNQUFNTyxLQUFLUCxDQUFBQSxJQUFLSyxHQUFHLENBQUMsQ0FBQ0wsSUFBSSxJQUFHLEtBQU0sRUFBRSxHQUFHSyxHQUFHLENBQUNMLElBQUksSUFBSTtBQUNuRCxNQUFNUSxLQUFLUixDQUFBQSxJQUFLLENBQUVBLElBQUksSUFBRyxLQUFNLE1BQVFBLENBQUFBLElBQUksR0FBRTtBQUM3QyxNQUFNUyxVQUFVN0IsQ0FBQUEsSUFBSzRCLEdBQUc1QixFQUFFOEIsQ0FBQyxLQUFLRixHQUFHNUIsRUFBRStCLENBQUMsS0FBS0gsR0FBRzVCLEVBQUVvQixDQUFDLEtBQUtRLEdBQUc1QixFQUFFbUIsQ0FBQztBQUM1RCxTQUFTYSxTQUFTQyxHQUFHO0lBQ25CLElBQUlDLE1BQU1ELElBQUlFLE1BQU07SUFDcEIsSUFBSUM7SUFDSixJQUFJSCxHQUFHLENBQUMsRUFBRSxLQUFLLEtBQUs7UUFDbEIsSUFBSUMsUUFBUSxLQUFLQSxRQUFRLEdBQUc7WUFDMUJFLE1BQU07Z0JBQ0pOLEdBQUcsTUFBTWxCLEtBQUssQ0FBQ3FCLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRztnQkFDekJGLEdBQUcsTUFBTW5CLEtBQUssQ0FBQ3FCLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRztnQkFDekJiLEdBQUcsTUFBTVIsS0FBSyxDQUFDcUIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHO2dCQUN6QmQsR0FBR2UsUUFBUSxJQUFJdEIsS0FBSyxDQUFDcUIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUs7WUFDdEM7UUFDRixPQUFPLElBQUlDLFFBQVEsS0FBS0EsUUFBUSxHQUFHO1lBQ2pDRSxNQUFNO2dCQUNKTixHQUFHbEIsS0FBSyxDQUFDcUIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLElBQUlyQixLQUFLLENBQUNxQixHQUFHLENBQUMsRUFBRSxDQUFDO2dCQUNyQ0YsR0FBR25CLEtBQUssQ0FBQ3FCLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxJQUFJckIsS0FBSyxDQUFDcUIsR0FBRyxDQUFDLEVBQUUsQ0FBQztnQkFDckNiLEdBQUdSLEtBQUssQ0FBQ3FCLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxJQUFJckIsS0FBSyxDQUFDcUIsR0FBRyxDQUFDLEVBQUUsQ0FBQztnQkFDckNkLEdBQUdlLFFBQVEsSUFBS3RCLEtBQUssQ0FBQ3FCLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxJQUFJckIsS0FBSyxDQUFDcUIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFJO1lBQ3hEO1FBQ0Y7SUFDRjtJQUNBLE9BQU9HO0FBQ1Q7QUFDQSxNQUFNQyxRQUFRLENBQUNsQixHQUFHSyxJQUFNTCxJQUFJLE1BQU1LLEVBQUVMLEtBQUs7QUFDekMsU0FBU21CLFVBQVV0QyxDQUFDO0lBQ2xCLElBQUl3QixJQUFJSyxRQUFRN0IsS0FBSzBCLEtBQUtDO0lBQzFCLE9BQU8zQixJQUNILE1BQU13QixFQUFFeEIsRUFBRThCLENBQUMsSUFBSU4sRUFBRXhCLEVBQUUrQixDQUFDLElBQUlQLEVBQUV4QixFQUFFb0IsQ0FBQyxJQUFJaUIsTUFBTXJDLEVBQUVtQixDQUFDLEVBQUVLLEtBQzVDZTtBQUNOO0FBRUEsTUFBTUMsU0FBUztBQUNmLFNBQVNDLFNBQVN0QyxDQUFDLEVBQUV1QyxDQUFDLEVBQUV4QyxDQUFDO0lBQ3ZCLE1BQU1pQixJQUFJdUIsSUFBSXRDLEtBQUtFLEdBQUcsQ0FBQ0osR0FBRyxJQUFJQTtJQUM5QixNQUFNc0IsSUFBSSxDQUFDbUIsR0FBR0MsSUFBSSxDQUFDRCxJQUFJeEMsSUFBSSxFQUFDLElBQUssRUFBRSxHQUFLRCxJQUFJaUIsSUFBSWYsS0FBS0MsR0FBRyxDQUFDRCxLQUFLRSxHQUFHLENBQUNzQyxJQUFJLEdBQUcsSUFBSUEsR0FBRyxJQUFJLENBQUM7SUFDckYsT0FBTztRQUFDcEIsRUFBRTtRQUFJQSxFQUFFO1FBQUlBLEVBQUU7S0FBRztBQUMzQjtBQUNBLFNBQVNxQixTQUFTMUMsQ0FBQyxFQUFFdUMsQ0FBQyxFQUFFMUMsQ0FBQztJQUN2QixNQUFNd0IsSUFBSSxDQUFDbUIsR0FBR0MsSUFBSSxDQUFDRCxJQUFJeEMsSUFBSSxFQUFDLElBQUssQ0FBQyxHQUFLSCxJQUFJQSxJQUFJMEMsSUFBSXRDLEtBQUtDLEdBQUcsQ0FBQ0QsS0FBS0UsR0FBRyxDQUFDc0MsR0FBRyxJQUFJQSxHQUFHLElBQUk7SUFDbkYsT0FBTztRQUFDcEIsRUFBRTtRQUFJQSxFQUFFO1FBQUlBLEVBQUU7S0FBRztBQUMzQjtBQUNBLFNBQVNzQixTQUFTM0MsQ0FBQyxFQUFFNEMsQ0FBQyxFQUFFM0IsQ0FBQztJQUN2QixNQUFNNEIsTUFBTVAsU0FBU3RDLEdBQUcsR0FBRztJQUMzQixJQUFJOEM7SUFDSixJQUFJRixJQUFJM0IsSUFBSSxHQUFHO1FBQ2I2QixJQUFJLElBQUtGLENBQUFBLElBQUkzQixDQUFBQTtRQUNiMkIsS0FBS0U7UUFDTDdCLEtBQUs2QjtJQUNQO0lBQ0EsSUFBS0EsSUFBSSxHQUFHQSxJQUFJLEdBQUdBLElBQUs7UUFDdEJELEdBQUcsQ0FBQ0MsRUFBRSxJQUFJLElBQUlGLElBQUkzQjtRQUNsQjRCLEdBQUcsQ0FBQ0MsRUFBRSxJQUFJRjtJQUNaO0lBQ0EsT0FBT0M7QUFDVDtBQUNBLFNBQVNFLFNBQVNwQixDQUFDLEVBQUVDLENBQUMsRUFBRVgsQ0FBQyxFQUFFRSxDQUFDLEVBQUVqQixHQUFHO0lBQy9CLElBQUl5QixNQUFNekIsS0FBSztRQUNiLE9BQU8sQ0FBRTBCLElBQUlYLENBQUFBLElBQUtFLElBQU1TLENBQUFBLElBQUlYLElBQUksSUFBSTtJQUN0QztJQUNBLElBQUlXLE1BQU0xQixLQUFLO1FBQ2IsT0FBTyxDQUFDZSxJQUFJVSxDQUFBQSxJQUFLUixJQUFJO0lBQ3ZCO0lBQ0EsT0FBTyxDQUFDUSxJQUFJQyxDQUFBQSxJQUFLVCxJQUFJO0FBQ3ZCO0FBQ0EsU0FBUzZCLFFBQVFuRCxDQUFDO0lBQ2hCLE1BQU1vRCxRQUFRO0lBQ2QsTUFBTXRCLElBQUk5QixFQUFFOEIsQ0FBQyxHQUFHc0I7SUFDaEIsTUFBTXJCLElBQUkvQixFQUFFK0IsQ0FBQyxHQUFHcUI7SUFDaEIsTUFBTWhDLElBQUlwQixFQUFFb0IsQ0FBQyxHQUFHZ0M7SUFDaEIsTUFBTS9DLE1BQU1ELEtBQUtDLEdBQUcsQ0FBQ3lCLEdBQUdDLEdBQUdYO0lBQzNCLE1BQU1kLE1BQU1GLEtBQUtFLEdBQUcsQ0FBQ3dCLEdBQUdDLEdBQUdYO0lBQzNCLE1BQU1sQixJQUFJLENBQUNHLE1BQU1DLEdBQUUsSUFBSztJQUN4QixJQUFJSCxHQUFHdUMsR0FBR3BCO0lBQ1YsSUFBSWpCLFFBQVFDLEtBQUs7UUFDZmdCLElBQUlqQixNQUFNQztRQUNWb0MsSUFBSXhDLElBQUksTUFBTW9CLElBQUssS0FBSWpCLE1BQU1DLEdBQUUsSUFBS2dCLElBQUtqQixDQUFBQSxNQUFNQyxHQUFFO1FBQ2pESCxJQUFJK0MsU0FBU3BCLEdBQUdDLEdBQUdYLEdBQUdFLEdBQUdqQjtRQUN6QkYsSUFBSUEsSUFBSSxLQUFLO0lBQ2Y7SUFDQSxPQUFPO1FBQUNBLElBQUk7UUFBR3VDLEtBQUs7UUFBR3hDO0tBQUU7QUFDM0I7QUFDQSxTQUFTbUQsTUFBTTdCLENBQUMsRUFBRUwsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUM7SUFDdkIsT0FBTyxDQUNMaUMsTUFBTUMsT0FBTyxDQUFDcEMsS0FDVkssRUFBRUwsQ0FBQyxDQUFDLEVBQUUsRUFBRUEsQ0FBQyxDQUFDLEVBQUUsRUFBRUEsQ0FBQyxDQUFDLEVBQUUsSUFDbEJLLEVBQUVMLEdBQUdDLEdBQUdDLEVBQUMsRUFDYm1DLEdBQUcsQ0FBQy9DO0FBQ1I7QUFDQSxTQUFTZ0QsUUFBUXRELENBQUMsRUFBRXVDLENBQUMsRUFBRXhDLENBQUM7SUFDdEIsT0FBT21ELE1BQU1aLFVBQVV0QyxHQUFHdUMsR0FBR3hDO0FBQy9CO0FBQ0EsU0FBU3dELFFBQVF2RCxDQUFDLEVBQUU0QyxDQUFDLEVBQUUzQixDQUFDO0lBQ3RCLE9BQU9pQyxNQUFNUCxVQUFVM0MsR0FBRzRDLEdBQUczQjtBQUMvQjtBQUNBLFNBQVN1QyxRQUFReEQsQ0FBQyxFQUFFdUMsQ0FBQyxFQUFFMUMsQ0FBQztJQUN0QixPQUFPcUQsTUFBTVIsVUFBVTFDLEdBQUd1QyxHQUFHMUM7QUFDL0I7QUFDQSxTQUFTNEQsSUFBSXpELENBQUM7SUFDWixPQUFPLENBQUNBLElBQUksTUFBTSxHQUFFLElBQUs7QUFDM0I7QUFDQSxTQUFTMEQsU0FBUzVCLEdBQUc7SUFDbkIsTUFBTTZCLElBQUl0QixPQUFPdUIsSUFBSSxDQUFDOUI7SUFDdEIsSUFBSWQsSUFBSTtJQUNSLElBQUluQjtJQUNKLElBQUksQ0FBQzhELEdBQUc7UUFDTjtJQUNGO0lBQ0EsSUFBSUEsQ0FBQyxDQUFDLEVBQUUsS0FBSzlELEdBQUc7UUFDZG1CLElBQUkyQyxDQUFDLENBQUMsRUFBRSxHQUFHdkQsSUFBSSxDQUFDdUQsQ0FBQyxDQUFDLEVBQUUsSUFBSXJELElBQUksQ0FBQ3FELENBQUMsQ0FBQyxFQUFFO0lBQ25DO0lBQ0EsTUFBTTNELElBQUl5RCxJQUFJLENBQUNFLENBQUMsQ0FBQyxFQUFFO0lBQ25CLE1BQU1FLEtBQUssQ0FBQ0YsQ0FBQyxDQUFDLEVBQUUsR0FBRztJQUNuQixNQUFNRyxLQUFLLENBQUNILENBQUMsQ0FBQyxFQUFFLEdBQUc7SUFDbkIsSUFBSUEsQ0FBQyxDQUFDLEVBQUUsS0FBSyxPQUFPO1FBQ2xCOUQsSUFBSTBELFFBQVF2RCxHQUFHNkQsSUFBSUM7SUFDckIsT0FBTyxJQUFJSCxDQUFDLENBQUMsRUFBRSxLQUFLLE9BQU87UUFDekI5RCxJQUFJMkQsUUFBUXhELEdBQUc2RCxJQUFJQztJQUNyQixPQUFPO1FBQ0xqRSxJQUFJeUQsUUFBUXRELEdBQUc2RCxJQUFJQztJQUNyQjtJQUNBLE9BQU87UUFDTG5DLEdBQUc5QixDQUFDLENBQUMsRUFBRTtRQUNQK0IsR0FBRy9CLENBQUMsQ0FBQyxFQUFFO1FBQ1BvQixHQUFHcEIsQ0FBQyxDQUFDLEVBQUU7UUFDUG1CLEdBQUdBO0lBQ0w7QUFDRjtBQUNBLFNBQVMrQyxPQUFPbEUsQ0FBQyxFQUFFbUUsR0FBRztJQUNwQixJQUFJaEUsSUFBSWdELFFBQVFuRDtJQUNoQkcsQ0FBQyxDQUFDLEVBQUUsR0FBR3lELElBQUl6RCxDQUFDLENBQUMsRUFBRSxHQUFHZ0U7SUFDbEJoRSxJQUFJc0QsUUFBUXREO0lBQ1pILEVBQUU4QixDQUFDLEdBQUczQixDQUFDLENBQUMsRUFBRTtJQUNWSCxFQUFFK0IsQ0FBQyxHQUFHNUIsQ0FBQyxDQUFDLEVBQUU7SUFDVkgsRUFBRW9CLENBQUMsR0FBR2pCLENBQUMsQ0FBQyxFQUFFO0FBQ1o7QUFDQSxTQUFTaUUsVUFBVXBFLENBQUM7SUFDbEIsSUFBSSxDQUFDQSxHQUFHO1FBQ047SUFDRjtJQUNBLE1BQU1tQixJQUFJZ0MsUUFBUW5EO0lBQ2xCLE1BQU1HLElBQUlnQixDQUFDLENBQUMsRUFBRTtJQUNkLE1BQU11QixJQUFJL0IsSUFBSVEsQ0FBQyxDQUFDLEVBQUU7SUFDbEIsTUFBTWpCLElBQUlTLElBQUlRLENBQUMsQ0FBQyxFQUFFO0lBQ2xCLE9BQU9uQixFQUFFbUIsQ0FBQyxHQUFHLE1BQ1QsQ0FBQyxLQUFLLEVBQUVoQixFQUFFLEVBQUUsRUFBRXVDLEVBQUUsR0FBRyxFQUFFeEMsRUFBRSxHQUFHLEVBQUVRLElBQUlWLEVBQUVtQixDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQ3ZDLENBQUMsSUFBSSxFQUFFaEIsRUFBRSxFQUFFLEVBQUV1QyxFQUFFLEdBQUcsRUFBRXhDLEVBQUUsRUFBRSxDQUFDO0FBQy9CO0FBRUEsTUFBTXNELE1BQU07SUFDVmEsR0FBRztJQUNIQyxHQUFHO0lBQ0hDLEdBQUc7SUFDSEMsR0FBRztJQUNIQyxHQUFHO0lBQ0hDLEdBQUc7SUFDSEMsR0FBRztJQUNIOUQsR0FBRztJQUNIK0QsR0FBRztJQUNIQyxHQUFHO0lBQ0gvRCxHQUFHO0lBQ0hDLEdBQUc7SUFDSEMsR0FBRztJQUNIOEQsR0FBRztJQUNIQyxHQUFHO0lBQ0g5RCxHQUFHO0lBQ0grRCxHQUFHO0lBQ0hDLEdBQUc7SUFDSEMsR0FBRztJQUNIQyxHQUFHO0lBQ0hDLEdBQUc7SUFDSGxFLEdBQUc7SUFDSG1FLEdBQUc7SUFDSEMsR0FBRztJQUNIQyxHQUFHO0lBQ0hDLEdBQUc7SUFDSEMsR0FBRztBQUNMO0FBQ0EsTUFBTUMsVUFBVTtJQUNkQyxRQUFRO0lBQ1JDLGFBQWE7SUFDYkMsTUFBTTtJQUNOQyxXQUFXO0lBQ1hDLE1BQU07SUFDTkMsT0FBTztJQUNQQyxRQUFRO0lBQ1JDLE9BQU87SUFDUEMsY0FBYztJQUNkQyxJQUFJO0lBQ0pDLFNBQVM7SUFDVEMsTUFBTTtJQUNOQyxXQUFXO0lBQ1hDLFFBQVE7SUFDUkMsVUFBVTtJQUNWQyxTQUFTO0lBQ1RDLEtBQUs7SUFDTEMsYUFBYTtJQUNiQyxTQUFTO0lBQ1RDLFNBQVM7SUFDVEMsTUFBTTtJQUNOQyxLQUFLO0lBQ0xDLE9BQU87SUFDUEMsU0FBUztJQUNUQyxNQUFNO0lBQ05DLE1BQU07SUFDTkMsTUFBTTtJQUNOQyxRQUFRO0lBQ1JDLFNBQVM7SUFDVEMsVUFBVTtJQUNWQyxRQUFRO0lBQ1JDLE9BQU87SUFDUEMsS0FBSztJQUNMQyxRQUFRO0lBQ1JDLFFBQVE7SUFDUkMsTUFBTTtJQUNOQyxPQUFPO0lBQ1BDLE9BQU87SUFDUEMsS0FBSztJQUNMQyxRQUFRO0lBQ1JDLFFBQVE7SUFDUkMsVUFBVTtJQUNWQyxRQUFRO0lBQ1JDLFFBQVE7SUFDUkMsVUFBVTtJQUNWQyxVQUFVO0lBQ1ZDLFVBQVU7SUFDVkMsVUFBVTtJQUNWQyxRQUFRO0lBQ1JDLFNBQVM7SUFDVEMsV0FBVztJQUNYQyxLQUFLO0lBQ0xDLFFBQVE7SUFDUkMsS0FBSztJQUNMQyxLQUFLO0lBQ0xDLE9BQU87SUFDUEMsS0FBSztJQUNMQyxTQUFTO0lBQ1RDLFFBQVE7SUFDUkMsU0FBUztJQUNUQyxPQUFPO0lBQ1BDLE1BQU07SUFDTkMsT0FBTztJQUNQQyxRQUFRO0lBQ1JDLFdBQVc7SUFDWEMsU0FBUztJQUNUQyxZQUFZO0lBQ1pDLEtBQUs7SUFDTEMsTUFBTTtJQUNOQyxPQUFPO0lBQ1BDLFdBQVc7SUFDWEMsTUFBTTtJQUNOQyxNQUFNO0lBQ05DLE1BQU07SUFDTkMsTUFBTTtJQUNOQyxRQUFRO0lBQ1JDLFFBQVE7SUFDUkMsUUFBUTtJQUNSQyxPQUFPO0lBQ1BDLE9BQU87SUFDUEMsU0FBUztJQUNUQyxLQUFLO0lBQ0xDLE1BQU07SUFDTkMsU0FBUztJQUNUQyxLQUFLO0lBQ0xDLFFBQVE7SUFDUkMsT0FBTztJQUNQQyxZQUFZO0lBQ1pDLEtBQUs7SUFDTEMsT0FBTztJQUNQQyxRQUFRO0lBQ1JDLFFBQVE7SUFDUkMsTUFBTTtJQUNOQyxXQUFXO0lBQ1hDLEtBQUs7SUFDTEMsVUFBVTtJQUNWQyxZQUFZO0lBQ1pDLFNBQVM7SUFDVEMsVUFBVTtJQUNWQyxTQUFTO0lBQ1RDLFlBQVk7SUFDWkMsTUFBTTtJQUNOQyxRQUFRO0lBQ1JDLE1BQU07SUFDTkMsU0FBUztJQUNUQyxPQUFPO0lBQ1BDLFNBQVM7SUFDVEMsTUFBTTtJQUNOQyxXQUFXO0lBQ1hDLFFBQVE7SUFDUkMsT0FBTztJQUNQQyxZQUFZO0lBQ1pDLFdBQVc7SUFDWEMsU0FBUztJQUNUQyxNQUFNO0lBQ05DLEtBQUs7SUFDTEMsTUFBTTtJQUNOQyxTQUFTO0lBQ1RDLE9BQU87SUFDUEMsYUFBYTtJQUNiQyxJQUFJO0lBQ0pDLFVBQVU7SUFDVkMsT0FBTztJQUNQQyxXQUFXO0lBQ1hDLE9BQU87SUFDUEMsV0FBVztJQUNYQyxPQUFPO0lBQ1BDLFNBQVM7SUFDVEMsT0FBTztJQUNQQyxRQUFRO0lBQ1JDLE9BQU87SUFDUEMsS0FBSztJQUNMQyxNQUFNO0lBQ05DLE1BQU07SUFDTkMsTUFBTTtJQUNOQyxVQUFVO0lBQ1ZDLFFBQVE7SUFDUkMsS0FBSztJQUNMQyxLQUFLO0lBQ0xDLE9BQU87SUFDUEMsUUFBUTtJQUNSQyxJQUFJO0lBQ0pDLE9BQU87SUFDUEMsS0FBSztJQUNMQyxNQUFNO0lBQ05DLFdBQVc7SUFDWEMsSUFBSTtJQUNKQyxPQUFPO0FBQ1Q7QUFDQSxTQUFTQztJQUNQLE1BQU1DLFdBQVcsQ0FBQztJQUNsQixNQUFNQyxPQUFP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TzlCLEtBQUssRUFBRTtRQUNaRCxPQUFPLElBQUksQ0FBQ2EsSUFBSSxFQUFFLEdBQUcsQ0FBQ1o7UUFDdEIsT0FBTyxJQUFJO0lBQ2I7SUFDQStCLFNBQVMvQixLQUFLLEVBQUU7UUFDZEQsT0FBTyxJQUFJLENBQUNhLElBQUksRUFBRSxHQUFHWjtRQUNyQixPQUFPLElBQUk7SUFDYjtJQUNBZ0MsV0FBV2hDLEtBQUssRUFBRTtRQUNoQkQsT0FBTyxJQUFJLENBQUNhLElBQUksRUFBRSxHQUFHLENBQUNaO1FBQ3RCLE9BQU8sSUFBSTtJQUNiO0lBQ0F0TSxPQUFPQyxHQUFHLEVBQUU7UUFDVkQsT0FBTyxJQUFJLENBQUNrTixJQUFJLEVBQUVqTjtRQUNsQixPQUFPLElBQUk7SUFDYjtBQUNGO0FBRUEsU0FBU3NPLFVBQVUzQixLQUFLO0lBQ3RCLE9BQU8sSUFBSUcsTUFBTUg7QUFDbkI7QUFFa00iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BrdXJrbGUrY29sb3JAMC4zLjIvbm9kZV9tb2R1bGVzL0BrdXJrbGUvY29sb3IvZGlzdC9jb2xvci5lc20uanM/OTM1MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBrdXJrbGUvY29sb3IgdjAuMy4yXG4gKiBodHRwczovL2dpdGh1Yi5jb20va3Vya2xlL2NvbG9yI3JlYWRtZVxuICogKGMpIDIwMjMgSnVra2EgS3Vya2VsYVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKi9cbmZ1bmN0aW9uIHJvdW5kKHYpIHtcbiAgcmV0dXJuIHYgKyAwLjUgfCAwO1xufVxuY29uc3QgbGltID0gKHYsIGwsIGgpID0+IE1hdGgubWF4KE1hdGgubWluKHYsIGgpLCBsKTtcbmZ1bmN0aW9uIHAyYih2KSB7XG4gIHJldHVybiBsaW0ocm91bmQodiAqIDIuNTUpLCAwLCAyNTUpO1xufVxuZnVuY3Rpb24gYjJwKHYpIHtcbiAgcmV0dXJuIGxpbShyb3VuZCh2IC8gMi41NSksIDAsIDEwMCk7XG59XG5mdW5jdGlvbiBuMmIodikge1xuICByZXR1cm4gbGltKHJvdW5kKHYgKiAyNTUpLCAwLCAyNTUpO1xufVxuZnVuY3Rpb24gYjJuKHYpIHtcbiAgcmV0dXJuIGxpbShyb3VuZCh2IC8gMi41NSkgLyAxMDAsIDAsIDEpO1xufVxuZnVuY3Rpb24gbjJwKHYpIHtcbiAgcmV0dXJuIGxpbShyb3VuZCh2ICogMTAwKSwgMCwgMTAwKTtcbn1cblxuY29uc3QgbWFwJDEgPSB7MDogMCwgMTogMSwgMjogMiwgMzogMywgNDogNCwgNTogNSwgNjogNiwgNzogNywgODogOCwgOTogOSwgQTogMTAsIEI6IDExLCBDOiAxMiwgRDogMTMsIEU6IDE0LCBGOiAxNSwgYTogMTAsIGI6IDExLCBjOiAxMiwgZDogMTMsIGU6IDE0LCBmOiAxNX07XG5jb25zdCBoZXggPSBbLi4uJzAxMjM0NTY3ODlBQkNERUYnXTtcbmNvbnN0IGgxID0gYiA9PiBoZXhbYiAmIDB4Rl07XG5jb25zdCBoMiA9IGIgPT4gaGV4WyhiICYgMHhGMCkgPj4gNF0gKyBoZXhbYiAmIDB4Rl07XG5jb25zdCBlcSA9IGIgPT4gKChiICYgMHhGMCkgPj4gNCkgPT09IChiICYgMHhGKTtcbmNvbnN0IGlzU2hvcnQgPSB2ID0+IGVxKHYucikgJiYgZXEodi5nKSAmJiBlcSh2LmIpICYmIGVxKHYuYSk7XG5mdW5jdGlvbiBoZXhQYXJzZShzdHIpIHtcbiAgdmFyIGxlbiA9IHN0ci5sZW5ndGg7XG4gIHZhciByZXQ7XG4gIGlmIChzdHJbMF0gPT09ICcjJykge1xuICAgIGlmIChsZW4gPT09IDQgfHwgbGVuID09PSA1KSB7XG4gICAgICByZXQgPSB7XG4gICAgICAgIHI6IDI1NSAmIG1hcCQxW3N0clsxXV0gKiAxNyxcbiAgICAgICAgZzogMjU1ICYgbWFwJDFbc3RyWzJdXSAqIDE3LFxuICAgICAgICBiOiAyNTUgJiBtYXAkMVtzdHJbM11dICogMTcsXG4gICAgICAgIGE6IGxlbiA9PT0gNSA/IG1hcCQxW3N0cls0XV0gKiAxNyA6IDI1NVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGxlbiA9PT0gNyB8fCBsZW4gPT09IDkpIHtcbiAgICAgIHJldCA9IHtcbiAgICAgICAgcjogbWFwJDFbc3RyWzFdXSA8PCA0IHwgbWFwJDFbc3RyWzJdXSxcbiAgICAgICAgZzogbWFwJDFbc3RyWzNdXSA8PCA0IHwgbWFwJDFbc3RyWzRdXSxcbiAgICAgICAgYjogbWFwJDFbc3RyWzVdXSA8PCA0IHwgbWFwJDFbc3RyWzZdXSxcbiAgICAgICAgYTogbGVuID09PSA5ID8gKG1hcCQxW3N0cls3XV0gPDwgNCB8IG1hcCQxW3N0cls4XV0pIDogMjU1XG4gICAgICB9O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmV0O1xufVxuY29uc3QgYWxwaGEgPSAoYSwgZikgPT4gYSA8IDI1NSA/IGYoYSkgOiAnJztcbmZ1bmN0aW9uIGhleFN0cmluZyh2KSB7XG4gIHZhciBmID0gaXNTaG9ydCh2KSA/IGgxIDogaDI7XG4gIHJldHVybiB2XG4gICAgPyAnIycgKyBmKHYucikgKyBmKHYuZykgKyBmKHYuYikgKyBhbHBoYSh2LmEsIGYpXG4gICAgOiB1bmRlZmluZWQ7XG59XG5cbmNvbnN0IEhVRV9SRSA9IC9eKGhzbGE/fGh3Ynxoc3YpXFwoXFxzKihbLSsuZVxcZF0rKSg/OmRlZyk/W1xccyxdKyhbLSsuZVxcZF0rKSVbXFxzLF0rKFstKy5lXFxkXSspJSg/OltcXHMsXSsoWy0rLmVcXGRdKykoJSk/KT9cXHMqXFwpJC87XG5mdW5jdGlvbiBoc2wycmdibihoLCBzLCBsKSB7XG4gIGNvbnN0IGEgPSBzICogTWF0aC5taW4obCwgMSAtIGwpO1xuICBjb25zdCBmID0gKG4sIGsgPSAobiArIGggLyAzMCkgJSAxMikgPT4gbCAtIGEgKiBNYXRoLm1heChNYXRoLm1pbihrIC0gMywgOSAtIGssIDEpLCAtMSk7XG4gIHJldHVybiBbZigwKSwgZig4KSwgZig0KV07XG59XG5mdW5jdGlvbiBoc3YycmdibihoLCBzLCB2KSB7XG4gIGNvbnN0IGYgPSAobiwgayA9IChuICsgaCAvIDYwKSAlIDYpID0+IHYgLSB2ICogcyAqIE1hdGgubWF4KE1hdGgubWluKGssIDQgLSBrLCAxKSwgMCk7XG4gIHJldHVybiBbZig1KSwgZigzKSwgZigxKV07XG59XG5mdW5jdGlvbiBod2IycmdibihoLCB3LCBiKSB7XG4gIGNvbnN0IHJnYiA9IGhzbDJyZ2JuKGgsIDEsIDAuNSk7XG4gIGxldCBpO1xuICBpZiAodyArIGIgPiAxKSB7XG4gICAgaSA9IDEgLyAodyArIGIpO1xuICAgIHcgKj0gaTtcbiAgICBiICo9IGk7XG4gIH1cbiAgZm9yIChpID0gMDsgaSA8IDM7IGkrKykge1xuICAgIHJnYltpXSAqPSAxIC0gdyAtIGI7XG4gICAgcmdiW2ldICs9IHc7XG4gIH1cbiAgcmV0dXJuIHJnYjtcbn1cbmZ1bmN0aW9uIGh1ZVZhbHVlKHIsIGcsIGIsIGQsIG1heCkge1xuICBpZiAociA9PT0gbWF4KSB7XG4gICAgcmV0dXJuICgoZyAtIGIpIC8gZCkgKyAoZyA8IGIgPyA2IDogMCk7XG4gIH1cbiAgaWYgKGcgPT09IG1heCkge1xuICAgIHJldHVybiAoYiAtIHIpIC8gZCArIDI7XG4gIH1cbiAgcmV0dXJuIChyIC0gZykgLyBkICsgNDtcbn1cbmZ1bmN0aW9uIHJnYjJoc2wodikge1xuICBjb25zdCByYW5nZSA9IDI1NTtcbiAgY29uc3QgciA9IHYuciAvIHJhbmdlO1xuICBjb25zdCBnID0gdi5nIC8gcmFuZ2U7XG4gIGNvbnN0IGIgPSB2LmIgLyByYW5nZTtcbiAgY29uc3QgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG4gIGNvbnN0IG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuICBjb25zdCBsID0gKG1heCArIG1pbikgLyAyO1xuICBsZXQgaCwgcywgZDtcbiAgaWYgKG1heCAhPT0gbWluKSB7XG4gICAgZCA9IG1heCAtIG1pbjtcbiAgICBzID0gbCA+IDAuNSA/IGQgLyAoMiAtIG1heCAtIG1pbikgOiBkIC8gKG1heCArIG1pbik7XG4gICAgaCA9IGh1ZVZhbHVlKHIsIGcsIGIsIGQsIG1heCk7XG4gICAgaCA9IGggKiA2MCArIDAuNTtcbiAgfVxuICByZXR1cm4gW2ggfCAwLCBzIHx8IDAsIGxdO1xufVxuZnVuY3Rpb24gY2FsbG4oZiwgYSwgYiwgYykge1xuICByZXR1cm4gKFxuICAgIEFycmF5LmlzQXJyYXkoYSlcbiAgICAgID8gZihhWzBdLCBhWzFdLCBhWzJdKVxuICAgICAgOiBmKGEsIGIsIGMpXG4gICkubWFwKG4yYik7XG59XG5mdW5jdGlvbiBoc2wycmdiKGgsIHMsIGwpIHtcbiAgcmV0dXJuIGNhbGxuKGhzbDJyZ2JuLCBoLCBzLCBsKTtcbn1cbmZ1bmN0aW9uIGh3YjJyZ2IoaCwgdywgYikge1xuICByZXR1cm4gY2FsbG4oaHdiMnJnYm4sIGgsIHcsIGIpO1xufVxuZnVuY3Rpb24gaHN2MnJnYihoLCBzLCB2KSB7XG4gIHJldHVybiBjYWxsbihoc3YycmdibiwgaCwgcywgdik7XG59XG5mdW5jdGlvbiBodWUoaCkge1xuICByZXR1cm4gKGggJSAzNjAgKyAzNjApICUgMzYwO1xufVxuZnVuY3Rpb24gaHVlUGFyc2Uoc3RyKSB7XG4gIGNvbnN0IG0gPSBIVUVfUkUuZXhlYyhzdHIpO1xuICBsZXQgYSA9IDI1NTtcbiAgbGV0IHY7XG4gIGlmICghbSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAobVs1XSAhPT0gdikge1xuICAgIGEgPSBtWzZdID8gcDJiKCttWzVdKSA6IG4yYigrbVs1XSk7XG4gIH1cbiAgY29uc3QgaCA9IGh1ZSgrbVsyXSk7XG4gIGNvbnN0IHAxID0gK21bM10gLyAxMDA7XG4gIGNvbnN0IHAyID0gK21bNF0gLyAxMDA7XG4gIGlmIChtWzFdID09PSAnaHdiJykge1xuICAgIHYgPSBod2IycmdiKGgsIHAxLCBwMik7XG4gIH0gZWxzZSBpZiAobVsxXSA9PT0gJ2hzdicpIHtcbiAgICB2ID0gaHN2MnJnYihoLCBwMSwgcDIpO1xuICB9IGVsc2Uge1xuICAgIHYgPSBoc2wycmdiKGgsIHAxLCBwMik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICByOiB2WzBdLFxuICAgIGc6IHZbMV0sXG4gICAgYjogdlsyXSxcbiAgICBhOiBhXG4gIH07XG59XG5mdW5jdGlvbiByb3RhdGUodiwgZGVnKSB7XG4gIHZhciBoID0gcmdiMmhzbCh2KTtcbiAgaFswXSA9IGh1ZShoWzBdICsgZGVnKTtcbiAgaCA9IGhzbDJyZ2IoaCk7XG4gIHYuciA9IGhbMF07XG4gIHYuZyA9IGhbMV07XG4gIHYuYiA9IGhbMl07XG59XG5mdW5jdGlvbiBoc2xTdHJpbmcodikge1xuICBpZiAoIXYpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgYSA9IHJnYjJoc2wodik7XG4gIGNvbnN0IGggPSBhWzBdO1xuICBjb25zdCBzID0gbjJwKGFbMV0pO1xuICBjb25zdCBsID0gbjJwKGFbMl0pO1xuICByZXR1cm4gdi5hIDwgMjU1XG4gICAgPyBgaHNsYSgke2h9LCAke3N9JSwgJHtsfSUsICR7YjJuKHYuYSl9KWBcbiAgICA6IGBoc2woJHtofSwgJHtzfSUsICR7bH0lKWA7XG59XG5cbmNvbnN0IG1hcCA9IHtcbiAgeDogJ2RhcmsnLFxuICBaOiAnbGlnaHQnLFxuICBZOiAncmUnLFxuICBYOiAnYmx1JyxcbiAgVzogJ2dyJyxcbiAgVjogJ21lZGl1bScsXG4gIFU6ICdzbGF0ZScsXG4gIEE6ICdlZScsXG4gIFQ6ICdvbCcsXG4gIFM6ICdvcicsXG4gIEI6ICdyYScsXG4gIEM6ICdsYXRlZycsXG4gIEQ6ICdpZ2h0cycsXG4gIFI6ICdpbicsXG4gIFE6ICd0dXJxdW9pcycsXG4gIEU6ICdoaScsXG4gIFA6ICdybycsXG4gIE86ICdhbCcsXG4gIE46ICdsZScsXG4gIE06ICdkZScsXG4gIEw6ICd5ZWxsbycsXG4gIEY6ICdlbicsXG4gIEs6ICdjaCcsXG4gIEc6ICdhcmtzJyxcbiAgSDogJ2VhJyxcbiAgSTogJ2lnaHRnJyxcbiAgSjogJ3doJ1xufTtcbmNvbnN0IG5hbWVzJDEgPSB7XG4gIE9pY2VYZTogJ2YwZjhmZicsXG4gIGFudGlxdWV3RXRlOiAnZmFlYmQ3JyxcbiAgYXF1YTogJ2ZmZmYnLFxuICBhcXVhbWFyUmU6ICc3ZmZmZDQnLFxuICBhenVZOiAnZjBmZmZmJyxcbiAgYmVpZ2U6ICdmNWY1ZGMnLFxuICBiaXNxdWU6ICdmZmU0YzQnLFxuICBibGFjazogJzAnLFxuICBibGFuS2VkT21vbmQ6ICdmZmViY2QnLFxuICBYZTogJ2ZmJyxcbiAgWGV2aVRldDogJzhhMmJlMicsXG4gIGJQd246ICdhNTJhMmEnLFxuICBidXJseXdvb2Q6ICdkZWI4ODcnLFxuICBjYU10WGU6ICc1ZjllYTAnLFxuICBLYXJ0WXVzZTogJzdmZmYwMCcsXG4gIEtvY1RhdGU6ICdkMjY5MWUnLFxuICBjU086ICdmZjdmNTAnLFxuICBjU25mbG93ZXJYZTogJzY0OTVlZCcsXG4gIGNTbnNpbGs6ICdmZmY4ZGMnLFxuICBjcmltc29uOiAnZGMxNDNjJyxcbiAgY3lhbjogJ2ZmZmYnLFxuICB4WGU6ICc4YicsXG4gIHhjeWFuOiAnOGI4YicsXG4gIHhnVE1uUGQ6ICdiODg2MGInLFxuICB4V2F5OiAnYTlhOWE5JyxcbiAgeGdZRjogJzY0MDAnLFxuICB4Z1l5OiAnYTlhOWE5JyxcbiAgeGtoYWtpOiAnYmRiNzZiJyxcbiAgeG1hZ0Z0YTogJzhiMDA4YicsXG4gIHhUaXZlZ1lGOiAnNTU2YjJmJyxcbiAgeFNhbmdlOiAnZmY4YzAwJyxcbiAgeFNjRWQ6ICc5OTMyY2MnLFxuICB4WWQ6ICc4YjAwMDAnLFxuICB4c09tb246ICdlOTk2N2EnLFxuICB4c0hnWUY6ICc4ZmJjOGYnLFxuICB4VVhlOiAnNDgzZDhiJyxcbiAgeFVXYXk6ICcyZjRmNGYnLFxuICB4VWdZeTogJzJmNGY0ZicsXG4gIHhRZTogJ2NlZDEnLFxuICB4dmlUZXQ6ICc5NDAwZDMnLFxuICBkQXBwUms6ICdmZjE0OTMnLFxuICBkQXBza3lYZTogJ2JmZmYnLFxuICBkaW1XYXk6ICc2OTY5NjknLFxuICBkaW1nWXk6ICc2OTY5NjknLFxuICBkb2RnZXJYZTogJzFlOTBmZicsXG4gIGZpWWJyaWNrOiAnYjIyMjIyJyxcbiAgZmxTT3dFdGU6ICdmZmZhZjAnLFxuICBmb1lzdFdBbjogJzIyOGIyMicsXG4gIGZ1S3NpYTogJ2ZmMDBmZicsXG4gIGdhUnNiU286ICdkY2RjZGMnLFxuICBnaG9zdHdFdGU6ICdmOGY4ZmYnLFxuICBnVGQ6ICdmZmQ3MDAnLFxuICBnVE1uUGQ6ICdkYWE1MjAnLFxuICBXYXk6ICc4MDgwODAnLFxuICBnWUY6ICc4MDAwJyxcbiAgZ1lGTHc6ICdhZGZmMmYnLFxuICBnWXk6ICc4MDgwODAnLFxuICBob25leU13OiAnZjBmZmYwJyxcbiAgaG90cFJrOiAnZmY2OWI0JyxcbiAgUmRpYW5ZZDogJ2NkNWM1YycsXG4gIFJkaWdvOiAnNGIwMDgyJyxcbiAgaXZTeTogJ2ZmZmZmMCcsXG4gIGtoYWtpOiAnZjBlNjhjJyxcbiAgbGF2Rk1yOiAnZTZlNmZhJyxcbiAgbGF2Rk1yWHNoOiAnZmZmMGY1JyxcbiAgbGF3bmdZRjogJzdjZmMwMCcsXG4gIE5tb25jRWZmb246ICdmZmZhY2QnLFxuICBaWGU6ICdhZGQ4ZTYnLFxuICBaY1NPOiAnZjA4MDgwJyxcbiAgWmN5YW46ICdlMGZmZmYnLFxuICBaZ1RNblBkTHc6ICdmYWZhZDInLFxuICBaV2F5OiAnZDNkM2QzJyxcbiAgWmdZRjogJzkwZWU5MCcsXG4gIFpnWXk6ICdkM2QzZDMnLFxuICBacFJrOiAnZmZiNmMxJyxcbiAgWnNPbW9uOiAnZmZhMDdhJyxcbiAgWnNIZ1lGOiAnMjBiMmFhJyxcbiAgWnNreVhlOiAnODdjZWZhJyxcbiAgWlVXYXk6ICc3Nzg4OTknLFxuICBaVWdZeTogJzc3ODg5OScsXG4gIFpzdEFsWGU6ICdiMGM0ZGUnLFxuICBaTHc6ICdmZmZmZTAnLFxuICBsaW1lOiAnZmYwMCcsXG4gIGxpbWVnWUY6ICczMmNkMzInLFxuICBsUkY6ICdmYWYwZTYnLFxuICBtYWdGdGE6ICdmZjAwZmYnLFxuICBtYVBvbjogJzgwMDAwMCcsXG4gIFZhcXVhbWFyUmU6ICc2NmNkYWEnLFxuICBWWGU6ICdjZCcsXG4gIFZTY0VkOiAnYmE1NWQzJyxcbiAgVnB1cnBOOiAnOTM3MGRiJyxcbiAgVnNIZ1lGOiAnM2NiMzcxJyxcbiAgVlVYZTogJzdiNjhlZScsXG4gIFZzcHJSZ2dZRjogJ2ZhOWEnLFxuICBWUWU6ICc0OGQxY2MnLFxuICBWdmlUZXRZZDogJ2M3MTU4NScsXG4gIG1pZG5pZ2h0WGU6ICcxOTE5NzAnLFxuICBtUnRjWWFtOiAnZjVmZmZhJyxcbiAgbWlzdHlQc2U6ICdmZmU0ZTEnLFxuICBtb2NjYXNSOiAnZmZlNGI1JyxcbiAgbmF2YWpvd0V0ZTogJ2ZmZGVhZCcsXG4gIG5hdnk6ICc4MCcsXG4gIFRkbGFjZTogJ2ZkZjVlNicsXG4gIFRpdmU6ICc4MDgwMDAnLFxuICBUaXZlZEJiOiAnNmI4ZTIzJyxcbiAgU2FuZ2U6ICdmZmE1MDAnLFxuICBTYW5nZVlkOiAnZmY0NTAwJyxcbiAgU2NFZDogJ2RhNzBkNicsXG4gIHBPZWdUTW5QZDogJ2VlZThhYScsXG4gIHBPZWdZRjogJzk4ZmI5OCcsXG4gIHBPZVFlOiAnYWZlZWVlJyxcbiAgcE9ldmlUZXRZZDogJ2RiNzA5MycsXG4gIHBhcGF5YXdFcDogJ2ZmZWZkNScsXG4gIHBIS3B1ZmY6ICdmZmRhYjknLFxuICBwZXJ1OiAnY2Q4NTNmJyxcbiAgcFJrOiAnZmZjMGNiJyxcbiAgcGx1bTogJ2RkYTBkZCcsXG4gIHBvd01yWGU6ICdiMGUwZTYnLFxuICBwdXJwTjogJzgwMDA4MCcsXG4gIFliZWNjYXB1cnBOOiAnNjYzMzk5JyxcbiAgWWQ6ICdmZjAwMDAnLFxuICBQc3licm93bjogJ2JjOGY4ZicsXG4gIFB5T1hlOiAnNDE2OWUxJyxcbiAgc2FkZE5iUHduOiAnOGI0NTEzJyxcbiAgc09tb246ICdmYTgwNzInLFxuICBzYW5keWJQd246ICdmNGE0NjAnLFxuICBzSGdZRjogJzJlOGI1NycsXG4gIHNIc2hlbGw6ICdmZmY1ZWUnLFxuICBzaUZuYTogJ2EwNTIyZCcsXG4gIHNpbHZlcjogJ2MwYzBjMCcsXG4gIHNreVhlOiAnODdjZWViJyxcbiAgVVhlOiAnNmE1YWNkJyxcbiAgVVdheTogJzcwODA5MCcsXG4gIFVnWXk6ICc3MDgwOTAnLFxuICBzbm93OiAnZmZmYWZhJyxcbiAgc3ByUmdnWUY6ICdmZjdmJyxcbiAgc3RBbFhlOiAnNDY4MmI0JyxcbiAgdGFuOiAnZDJiNDhjJyxcbiAgdGVPOiAnODA4MCcsXG4gIHRFc3ROOiAnZDhiZmQ4JyxcbiAgdG9tYXRvOiAnZmY2MzQ3JyxcbiAgUWU6ICc0MGUwZDAnLFxuICB2aVRldDogJ2VlODJlZScsXG4gIEpIdDogJ2Y1ZGViMycsXG4gIHdFdGU6ICdmZmZmZmYnLFxuICB3RXRlc21va2U6ICdmNWY1ZjUnLFxuICBMdzogJ2ZmZmYwMCcsXG4gIEx3Z1lGOiAnOWFjZDMyJ1xufTtcbmZ1bmN0aW9uIHVucGFjaygpIHtcbiAgY29uc3QgdW5wYWNrZWQgPSB7fTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG5hbWVzJDEpO1xuICBjb25zdCB0a2V5cyA9IE9iamVjdC5rZXlzKG1hcCk7XG4gIGxldCBpLCBqLCBrLCBvaywgbms7XG4gIGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgb2sgPSBuayA9IGtleXNbaV07XG4gICAgZm9yIChqID0gMDsgaiA8IHRrZXlzLmxlbmd0aDsgaisrKSB7XG4gICAgICBrID0gdGtleXNbal07XG4gICAgICBuayA9IG5rLnJlcGxhY2UoaywgbWFwW2tdKTtcbiAgICB9XG4gICAgayA9IHBhcnNlSW50KG5hbWVzJDFbb2tdLCAxNik7XG4gICAgdW5wYWNrZWRbbmtdID0gW2sgPj4gMTYgJiAweEZGLCBrID4+IDggJiAweEZGLCBrICYgMHhGRl07XG4gIH1cbiAgcmV0dXJuIHVucGFja2VkO1xufVxuXG5sZXQgbmFtZXM7XG5mdW5jdGlvbiBuYW1lUGFyc2Uoc3RyKSB7XG4gIGlmICghbmFtZXMpIHtcbiAgICBuYW1lcyA9IHVucGFjaygpO1xuICAgIG5hbWVzLnRyYW5zcGFyZW50ID0gWzAsIDAsIDAsIDBdO1xuICB9XG4gIGNvbnN0IGEgPSBuYW1lc1tzdHIudG9Mb3dlckNhc2UoKV07XG4gIHJldHVybiBhICYmIHtcbiAgICByOiBhWzBdLFxuICAgIGc6IGFbMV0sXG4gICAgYjogYVsyXSxcbiAgICBhOiBhLmxlbmd0aCA9PT0gNCA/IGFbM10gOiAyNTVcbiAgfTtcbn1cblxuY29uc3QgUkdCX1JFID0gL15yZ2JhP1xcKFxccyooWy0rLlxcZF0rKSglKT9bXFxzLF0rKFstKy5lXFxkXSspKCUpP1tcXHMsXSsoWy0rLmVcXGRdKykoJSk/KD86W1xccywvXSsoWy0rLmVcXGRdKykoJSk/KT9cXHMqXFwpJC87XG5mdW5jdGlvbiByZ2JQYXJzZShzdHIpIHtcbiAgY29uc3QgbSA9IFJHQl9SRS5leGVjKHN0cik7XG4gIGxldCBhID0gMjU1O1xuICBsZXQgciwgZywgYjtcbiAgaWYgKCFtKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChtWzddICE9PSByKSB7XG4gICAgY29uc3QgdiA9ICttWzddO1xuICAgIGEgPSBtWzhdID8gcDJiKHYpIDogbGltKHYgKiAyNTUsIDAsIDI1NSk7XG4gIH1cbiAgciA9ICttWzFdO1xuICBnID0gK21bM107XG4gIGIgPSArbVs1XTtcbiAgciA9IDI1NSAmIChtWzJdID8gcDJiKHIpIDogbGltKHIsIDAsIDI1NSkpO1xuICBnID0gMjU1ICYgKG1bNF0gPyBwMmIoZykgOiBsaW0oZywgMCwgMjU1KSk7XG4gIGIgPSAyNTUgJiAobVs2XSA/IHAyYihiKSA6IGxpbShiLCAwLCAyNTUpKTtcbiAgcmV0dXJuIHtcbiAgICByOiByLFxuICAgIGc6IGcsXG4gICAgYjogYixcbiAgICBhOiBhXG4gIH07XG59XG5mdW5jdGlvbiByZ2JTdHJpbmcodikge1xuICByZXR1cm4gdiAmJiAoXG4gICAgdi5hIDwgMjU1XG4gICAgICA/IGByZ2JhKCR7di5yfSwgJHt2Lmd9LCAke3YuYn0sICR7YjJuKHYuYSl9KWBcbiAgICAgIDogYHJnYigke3Yucn0sICR7di5nfSwgJHt2LmJ9KWBcbiAgKTtcbn1cblxuY29uc3QgdG8gPSB2ID0+IHYgPD0gMC4wMDMxMzA4ID8gdiAqIDEyLjkyIDogTWF0aC5wb3codiwgMS4wIC8gMi40KSAqIDEuMDU1IC0gMC4wNTU7XG5jb25zdCBmcm9tID0gdiA9PiB2IDw9IDAuMDQwNDUgPyB2IC8gMTIuOTIgOiBNYXRoLnBvdygodiArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xuZnVuY3Rpb24gaW50ZXJwb2xhdGUocmdiMSwgcmdiMiwgdCkge1xuICBjb25zdCByID0gZnJvbShiMm4ocmdiMS5yKSk7XG4gIGNvbnN0IGcgPSBmcm9tKGIybihyZ2IxLmcpKTtcbiAgY29uc3QgYiA9IGZyb20oYjJuKHJnYjEuYikpO1xuICByZXR1cm4ge1xuICAgIHI6IG4yYih0byhyICsgdCAqIChmcm9tKGIybihyZ2IyLnIpKSAtIHIpKSksXG4gICAgZzogbjJiKHRvKGcgKyB0ICogKGZyb20oYjJuKHJnYjIuZykpIC0gZykpKSxcbiAgICBiOiBuMmIodG8oYiArIHQgKiAoZnJvbShiMm4ocmdiMi5iKSkgLSBiKSkpLFxuICAgIGE6IHJnYjEuYSArIHQgKiAocmdiMi5hIC0gcmdiMS5hKVxuICB9O1xufVxuXG5mdW5jdGlvbiBtb2RIU0wodiwgaSwgcmF0aW8pIHtcbiAgaWYgKHYpIHtcbiAgICBsZXQgdG1wID0gcmdiMmhzbCh2KTtcbiAgICB0bXBbaV0gPSBNYXRoLm1heCgwLCBNYXRoLm1pbih0bXBbaV0gKyB0bXBbaV0gKiByYXRpbywgaSA9PT0gMCA/IDM2MCA6IDEpKTtcbiAgICB0bXAgPSBoc2wycmdiKHRtcCk7XG4gICAgdi5yID0gdG1wWzBdO1xuICAgIHYuZyA9IHRtcFsxXTtcbiAgICB2LmIgPSB0bXBbMl07XG4gIH1cbn1cbmZ1bmN0aW9uIGNsb25lKHYsIHByb3RvKSB7XG4gIHJldHVybiB2ID8gT2JqZWN0LmFzc2lnbihwcm90byB8fCB7fSwgdikgOiB2O1xufVxuZnVuY3Rpb24gZnJvbU9iamVjdChpbnB1dCkge1xuICB2YXIgdiA9IHtyOiAwLCBnOiAwLCBiOiAwLCBhOiAyNTV9O1xuICBpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcbiAgICBpZiAoaW5wdXQubGVuZ3RoID49IDMpIHtcbiAgICAgIHYgPSB7cjogaW5wdXRbMF0sIGc6IGlucHV0WzFdLCBiOiBpbnB1dFsyXSwgYTogMjU1fTtcbiAgICAgIGlmIChpbnB1dC5sZW5ndGggPiAzKSB7XG4gICAgICAgIHYuYSA9IG4yYihpbnB1dFszXSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHYgPSBjbG9uZShpbnB1dCwge3I6IDAsIGc6IDAsIGI6IDAsIGE6IDF9KTtcbiAgICB2LmEgPSBuMmIodi5hKTtcbiAgfVxuICByZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIGZ1bmN0aW9uUGFyc2Uoc3RyKSB7XG4gIGlmIChzdHIuY2hhckF0KDApID09PSAncicpIHtcbiAgICByZXR1cm4gcmdiUGFyc2Uoc3RyKTtcbiAgfVxuICByZXR1cm4gaHVlUGFyc2Uoc3RyKTtcbn1cbmNsYXNzIENvbG9yIHtcbiAgY29uc3RydWN0b3IoaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBDb2xvcikge1xuICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cbiAgICBjb25zdCB0eXBlID0gdHlwZW9mIGlucHV0O1xuICAgIGxldCB2O1xuICAgIGlmICh0eXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgdiA9IGZyb21PYmplY3QoaW5wdXQpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHYgPSBoZXhQYXJzZShpbnB1dCkgfHwgbmFtZVBhcnNlKGlucHV0KSB8fCBmdW5jdGlvblBhcnNlKGlucHV0KTtcbiAgICB9XG4gICAgdGhpcy5fcmdiID0gdjtcbiAgICB0aGlzLl92YWxpZCA9ICEhdjtcbiAgfVxuICBnZXQgdmFsaWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbGlkO1xuICB9XG4gIGdldCByZ2IoKSB7XG4gICAgdmFyIHYgPSBjbG9uZSh0aGlzLl9yZ2IpO1xuICAgIGlmICh2KSB7XG4gICAgICB2LmEgPSBiMm4odi5hKTtcbiAgICB9XG4gICAgcmV0dXJuIHY7XG4gIH1cbiAgc2V0IHJnYihvYmopIHtcbiAgICB0aGlzLl9yZ2IgPSBmcm9tT2JqZWN0KG9iaik7XG4gIH1cbiAgcmdiU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLl92YWxpZCA/IHJnYlN0cmluZyh0aGlzLl9yZ2IpIDogdW5kZWZpbmVkO1xuICB9XG4gIGhleFN0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsaWQgPyBoZXhTdHJpbmcodGhpcy5fcmdiKSA6IHVuZGVmaW5lZDtcbiAgfVxuICBoc2xTdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbGlkID8gaHNsU3RyaW5nKHRoaXMuX3JnYikgOiB1bmRlZmluZWQ7XG4gIH1cbiAgbWl4KGNvbG9yLCB3ZWlnaHQpIHtcbiAgICBpZiAoY29sb3IpIHtcbiAgICAgIGNvbnN0IGMxID0gdGhpcy5yZ2I7XG4gICAgICBjb25zdCBjMiA9IGNvbG9yLnJnYjtcbiAgICAgIGxldCB3MjtcbiAgICAgIGNvbnN0IHAgPSB3ZWlnaHQgPT09IHcyID8gMC41IDogd2VpZ2h0O1xuICAgICAgY29uc3QgdyA9IDIgKiBwIC0gMTtcbiAgICAgIGNvbnN0IGEgPSBjMS5hIC0gYzIuYTtcbiAgICAgIGNvbnN0IHcxID0gKCh3ICogYSA9PT0gLTEgPyB3IDogKHcgKyBhKSAvICgxICsgdyAqIGEpKSArIDEpIC8gMi4wO1xuICAgICAgdzIgPSAxIC0gdzE7XG4gICAgICBjMS5yID0gMHhGRiAmIHcxICogYzEuciArIHcyICogYzIuciArIDAuNTtcbiAgICAgIGMxLmcgPSAweEZGICYgdzEgKiBjMS5nICsgdzIgKiBjMi5nICsgMC41O1xuICAgICAgYzEuYiA9IDB4RkYgJiB3MSAqIGMxLmIgKyB3MiAqIGMyLmIgKyAwLjU7XG4gICAgICBjMS5hID0gcCAqIGMxLmEgKyAoMSAtIHApICogYzIuYTtcbiAgICAgIHRoaXMucmdiID0gYzE7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGludGVycG9sYXRlKGNvbG9yLCB0KSB7XG4gICAgaWYgKGNvbG9yKSB7XG4gICAgICB0aGlzLl9yZ2IgPSBpbnRlcnBvbGF0ZSh0aGlzLl9yZ2IsIGNvbG9yLl9yZ2IsIHQpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IENvbG9yKHRoaXMucmdiKTtcbiAgfVxuICBhbHBoYShhKSB7XG4gICAgdGhpcy5fcmdiLmEgPSBuMmIoYSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgY2xlYXJlcihyYXRpbykge1xuICAgIGNvbnN0IHJnYiA9IHRoaXMuX3JnYjtcbiAgICByZ2IuYSAqPSAxIC0gcmF0aW87XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZ3JleXNjYWxlKCkge1xuICAgIGNvbnN0IHJnYiA9IHRoaXMuX3JnYjtcbiAgICBjb25zdCB2YWwgPSByb3VuZChyZ2IuciAqIDAuMyArIHJnYi5nICogMC41OSArIHJnYi5iICogMC4xMSk7XG4gICAgcmdiLnIgPSByZ2IuZyA9IHJnYi5iID0gdmFsO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIG9wYXF1ZXIocmF0aW8pIHtcbiAgICBjb25zdCByZ2IgPSB0aGlzLl9yZ2I7XG4gICAgcmdiLmEgKj0gMSArIHJhdGlvO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIG5lZ2F0ZSgpIHtcbiAgICBjb25zdCB2ID0gdGhpcy5fcmdiO1xuICAgIHYuciA9IDI1NSAtIHYucjtcbiAgICB2LmcgPSAyNTUgLSB2Lmc7XG4gICAgdi5iID0gMjU1IC0gdi5iO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGxpZ2h0ZW4ocmF0aW8pIHtcbiAgICBtb2RIU0wodGhpcy5fcmdiLCAyLCByYXRpbyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZGFya2VuKHJhdGlvKSB7XG4gICAgbW9kSFNMKHRoaXMuX3JnYiwgMiwgLXJhdGlvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBzYXR1cmF0ZShyYXRpbykge1xuICAgIG1vZEhTTCh0aGlzLl9yZ2IsIDEsIHJhdGlvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBkZXNhdHVyYXRlKHJhdGlvKSB7XG4gICAgbW9kSFNMKHRoaXMuX3JnYiwgMSwgLXJhdGlvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICByb3RhdGUoZGVnKSB7XG4gICAgcm90YXRlKHRoaXMuX3JnYiwgZGVnKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG5mdW5jdGlvbiBpbmRleF9lc20oaW5wdXQpIHtcbiAgcmV0dXJuIG5ldyBDb2xvcihpbnB1dCk7XG59XG5cbmV4cG9ydCB7IENvbG9yLCBiMm4sIGIycCwgaW5kZXhfZXNtIGFzIGRlZmF1bHQsIGhleFBhcnNlLCBoZXhTdHJpbmcsIGhzbDJyZ2IsIGhzbFN0cmluZywgaHN2MnJnYiwgaHVlUGFyc2UsIGh3YjJyZ2IsIGxpbSwgbjJiLCBuMnAsIG5hbWVQYXJzZSwgcDJiLCByZ2IyaHNsLCByZ2JQYXJzZSwgcmdiU3RyaW5nLCByb3RhdGUsIHJvdW5kIH07XG4iXSwibmFtZXMiOlsicm91bmQiLCJ2IiwibGltIiwibCIsImgiLCJNYXRoIiwibWF4IiwibWluIiwicDJiIiwiYjJwIiwibjJiIiwiYjJuIiwibjJwIiwibWFwJDEiLCJBIiwiQiIsIkMiLCJEIiwiRSIsIkYiLCJhIiwiYiIsImMiLCJkIiwiZSIsImYiLCJoZXgiLCJoMSIsImgyIiwiZXEiLCJpc1Nob3J0IiwiciIsImciLCJoZXhQYXJzZSIsInN0ciIsImxlbiIsImxlbmd0aCIsInJldCIsImFscGhhIiwiaGV4U3RyaW5nIiwidW5kZWZpbmVkIiwiSFVFX1JFIiwiaHNsMnJnYm4iLCJzIiwibiIsImsiLCJoc3YycmdibiIsImh3YjJyZ2JuIiwidyIsInJnYiIsImkiLCJodWVWYWx1ZSIsInJnYjJoc2wiLCJyYW5nZSIsImNhbGxuIiwiQXJyYXkiLCJpc0FycmF5IiwibWFwIiwiaHNsMnJnYiIsImh3YjJyZ2IiLCJoc3YycmdiIiwiaHVlIiwiaHVlUGFyc2UiLCJtIiwiZXhlYyIsInAxIiwicDIiLCJyb3RhdGUiLCJkZWciLCJoc2xTdHJpbmciLCJ4IiwiWiIsIlkiLCJYIiwiVyIsIlYiLCJVIiwiVCIsIlMiLCJSIiwiUSIsIlAiLCJPIiwiTiIsIk0iLCJMIiwiSyIsIkciLCJIIiwiSSIsIkoiLCJuYW1lcyQxIiwiT2ljZVhlIiwiYW50aXF1ZXdFdGUiLCJhcXVhIiwiYXF1YW1hclJlIiwiYXp1WSIsImJlaWdlIiwiYmlzcXVlIiwiYmxhY2siLCJibGFuS2VkT21vbmQiLCJYZSIsIlhldmlUZXQiLCJiUHduIiwiYnVybHl3b29kIiwiY2FNdFhlIiwiS2FydFl1c2UiLCJLb2NUYXRlIiwiY1NPIiwiY1NuZmxvd2VyWGUiLCJjU25zaWxrIiwiY3JpbXNvbiIsImN5YW4iLCJ4WGUiLCJ4Y3lhbiIsInhnVE1uUGQiLCJ4V2F5IiwieGdZRiIsInhnWXkiLCJ4a2hha2kiLCJ4bWFnRnRhIiwieFRpdmVnWUYiLCJ4U2FuZ2UiLCJ4U2NFZCIsInhZZCIsInhzT21vbiIsInhzSGdZRiIsInhVWGUiLCJ4VVdheSIsInhVZ1l5IiwieFFlIiwieHZpVGV0IiwiZEFwcFJrIiwiZEFwc2t5WGUiLCJkaW1XYXkiLCJkaW1nWXkiLCJkb2RnZXJYZSIsImZpWWJyaWNrIiwiZmxTT3dFdGUiLCJmb1lzdFdBbiIsImZ1S3NpYSIsImdhUnNiU28iLCJnaG9zdHdFdGUiLCJnVGQiLCJnVE1uUGQiLCJXYXkiLCJnWUYiLCJnWUZMdyIsImdZeSIsImhvbmV5TXciLCJob3RwUmsiLCJSZGlhbllkIiwiUmRpZ28iLCJpdlN5Iiwia2hha2kiLCJsYXZGTXIiLCJsYXZGTXJYc2giLCJsYXduZ1lGIiwiTm1vbmNFZmZvbiIsIlpYZSIsIlpjU08iLCJaY3lhbiIsIlpnVE1uUGRMdyIsIlpXYXkiLCJaZ1lGIiwiWmdZeSIsIlpwUmsiLCJac09tb24iLCJac0hnWUYiLCJac2t5WGUiLCJaVVdheSIsIlpVZ1l5IiwiWnN0QWxYZSIsIlpMdyIsImxpbWUiLCJsaW1lZ1lGIiwibFJGIiwibWFnRnRhIiwibWFQb24iLCJWYXF1YW1hclJlIiwiVlhlIiwiVlNjRWQiLCJWcHVycE4iLCJWc0hnWUYiLCJWVVhlIiwiVnNwclJnZ1lGIiwiVlFlIiwiVnZpVGV0WWQiLCJtaWRuaWdodFhlIiwibVJ0Y1lhbSIsIm1pc3R5UHNlIiwibW9jY2FzUiIsIm5hdmFqb3dFdGUiLCJuYXZ5IiwiVGRsYWNlIiwiVGl2ZSIsIlRpdmVkQmIiLCJTYW5nZSIsIlNhbmdlWWQiLCJTY0VkIiwicE9lZ1RNblBkIiwicE9lZ1lGIiwicE9lUWUiLCJwT2V2aVRldFlkIiwicGFwYXlhd0VwIiwicEhLcHVmZiIsInBlcnUiLCJwUmsiLCJwbHVtIiwicG93TXJYZSIsInB1cnBOIiwiWWJlY2NhcHVycE4iLCJZZCIsIlBzeWJyb3duIiwiUHlPWGUiLCJzYWRkTmJQd24iLCJzT21vbiIsInNhbmR5YlB3biIsInNIZ1lGIiwic0hzaGVsbCIsInNpRm5hIiwic2lsdmVyIiwic2t5WGUiLCJVWGUiLCJVV2F5IiwiVWdZeSIsInNub3ciLCJzcHJSZ2dZRiIsInN0QWxYZSIsInRhbiIsInRlTyIsInRFc3ROIiwidG9tYXRvIiwiUWUiLCJ2aVRldCIsIkpIdCIsIndFdGUiLCJ3RXRlc21va2UiLCJMdyIsIkx3Z1lGIiwidW5wYWNrIiwidW5wYWNrZWQiLCJrZXlzIiwiT2JqZWN0IiwidGtleXMiLCJqIiwib2siLCJuayIsInJlcGxhY2UiLCJwYXJzZUludCIsIm5hbWVzIiwibmFtZVBhcnNlIiwidHJhbnNwYXJlbnQiLCJ0b0xvd2VyQ2FzZSIsIlJHQl9SRSIsInJnYlBhcnNlIiwicmdiU3RyaW5nIiwidG8iLCJwb3ciLCJmcm9tIiwiaW50ZXJwb2xhdGUiLCJyZ2IxIiwicmdiMiIsInQiLCJtb2RIU0wiLCJyYXRpbyIsInRtcCIsImNsb25lIiwicHJvdG8iLCJhc3NpZ24iLCJmcm9tT2JqZWN0IiwiaW5wdXQiLCJmdW5jdGlvblBhcnNlIiwiY2hhckF0IiwiQ29sb3IiLCJjb25zdHJ1Y3RvciIsInR5cGUiLCJfcmdiIiwiX3ZhbGlkIiwidmFsaWQiLCJvYmoiLCJtaXgiLCJjb2xvciIsIndlaWdodCIsImMxIiwiYzIiLCJ3MiIsInAiLCJ3MSIsImNsZWFyZXIiLCJncmV5c2NhbGUiLCJ2YWwiLCJvcGFxdWVyIiwibmVnYXRlIiwibGlnaHRlbiIsImRhcmtlbiIsInNhdHVyYXRlIiwiZGVzYXR1cmF0ZSIsImluZGV4X2VzbSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@kurkle+color@0.3.2/node_modules/@kurkle/color/dist/color.esm.js\n");

/***/ })

};
;
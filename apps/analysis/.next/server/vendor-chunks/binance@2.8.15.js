"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/binance@2.8.15";
exports.ids = ["vendor-chunks/binance@2.8.15"];
exports.modules = {

/***/ "(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/coinm-client.js":
/*!****************************************************************************************!*\
  !*** ../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/coinm-client.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __awaiter = (void 0) && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CoinMClient = void 0;\nconst requestUtils_1 = __webpack_require__(/*! ./util/requestUtils */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/requestUtils.js\");\nconst BaseRestClient_1 = __importDefault(__webpack_require__(/*! ./util/BaseRestClient */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/BaseRestClient.js\"));\nclass CoinMClient extends BaseRestClient_1.default {\n    constructor(restClientOptions = {}, requestOptions = {}, useTestnet){\n        const clientId = useTestnet ? \"coinmtest\" : \"coinm\";\n        super(clientId, restClientOptions, requestOptions);\n        this.clientId = clientId;\n        return this;\n    }\n    /**\n     * Abstraction required by each client to aid with time sync / drift handling\n     */ getServerTime() {\n        return __awaiter(this, void 0, void 0, function*() {\n            return this.get(requestUtils_1.getServerTimeEndpoint(this.clientId)).then((response)=>response.serverTime);\n        });\n    }\n    /**\n     *\n     * Market Data Endpoints\n     *\n     **/ testConnectivity() {\n        return this.get(\"dapi/v1/ping\");\n    }\n    getExchangeInfo() {\n        return this.get(\"dapi/v1/exchangeInfo\");\n    }\n    getOrderBook(params) {\n        return this.get(\"dapi/v1/depth\", params);\n    }\n    getRecentTrades(params) {\n        return this.get(\"dapi/v1/trades\", params);\n    }\n    getHistoricalTrades(params) {\n        return this.get(\"dapi/v1/historicalTrades\", params);\n    }\n    getAggregateTrades(params) {\n        return this.get(\"dapi/v1/aggTrades\", params);\n    }\n    /**\n     * Index Price and Mark Price\n     */ getMarkPrice(params) {\n        return this.get(\"dapi/v1/premiumIndex\", params);\n    }\n    getFundingRateHistory(params) {\n        return this.get(\"dapi/v1/fundingRate\", params);\n    }\n    getKlines(params) {\n        return this.get(\"dapi/v1/klines\", params);\n    }\n    getContinuousContractKlines(params) {\n        return this.get(\"dapi/v1/continuousKlines\", params);\n    }\n    getIndexPriceKlines(params) {\n        return this.get(\"dapi/v1/indexPriceKlines\", params);\n    }\n    getMarkPriceKlines(params) {\n        return this.get(\"dapi/v1/markPriceKlines\", params);\n    }\n    /**\n     * @deprecated use get24hrChangeStatistics() instead (method without the typo)\n     */ get24hrChangeStatististics(params) {\n        return this.get24hrChangeStatistics(params);\n    }\n    get24hrChangeStatistics(params) {\n        return this.get(\"dapi/v1/ticker/24hr\", params);\n    }\n    getSymbolPriceTicker(params) {\n        return this.get(\"dapi/v1/ticker/price\", params);\n    }\n    getSymbolOrderBookTicker(params) {\n        return this.get(\"dapi/v1/ticker/bookTicker\", params).then((e)=>requestUtils_1.asArray(e));\n    }\n    getOpenInterest(params) {\n        return this.get(\"dapi/v1/openInterest\", params);\n    }\n    getOpenInterestStatistics(params) {\n        return this.get(\"futures/data/openInterestHist\", params);\n    }\n    getTopTradersLongShortAccountRatio(params) {\n        return this.get(\"futures/data/topLongShortAccountRatio\", params);\n    }\n    getTopTradersLongShortPositionRatio(params) {\n        return this.get(\"futures/data/topLongShortPositionRatio\", params);\n    }\n    getGlobalLongShortAccountRatio(params) {\n        return this.get(\"futures/data/globalLongShortAccountRatio\", params);\n    }\n    getTakerBuySellVolume(params) {\n        return this.get(\"futures/data/takerBuySellVol\", params);\n    }\n    getCompositeSymbolIndex(params) {\n        return this.get(\"futures/data/basis\", params);\n    }\n    /**\n     *\n     * USD-Futures Account/Trade Endpoints\n     *\n     **/ setPositionMode(params) {\n        return this.postPrivate(\"dapi/v1/positionSide/dual\", params);\n    }\n    getCurrentPositionMode() {\n        return this.getPrivate(\"dapi/v1/positionSide/dual\");\n    }\n    submitNewOrder(params) {\n        this.validateOrderId(params, \"newClientOrderId\");\n        return this.postPrivate(\"dapi/v1/order\", params);\n    }\n    /**\n     * Order modify function, currently only LIMIT order modification is supported, modified orders will be reordered in the match queue\n     */ modifyOrder(params) {\n        return this.putPrivate(\"dapi/v1/order\", params);\n    }\n    /**\n     * Warning: max 5 orders at a time! This method does not throw, instead it returns individual errors in the response array if any orders were rejected.\n     *\n     * Known issue: `quantity` and `price` should be sent as strings\n     */ submitMultipleOrders(orders) {\n        const stringOrders = orders.map((order)=>{\n            const orderToStringify = Object.assign({}, order);\n            this.validateOrderId(orderToStringify, \"newClientOrderId\");\n            return JSON.stringify(orderToStringify);\n        });\n        const requestBody = {\n            batchOrders: `[${stringOrders.join(\",\")}]`\n        };\n        return this.postPrivate(\"dapi/v1/batchOrders\", requestBody);\n    }\n    /**\n     * Warning: max 5 orders at a time! This method does not throw, instead it returns individual errors in the response array if any orders were rejected.\n     */ modifyMultipleOrders(orders) {\n        const stringOrders = orders.map((order)=>{\n            const orderToStringify = Object.assign({}, order);\n            return JSON.stringify(orderToStringify);\n        });\n        const requestBody = {\n            batchOrders: `[${stringOrders.join(\",\")}]`\n        };\n        return this.putPrivate(\"dapi/v1/batchOrders\", requestBody);\n    }\n    getOrderModifyHistory(params) {\n        return this.getPrivate(\"dapi/v1/orderAmendment\", params);\n    }\n    getOrder(params) {\n        return this.getPrivate(\"dapi/v1/order\", params);\n    }\n    cancelOrder(params) {\n        return this.deletePrivate(\"dapi/v1/order\", params);\n    }\n    cancelAllOpenOrders(params) {\n        return this.deletePrivate(\"dapi/v1/allOpenOrders\", params);\n    }\n    cancelMultipleOrders(params) {\n        const requestParams = Object.assign({}, params);\n        if (params.orderIdList) {\n            requestParams[\"orderIdList\"] = JSON.stringify(params.orderIdList);\n        }\n        if (params.origClientOrderIdList) {\n            requestParams[\"origClientOrderIdList\"] = JSON.stringify(params.origClientOrderIdList);\n        }\n        return this.deletePrivate(\"dapi/v1/batchOrders\", requestParams);\n    }\n    // Auto-cancel all open orders\n    setCancelOrdersOnTimeout(params) {\n        return this.postPrivate(\"dapi/v1/countdownCancelAll\", params);\n    }\n    getCurrentOpenOrder(params) {\n        return this.getPrivate(\"dapi/v1/openOrder\", params);\n    }\n    getAllOpenOrders(params) {\n        return this.getPrivate(\"dapi/v1/openOrders\", params);\n    }\n    getAllOrders(params) {\n        return this.getPrivate(\"dapi/v1/allOrders\", params);\n    }\n    getBalance() {\n        return this.getPrivate(\"dapi/v1/balance\");\n    }\n    getAccountInformation() {\n        return this.getPrivate(\"dapi/v1/account\");\n    }\n    setLeverage(params) {\n        return this.postPrivate(\"dapi/v1/leverage\", params);\n    }\n    setMarginType(params) {\n        return this.postPrivate(\"dapi/v1/marginType\", params);\n    }\n    setIsolatedPositionMargin(params) {\n        return this.postPrivate(\"dapi/v1/positionMargin\", params);\n    }\n    getPositionMarginChangeHistory(params) {\n        return this.getPrivate(\"dapi/v1/positionMargin/history\", params);\n    }\n    getPositions() {\n        return this.getPrivate(\"dapi/v1/positionRisk\");\n    }\n    getAccountTrades(params) {\n        return this.getPrivate(\"dapi/v1/userTrades\", params);\n    }\n    getIncomeHistory(params) {\n        return this.getPrivate(\"dapi/v1/income\", params);\n    }\n    /**\n     * Notional Bracket for Symbol (NOT \"pair\")\n     */ getNotionalAndLeverageBrackets(params) {\n        return this.getPrivate(\"dapi/v2/leverageBracket\", params);\n    }\n    getForceOrders(params) {\n        return this.getPrivate(\"dapi/v1/forceOrders\", params);\n    }\n    getADLQuantileEstimation(params) {\n        return this.getPrivate(\"dapi/v1/adlQuantile\", params);\n    }\n    getAccountComissionRate(params) {\n        return this.getPrivate(\"dapi/v1/commissionRate\", params);\n    }\n    /**\n     *\n     * Broker Futures Endpoints\n     *\n     **/ // 1 == USDT-Margined, 2 == Coin-margined\n    getBrokerIfNewFuturesUser(brokerId, type = 1) {\n        return this.getPrivate(\"dapi/v1/apiReferral/ifNewUser\", {\n            brokerId,\n            type\n        });\n    }\n    setBrokerCustomIdForClient(customerId, email) {\n        return this.postPrivate(\"dapi/v1/apiReferral/customization\", {\n            customerId,\n            email\n        });\n    }\n    getBrokerClientCustomIds(customerId, email, page, limit) {\n        return this.getPrivate(\"dapi/v1/apiReferral/customization\", {\n            customerId,\n            email,\n            page,\n            limit\n        });\n    }\n    getBrokerUserCustomId(brokerId) {\n        return this.getPrivate(\"dapi/v1/apiReferral/userCustomization\", {\n            brokerId\n        });\n    }\n    getBrokerRebateDataOverview(type = 1) {\n        return this.getPrivate(\"dapi/v1/apiReferral/overview\", {\n            type\n        });\n    }\n    getBrokerUserTradeVolume(type = 1, startTime, endTime, limit) {\n        return this.getPrivate(\"dapi/v1/apiReferral/tradeVol\", {\n            type,\n            startTime,\n            endTime,\n            limit\n        });\n    }\n    getBrokerRebateVolume(type = 1, startTime, endTime, limit) {\n        return this.getPrivate(\"dapi/v1/apiReferral/rebateVol\", {\n            type,\n            startTime,\n            endTime,\n            limit\n        });\n    }\n    getBrokerTradeDetail(type = 1, startTime, endTime, limit) {\n        return this.getPrivate(\"dapi/v1/apiReferral/traderSummary\", {\n            type,\n            startTime,\n            endTime,\n            limit\n        });\n    }\n    /**\n     *\n     * User Data Stream Endpoints\n     *\n     **/ getFuturesUserDataListenKey() {\n        return this.post(\"dapi/v1/listenKey\");\n    }\n    keepAliveFuturesUserDataListenKey() {\n        return this.put(\"dapi/v1/listenKey\");\n    }\n    closeFuturesUserDataListenKey() {\n        return this.delete(\"dapi/v1/listenKey\");\n    }\n    /**\n     * Validate syntax meets requirements set by binance. Log warning if not.\n     */ validateOrderId(params, orderIdProperty) {\n        const apiCategory = this.clientId;\n        if (!params[orderIdProperty]) {\n            params[orderIdProperty] = requestUtils_1.generateNewOrderId(apiCategory);\n            return;\n        }\n        const expectedOrderIdPrefix = `x-${requestUtils_1.getOrderIdPrefix(apiCategory)}`;\n        if (!params[orderIdProperty].startsWith(expectedOrderIdPrefix)) {\n            requestUtils_1.logInvalidOrderId(orderIdProperty, expectedOrderIdPrefix, params);\n        }\n    }\n}\nexports.CoinMClient = CoinMClient; //# sourceMappingURL=coinm-client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/coinm-client.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/index.js":
/*!*********************************************************************************!*\
  !*** ../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/index.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, {\n        enumerable: true,\n        get: function() {\n            return m[k];\n        }\n    });\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n__exportStar(__webpack_require__(/*! ./ */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./coinm-client */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/coinm-client.js\"), exports);\n__exportStar(__webpack_require__(/*! ./logger */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/logger.js\"), exports);\n__exportStar(__webpack_require__(/*! ./main-client */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/main-client.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types/coin */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/types/coin.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types/futures */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/types/futures.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types/shared */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/types/shared.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types/spot */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/types/spot.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types/websockets */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/types/websockets.js\"), exports);\n__exportStar(__webpack_require__(/*! ./usdm-client */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/usdm-client.js\"), exports);\n__exportStar(__webpack_require__(/*! ./util/proxy */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/proxy.js\"), exports);\n__exportStar(__webpack_require__(/*! ./util/requestUtils */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/requestUtils.js\"), exports);\n__exportStar(__webpack_require__(/*! ./util/typeGuards */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/typeGuards.js\"), exports);\n__exportStar(__webpack_require__(/*! ./util/WsStore */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/WsStore.js\"), exports);\n__exportStar(__webpack_require__(/*! ./util/usdm */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/usdm/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./websocket-client */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/websocket-client.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JpbmFuY2VAMi44LjE1L25vZGVfbW9kdWxlcy9iaW5hbmNlL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLGtCQUFrQixDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLGVBQWUsSUFBTUMsQ0FBQUEsT0FBT0MsTUFBTSxHQUFJLFNBQVNDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEVBQUU7SUFDMUYsSUFBSUEsT0FBT0MsV0FBV0QsS0FBS0Q7SUFDM0JKLE9BQU9PLGNBQWMsQ0FBQ0wsR0FBR0csSUFBSTtRQUFFRyxZQUFZO1FBQU1DLEtBQUs7WUFBYSxPQUFPTixDQUFDLENBQUNDLEVBQUU7UUFBRTtJQUFFO0FBQ3RGLElBQU0sU0FBU0YsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsRUFBRTtJQUN0QixJQUFJQSxPQUFPQyxXQUFXRCxLQUFLRDtJQUMzQkYsQ0FBQyxDQUFDRyxHQUFHLEdBQUdGLENBQUMsQ0FBQ0MsRUFBRTtBQUNoQixDQUFDO0FBQ0QsSUFBSU0sZUFBZSxDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLFlBQVksSUFBSyxTQUFTUCxDQUFDLEVBQUVRLFFBQU87SUFDakUsSUFBSyxJQUFJQyxLQUFLVCxFQUFHLElBQUlTLE1BQU0sYUFBYSxDQUFDWixPQUFPYSxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDSixVQUFTQyxJQUFJYixnQkFBZ0JZLFVBQVNSLEdBQUdTO0FBQzNIO0FBQ0FaLDhDQUE2QztJQUFFZ0IsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RE4sYUFBYU8sbUJBQU9BLENBQUMsMkZBQUksR0FBR047QUFDNUJELGFBQWFPLG1CQUFPQSxDQUFDLDhHQUFnQixHQUFHTjtBQUN4Q0QsYUFBYU8sbUJBQU9BLENBQUMsa0dBQVUsR0FBR047QUFDbENELGFBQWFPLG1CQUFPQSxDQUFDLDRHQUFlLEdBQUdOO0FBQ3ZDRCxhQUFhTyxtQkFBT0EsQ0FBQywwR0FBYyxHQUFHTjtBQUN0Q0QsYUFBYU8sbUJBQU9BLENBQUMsZ0hBQWlCLEdBQUdOO0FBQ3pDRCxhQUFhTyxtQkFBT0EsQ0FBQyw4R0FBZ0IsR0FBR047QUFDeENELGFBQWFPLG1CQUFPQSxDQUFDLDBHQUFjLEdBQUdOO0FBQ3RDRCxhQUFhTyxtQkFBT0EsQ0FBQyxzSEFBb0IsR0FBR047QUFDNUNELGFBQWFPLG1CQUFPQSxDQUFDLDRHQUFlLEdBQUdOO0FBQ3ZDRCxhQUFhTyxtQkFBT0EsQ0FBQywwR0FBYyxHQUFHTjtBQUN0Q0QsYUFBYU8sbUJBQU9BLENBQUMsd0hBQXFCLEdBQUdOO0FBQzdDRCxhQUFhTyxtQkFBT0EsQ0FBQyxvSEFBbUIsR0FBR047QUFDM0NELGFBQWFPLG1CQUFPQSxDQUFDLDhHQUFnQixHQUFHTjtBQUN4Q0QsYUFBYU8sbUJBQU9BLENBQUMsOEdBQWEsR0FBR047QUFDckNELGFBQWFPLG1CQUFPQSxDQUFDLHNIQUFvQixHQUFHTixVQUM1QyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JpbmFuY2VAMi44LjE1L25vZGVfbW9kdWxlcy9iaW5hbmNlL2xpYi9pbmRleC5qcz81OWI4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb2lubS1jbGllbnRcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2xvZ2dlclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbWFpbi1jbGllbnRcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3R5cGVzL2NvaW5cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3R5cGVzL2Z1dHVyZXNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3R5cGVzL3NoYXJlZFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdHlwZXMvc3BvdFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdHlwZXMvd2Vic29ja2V0c1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdXNkbS1jbGllbnRcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3V0aWwvcHJveHlcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3V0aWwvcmVxdWVzdFV0aWxzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi91dGlsL3R5cGVHdWFyZHNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3V0aWwvV3NTdG9yZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdXRpbC91c2RtXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi93ZWJzb2NrZXQtY2xpZW50XCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJfX2NyZWF0ZUJpbmRpbmciLCJPYmplY3QiLCJjcmVhdGUiLCJvIiwibSIsImsiLCJrMiIsInVuZGVmaW5lZCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIl9fZXhwb3J0U3RhciIsImV4cG9ydHMiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwidmFsdWUiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/logger.js":
/*!**********************************************************************************!*\
  !*** ../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/logger.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DefaultLogger = void 0;\nexports.DefaultLogger = {\n    silly: (...params)=>{},\n    debug: (...params)=>{\n        console.log(new Date(), params);\n    },\n    notice: (...params)=>{\n        console.log(new Date(), params);\n    },\n    info: (...params)=>{\n        console.info(new Date(), params);\n    },\n    warning: (...params)=>{\n        console.error(new Date(), params);\n    },\n    error: (...params)=>{\n        console.error(new Date(), params);\n    }\n}; //# sourceMappingURL=logger.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JpbmFuY2VAMi44LjE1L25vZGVfbW9kdWxlcy9iaW5hbmNlL2xpYi9sb2dnZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHFCQUFxQixHQUFHLEtBQUs7QUFDN0JBLHFCQUFxQixHQUFHO0lBQ3BCRyxPQUFPLENBQUMsR0FBR0MsVUFBYTtJQUN4QkMsT0FBTyxDQUFDLEdBQUdEO1FBQ1BFLFFBQVFDLEdBQUcsQ0FBQyxJQUFJQyxRQUFRSjtJQUM1QjtJQUNBSyxRQUFRLENBQUMsR0FBR0w7UUFDUkUsUUFBUUMsR0FBRyxDQUFDLElBQUlDLFFBQVFKO0lBQzVCO0lBQ0FNLE1BQU0sQ0FBQyxHQUFHTjtRQUNORSxRQUFRSSxJQUFJLENBQUMsSUFBSUYsUUFBUUo7SUFDN0I7SUFDQU8sU0FBUyxDQUFDLEdBQUdQO1FBQ1RFLFFBQVFNLEtBQUssQ0FBQyxJQUFJSixRQUFRSjtJQUM5QjtJQUNBUSxPQUFPLENBQUMsR0FBR1I7UUFDUEUsUUFBUU0sS0FBSyxDQUFDLElBQUlKLFFBQVFKO0lBQzlCO0FBQ0osR0FDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JpbmFuY2VAMi44LjE1L25vZGVfbW9kdWxlcy9iaW5hbmNlL2xpYi9sb2dnZXIuanM/Yzk0MyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRGVmYXVsdExvZ2dlciA9IHZvaWQgMDtcbmV4cG9ydHMuRGVmYXVsdExvZ2dlciA9IHtcbiAgICBzaWxseTogKC4uLnBhcmFtcykgPT4geyB9LFxuICAgIGRlYnVnOiAoLi4ucGFyYW1zKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKG5ldyBEYXRlKCksIHBhcmFtcyk7XG4gICAgfSxcbiAgICBub3RpY2U6ICguLi5wYXJhbXMpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2cobmV3IERhdGUoKSwgcGFyYW1zKTtcbiAgICB9LFxuICAgIGluZm86ICguLi5wYXJhbXMpID0+IHtcbiAgICAgICAgY29uc29sZS5pbmZvKG5ldyBEYXRlKCksIHBhcmFtcyk7XG4gICAgfSxcbiAgICB3YXJuaW5nOiAoLi4ucGFyYW1zKSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobmV3IERhdGUoKSwgcGFyYW1zKTtcbiAgICB9LFxuICAgIGVycm9yOiAoLi4ucGFyYW1zKSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobmV3IERhdGUoKSwgcGFyYW1zKTtcbiAgICB9LFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZ2dlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJEZWZhdWx0TG9nZ2VyIiwic2lsbHkiLCJwYXJhbXMiLCJkZWJ1ZyIsImNvbnNvbGUiLCJsb2ciLCJEYXRlIiwibm90aWNlIiwiaW5mbyIsIndhcm5pbmciLCJlcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/logger.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/main-client.js":
/*!***************************************************************************************!*\
  !*** ../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/main-client.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __awaiter = (void 0) && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SpotClient = exports.MainClient = void 0;\nconst requestUtils_1 = __webpack_require__(/*! ./util/requestUtils */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/requestUtils.js\");\nconst BaseRestClient_1 = __importDefault(__webpack_require__(/*! ./util/BaseRestClient */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/BaseRestClient.js\"));\nclass MainClient extends BaseRestClient_1.default {\n    constructor(restClientOptions = {}, requestOptions = {}){\n        super(\"spot1\", restClientOptions, requestOptions);\n        return this;\n    }\n    /**\n     * Abstraction required by each client to aid with time sync / drift handling\n     */ getServerTime(baseUrlKeyOverride) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const baseUrlKey = baseUrlKeyOverride || this.getBaseUrlKey();\n            const endpoint = requestUtils_1.getServerTimeEndpoint(baseUrlKey);\n            const response = yield this.getForBaseUrl(endpoint, baseUrlKey);\n            return response.serverTime;\n        });\n    }\n    /**\n     *\n     * Wallet Endpoints\n     *\n     **/ getSystemStatus() {\n        return this.get(\"sapi/v1/system/status\");\n    }\n    getBalances() {\n        return this.getPrivate(\"sapi/v1/capital/config/getall\");\n    }\n    getDailyAccountSnapshot(params) {\n        return this.getPrivate(\"sapi/v1/accountSnapshot\", params);\n    }\n    disableFastWithdrawSwitch() {\n        return this.postPrivate(\"sapi/v1/account/disableFastWithdrawSwitch\");\n    }\n    enableFastWithdrawSwitch() {\n        return this.postPrivate(\"sapi/v1/account/enableFastWithdrawSwitch\");\n    }\n    withdraw(params) {\n        return this.postPrivate(\"sapi/v1/capital/withdraw/apply\", params);\n    }\n    getDepositHistory(params) {\n        return this.getPrivate(\"sapi/v1/capital/deposit/hisrec\", params);\n    }\n    getWithdrawHistory(params) {\n        return this.getPrivate(\"sapi/v1/capital/withdraw/history\", params);\n    }\n    getDepositAddress(params) {\n        return this.getPrivate(\"sapi/v1/capital/deposit/address\", params);\n    }\n    getAccountStatus() {\n        return this.getPrivate(\"sapi/v1/account/status\");\n    }\n    getDustLog(params) {\n        return this.getPrivate(\"sapi/v1/asset/dribblet\", params);\n    }\n    convertDustToBnb(params) {\n        return this.postPrivate(\"sapi/v1/asset/dust\", params);\n    }\n    getDust() {\n        return this.postPrivate(\"sapi/v1/asset/dust-btc\");\n    }\n    getAssetDividendRecord(params) {\n        return this.getPrivate(\"sapi/v1/asset/assetDividend\", params);\n    }\n    getAssetDetail(params) {\n        return this.getPrivate(\"sapi/v1/asset/assetDetail\", params);\n    }\n    getTradeFee(params) {\n        return this.getPrivate(\"sapi/v1/asset/tradeFee\", params);\n    }\n    submitUniversalTransfer(params) {\n        return this.postPrivate(\"sapi/v1/asset/transfer\", params);\n    }\n    getUniversalTransferHistory(params) {\n        return this.getPrivate(\"sapi/v1/asset/transfer\", params);\n    }\n    getApiTradingStatus() {\n        return this.getPrivate(\"sapi/v1/account/apiTradingStatus\");\n    }\n    getApiKeyPermissions() {\n        return this.getPrivate(\"sapi/v1/account/apiRestrictions\");\n    }\n    acceptQuoteRequest(params) {\n        return this.postPrivate(\"sapi/v1/convert/acceptQuote\", params);\n    }\n    enableConvertSubAccount(params) {\n        return this.postPrivate(\"sapi/v1/broker/subAccount/convert\", params);\n    }\n    convertQuoteRequest(params) {\n        return this.postPrivate(\"sapi/v1/convert/getQuote\", params);\n    }\n    getOrderStatus(params) {\n        return this.getPrivate(\"sapi/v1/convert/orderStatus\", params);\n    }\n    getConvertTradeHistory(params) {\n        return this.getPrivate(\"sapi/v1/convert/tradeFlow\", params);\n    }\n    /**\n     *\n     * Sub-Account Endpoints\n     *\n     **/ createVirtualSubAccount(params) {\n        return this.postPrivate(\"sapi/v1/sub-account/virtualSubAccount\", params);\n    }\n    getSubAccountList(params) {\n        return this.getPrivate(\"sapi/v1/sub-account/list\", params);\n    }\n    getSubAccountSpotAssetTransferHistory(params) {\n        return this.getPrivate(\"sapi/v1/sub-account/sub/transfer/history\", params);\n    }\n    getSubAccountFuturesAssetTransferHistory(params) {\n        return this.getPrivate(\"sapi/v1/sub-account/futures/internalTransfer\", params);\n    }\n    subAccountFuturesAssetTransfer(params) {\n        return this.postPrivate(\"sapi/v1/sub-account/futures/internalTransfer\", params);\n    }\n    getSubAccountAssets(params) {\n        return this.getPrivate(\"sapi/v3/sub-account/assets\", params);\n    }\n    getSubAccountSpotAssetsSummary(params) {\n        return this.getPrivate(\"sapi/v1/sub-account/spotSummary\", params);\n    }\n    getSubAccountDepositAddress(params) {\n        return this.getPrivate(\"sapi/v1/capital/deposit/subAddress\", params);\n    }\n    getSubAccountDepositHistory(params) {\n        return this.getPrivate(\"sapi/v1/capital/deposit/subHisrec\", params);\n    }\n    getSubAccountStatusOnMarginOrFutures(params) {\n        return this.getPrivate(\"sapi/v1/sub-account/status\", params);\n    }\n    subAccountEnableMargin(email) {\n        return this.postPrivate(\"sapi/v1/sub-account/margin/enable\", {\n            email\n        });\n    }\n    getSubAccountDetailOnMarginAccount(email) {\n        return this.getPrivate(\"sapi/v1/sub-account/margin/account\", {\n            email\n        });\n    }\n    getSubAccountsSummaryOfMarginAccount() {\n        return this.getPrivate(\"sapi/v1/sub-account/margin/accountSummary\");\n    }\n    subAccountEnableFutures(email) {\n        return this.postPrivate(\"sapi/v1/sub-account/futures/enable\", {\n            email\n        });\n    }\n    getSubAccountFuturesAccountDetail(email) {\n        return this.getPrivate(\"sapi/v1/sub-account/futures/account\", {\n            email\n        });\n    }\n    getSubAccountFuturesAccountSummary() {\n        return this.getPrivate(\"sapi/v1/sub-account/futures/accountSummary\");\n    }\n    getSubAccountFuturesPositionRisk(email) {\n        return this.getPrivate(\"sapi/v1/sub-account/futures/positionRisk\", {\n            email\n        });\n    }\n    subAccountFuturesTransfer(params) {\n        return this.postPrivate(\"sapi/v1/sub-account/futures/transfer\", params);\n    }\n    subAccountMarginTransfer(params) {\n        return this.postPrivate(\"sapi/v1/sub-account/margin/transfer\", params);\n    }\n    subAccountTransferToSameMaster(params) {\n        return this.postPrivate(\"sapi/v1/sub-account/transfer/subToSub\", params);\n    }\n    subAccountTransferToMaster(params) {\n        return this.postPrivate(\"sapi/v1/sub-account/transfer/subToMaster\", params);\n    }\n    subAccountTransferHistory(params) {\n        return this.getPrivate(\"sapi/v1/sub-account/transfer/subUserHistory\", params);\n    }\n    subAccountUniversalTransfer(params) {\n        return this.postPrivate(\"sapi/v1/sub-account/universalTransfer\", params);\n    }\n    getSubAccountUniversalTransferHistory(params) {\n        return this.getPrivate(\"sapi/v1/sub-account/universalTransfer\", params);\n    }\n    getSubAccountDetailOnFuturesAccountV2(params) {\n        return this.getPrivate(\"sapi/v2/sub-account/futures/account\", params);\n    }\n    getSubAccountSummaryOnFuturesAccountV2(params) {\n        return this.getPrivate(\"sapi/v2/sub-account/futures/accountSummary\", params);\n    }\n    getSubAccountFuturesPositionRiskV2(params) {\n        return this.getPrivate(\"sapi/v2/sub-account/futures/positionRisk\", params);\n    }\n    subAccountEnableLeverageToken(params) {\n        return this.postPrivate(\"sapi/v1/sub-account/blvt/enable\", params);\n    }\n    subAccountEnableOrDisableIPRestriction(params) {\n        return this.postPrivate(\"sapi/v1/sub-account/subAccountApi/ipRestriction\", params);\n    }\n    subAccountAddIPList(params) {\n        return this.postPrivate(\"sapi/v1/sub-account/subAccountApi/ipRestriction/ipList\", params);\n    }\n    getSubAccountIPRestriction(params) {\n        return this.getPrivate(\"sapi/v1/sub-account/subAccountApi/ipRestriction\", params);\n    }\n    subAccountDeleteIPList(params) {\n        return this.deletePrivate(\"sapi/v1/sub-account/subAccountApi/ipRestriction/ipList\", params);\n    }\n    depositAssetsIntoManagedSubAccount(params) {\n        return this.postPrivate(\"sapi/v1/managed-subaccount/deposit\", params);\n    }\n    getManagedSubAccountAssetDetails(email) {\n        return this.getPrivate(\"sapi/v1/managed-subaccount/asset\", {\n            email\n        });\n    }\n    withdrawAssetsFromManagedSubAccount(params) {\n        return this.postPrivate(\"sapi/v1/managed-subaccount/withdraw\", params);\n    }\n    /**\n     * Broker Endpoints\n     */ getBrokerIfNewSpotUser() {\n        return this.getPrivate(\"sapi/v1/apiReferral/ifNewUser\");\n    }\n    getBrokerSubAccountDepositHistory(params) {\n        return this.getPrivate(\"sapi/v1/broker/subAccount/depositHist\", params);\n    }\n    getBrokerUserCustomisedId(market) {\n        const prefix = market === \"spot\" ? \"sapi\" : \"fapi\";\n        return this.getPrivate(prefix + \"/v1/apiReferral/userCustomization\");\n    }\n    createBrokerSubAccount(params) {\n        return this.postPrivate(\"sapi/v1/broker/subAccount\", params);\n    }\n    getBrokerSubAccountHistory(params) {\n        return this.getPrivate(\"sapi/v1/broker/transfer\", params);\n    }\n    getBrokerSubAccount(params) {\n        return this.getPrivate(\"sapi/v1/broker/subAccount\", params);\n    }\n    getApiKeyBrokerSubAccount(params) {\n        return this.getPrivate(\"sapi/v1/broker/subAccountApi\", params);\n    }\n    createApiKeyBrokerSubAccount(params) {\n        return this.postPrivate(\"sapi/v1/broker/subAccountApi\", params);\n    }\n    deleteApiKeyBrokerSubAccount(params) {\n        return this.deletePrivate(\"sapi/v1/broker/subAccountApi\", params);\n    }\n    changePermissionApiKeyBrokerSubAccount(params) {\n        return this.postPrivate(\"sapi/v1/broker/subAccountApi/permission\", params);\n    }\n    changeComissionBrokerSubAccount(params) {\n        return this.postPrivate(\"sapi/v1/broker/subAccountApi/permission\", params);\n    }\n    enableUniversalTransferApiKeyBrokerSubAccount(params) {\n        return this.postPrivate(\"sapi/v1/broker/subAccountApi/permission/universalTransfer\", params);\n    }\n    enableMarginBrokerSubAccount(params) {\n        return this.postPrivate(\"sapi/v1/broker/subAccount/futures\", params);\n    }\n    enableFuturesBrokerSubAccount(params) {\n        return this.postPrivate(\"sapi/v1/broker/subAccount\", params);\n    }\n    enableMarginApiKeyBrokerSubAccount(params) {\n        return this.postPrivate(\"sapi/v1/broker/subAccount/margin\", params);\n    }\n    transferBrokerSubAccount(params) {\n        return this.postPrivate(\"sapi/v1/broker/transfer\", params);\n    }\n    universalTransferBroker(params) {\n        return this.postPrivate(\"sapi/v1/broker/universalTransfer\", params);\n    }\n    getUniversalTransferBroker(params) {\n        return this.getPrivate(\"sapi/v1/broker/universalTransfer\", params);\n    }\n    getBrokerInfo() {\n        return this.getPrivate(\"sapi/v1/broker/info\");\n    }\n    // USD & Coin-M can be found under API getIncome() (find \"API rebate\" in results)\n    getBrokerSpotRebateHistory(days, customerId) {\n        if (days === 7) {\n            return this.getPrivate(\"sapi/v1/apiReferral/rebate/recentRecord\", {\n                customerId\n            });\n        }\n        if (days === 30) {\n            return this.getPrivate(\"sapi/v1/apiReferral/rebate/historicalRecord\", {\n                customerId\n            });\n        }\n    }\n    /**\n     *\n     * Market Data Endpoints\n     *\n     **/ testConnectivity() {\n        return this.get(\"api/v3/ping\");\n    }\n    getExchangeInfo(params) {\n        const symbols = (params === null || params === void 0 ? void 0 : params.symbols) && JSON.stringify(params.symbols);\n        const symbol = params === null || params === void 0 ? void 0 : params.symbol;\n        let urlSuffix = \"\";\n        if (symbol) {\n            urlSuffix += \"?symbol=\" + symbol;\n        } else if (symbols) {\n            urlSuffix += \"?symbols=\" + symbols;\n        }\n        return this.get(\"api/v3/exchangeInfo\" + urlSuffix);\n    }\n    getOrderBook(params) {\n        return this.get(\"api/v3/depth\", params);\n    }\n    getRecentTrades(params) {\n        return this.get(\"api/v3/trades\", params);\n    }\n    getHistoricalTrades(params) {\n        return this.get(\"api/v3/historicalTrades\", params);\n    }\n    getAggregateTrades(params) {\n        return this.get(\"api/v3/aggTrades\", params);\n    }\n    getKlines(params) {\n        return this.get(\"api/v3/klines\", params);\n    }\n    getAvgPrice(params) {\n        return this.get(\"api/v3/avgPrice\", params);\n    }\n    get24hrChangeStatististics(params) {\n        if (params && typeof params[\"symbol\"] === \"string\") {\n            return this.get(\"api/v3/ticker/24hr\", params);\n        }\n        if (params && params[\"symbols\"] && Array.isArray(params[\"symbols\"])) {\n            const symbols = params.symbols;\n            const symbolsQueryParam = JSON.stringify(symbols);\n            return this.get(\"api/v3/ticker/24hr?symbols=\" + symbolsQueryParam);\n        }\n        return this.get(\"api/v3/ticker/24hr\");\n    }\n    getSymbolPriceTicker(params) {\n        return this.get(\"api/v3/ticker/price\", params);\n    }\n    getSymbolOrderBookTicker(params) {\n        return this.get(\"api/v3/ticker/bookTicker\", params);\n    }\n    /**\n     *\n     * Spot Account/Trade Endpoints\n     *\n     **/ testNewOrder(params) {\n        this.validateOrderId(params, \"newClientOrderId\");\n        return this.postPrivate(\"api/v3/order/test\", params);\n    }\n    submitNewOrder(params) {\n        this.validateOrderId(params, \"newClientOrderId\");\n        return this.postPrivate(\"api/v3/order\", params);\n    }\n    cancelOrder(params) {\n        return this.deletePrivate(\"api/v3/order\", params);\n    }\n    cancelAllSymbolOrders(params) {\n        return this.deletePrivate(\"api/v3/openOrders\", params);\n    }\n    getOrder(params) {\n        return this.getPrivate(\"api/v3/order\", params);\n    }\n    getOpenOrders(params) {\n        return this.getPrivate(\"api/v3/openOrders\", params);\n    }\n    getAllOrders(params) {\n        return this.getPrivate(\"api/v3/allOrders\", params);\n    }\n    submitNewOCO(params) {\n        this.validateOrderId(params, \"listClientOrderId\");\n        this.validateOrderId(params, \"limitClientOrderId\");\n        this.validateOrderId(params, \"stopClientOrderId\");\n        return this.postPrivate(\"api/v3/order/oco\", params);\n    }\n    cancelOCO(params) {\n        this.validateOrderId(params, \"newClientOrderId\");\n        return this.deletePrivate(\"api/v3/orderList\", params);\n    }\n    getOCO(params) {\n        return this.getPrivate(\"api/v3/orderList\", params);\n    }\n    getAllOCO(params) {\n        return this.getPrivate(\"api/v3/allOrderList\", params);\n    }\n    getAllOpenOCO() {\n        return this.getPrivate(\"api/v3/openOrderList\");\n    }\n    getAccountInformation() {\n        return this.getPrivate(\"api/v3/account\");\n    }\n    getAccountTradeList(params) {\n        return this.getPrivate(\"api/v3/myTrades\", params);\n    }\n    /**\n     *\n     * Margin Account/Trade Endpoints\n     *\n     **/ crossMarginAccountTransfer(params) {\n        return this.postPrivate(\"sapi/v1/margin/transfer\", params);\n    }\n    marginAccountBorrow(params) {\n        return this.postPrivate(\"sapi/v1/margin/loan\", params);\n    }\n    marginAccountRepay(params) {\n        return this.postPrivate(\"sapi/v1/margin/repay\", params);\n    }\n    queryMarginAsset(params) {\n        return this.get(\"sapi/v1/margin/asset\", params);\n    }\n    queryCrossMarginPair(params) {\n        return this.get(\"sapi/v1/margin/pair\", params);\n    }\n    getAllMarginAssets() {\n        return this.get(\"sapi/v1/margin/allAssets\");\n    }\n    getAllCrossMarginPairs() {\n        return this.get(\"sapi/v1/margin/allPairs\");\n    }\n    queryMarginPriceIndex(params) {\n        return this.get(\"sapi/v1/margin/priceIndex\", params);\n    }\n    marginAccountNewOrder(params) {\n        this.validateOrderId(params, \"newClientOrderId\");\n        return this.postPrivate(\"sapi/v1/margin/order\", params);\n    }\n    marginAccountCancelOrder(params) {\n        return this.deletePrivate(\"sapi/v1/margin/order\", params);\n    }\n    marginAccountCancelOpenOrders(params) {\n        return this.deletePrivate(\"sapi/v1/margin/openOrders\", params);\n    }\n    // TODO - https://binance-docs.github.io/apidocs/spot/en/#get-cross-margin-transfer-history-user_data\n    queryLoanRecord(params) {\n        return this.getPrivate(\"sapi/v1/margin/loan\", params);\n    }\n    queryRepayRecord(params) {\n        return this.getPrivate(\"sapi/v1/margin/repay\", params);\n    }\n    // TODO - https://binance-docs.github.io/apidocs/spot/en/#get-interest-history-user_data\n    // TODO - https://binance-docs.github.io/apidocs/spot/en/#get-force-liquidation-record-user_data\n    queryCrossMarginAccountDetails() {\n        return this.getPrivate(\"sapi/v1/margin/account\");\n    }\n    queryMarginAccountOrder(params) {\n        return this.getPrivate(\"sapi/v1/margin/order\", params);\n    }\n    queryMarginAccountOpenOrders(params) {\n        return this.getPrivate(\"sapi/v1/margin/openOrders\", params);\n    }\n    queryMarginAccountAllOrders(params) {\n        return this.getPrivate(\"sapi/v1/margin/allOrders\", params);\n    }\n    marginAccountNewOCO(params) {\n        this.validateOrderId(params, \"listClientOrderId\");\n        this.validateOrderId(params, \"limitClientOrderId\");\n        this.validateOrderId(params, \"stopClientOrderId\");\n        return this.postPrivate(\"sapi/v1/margin/order/oco\", params);\n    }\n    marginAccountCancelOCO(params) {\n        this.validateOrderId(params, \"newClientOrderId\");\n        return this.deletePrivate(\"sapi/v1/margin/orderList\", params);\n    }\n    queryMarginAccountOCO(params) {\n        return this.getPrivate(\"sapi/v1/margin/orderList\", params);\n    }\n    // TODO - https://binance-docs.github.io/apidocs/spot/en/#query-margin-account-39-s-all-oco-user_data\n    // TODO - https://binance-docs.github.io/apidocs/spot/en/#query-margin-account-39-s-open-oco-user_data\n    // TODO - https://binance-docs.github.io/apidocs/spot/en/#query-margin-account-39-s-trade-list-user_data\n    queryMaxBorrow(params) {\n        return this.getPrivate(\"sapi/v1/margin/maxBorrowable\", params);\n    }\n    queryMaxTransferOutAmount(params) {\n        return this.getPrivate(\"sapi/v1/margin/maxTransferable\", params);\n    }\n    isolatedMarginAccountTransfer(params) {\n        return this.postPrivate(\"sapi/v1/margin/isolated/transfer\", params);\n    }\n    // TODO - https://binance-docs.github.io/apidocs/spot/en/#get-isolated-margin-transfer-history-user_data\n    getIsolatedMarginAccountInfo(params) {\n        return this.getPrivate(\"sapi/v1/margin/isolated/account\", {\n            params\n        });\n    }\n    // TODO - https://binance-docs.github.io/apidocs/spot/en/#disable-isolated-margin-account-trade\n    // TODO - https://binance-docs.github.io/apidocs/spot/en/#enable-isolated-margin-account-trade\n    // TODO - https://binance-docs.github.io/apidocs/spot/en/#query-enabled-isolated-margin-account-limit-user_data\n    // TODO - https://binance-docs.github.io/apidocs/spot/en/#query-isolated-margin-symbol-user_data\n    // TODO - https://binance-docs.github.io/apidocs/spot/en/#get-all-isolated-margin-symbol-user_data\n    // TODO - https://binance-docs.github.io/apidocs/spot/en/#toggle-bnb-burn-on-spot-trade-and-margin-interest-user_data\n    // TODO - https://binance-docs.github.io/apidocs/spot/en/#get-bnb-burn-status-user_data\n    // TODO - https://binance-docs.github.io/apidocs/spot/en/#query-margin-interest-rate-history-user_data\n    // TODO - https://binance-docs.github.io/apidocs/spot/en/#query-cross-margin-fee-data-user_data\n    // TODO - https://binance-docs.github.io/apidocs/spot/en/#query-isolated-margin-fee-data-user_data\n    // TODO - https://binance-docs.github.io/apidocs/spot/en/#query-isolated-margin-tier-data-user_data\n    /**\n     *\n     * User Data Stream Endpoints\n     *\n     **/ // spot\n    getSpotUserDataListenKey() {\n        return this.post(\"api/v3/userDataStream\");\n    }\n    keepAliveSpotUserDataListenKey(listenKey) {\n        return this.put(`api/v3/userDataStream?listenKey=${listenKey}`);\n    }\n    closeSpotUserDataListenKey(listenKey) {\n        return this.delete(`api/v3/userDataStream?listenKey=${listenKey}`);\n    }\n    // margin\n    getMarginUserDataListenKey() {\n        return this.post(\"sapi/v1/userDataStream\");\n    }\n    keepAliveMarginUserDataListenKey(listenKey) {\n        return this.put(`sapi/v1/userDataStream?listenKey=${listenKey}`);\n    }\n    closeMarginUserDataListenKey(listenKey) {\n        return this.delete(`sapi/v1/userDataStream?listenKey=${listenKey}`);\n    }\n    // isolated margin\n    getIsolatedMarginUserDataListenKey(params) {\n        return this.post(`sapi/v1/userDataStream/isolated?${requestUtils_1.serialiseParams(params)}`);\n    }\n    keepAliveIsolatedMarginUserDataListenKey(params) {\n        return this.put(`sapi/v1/userDataStream/isolated?${requestUtils_1.serialiseParams(params)}`);\n    }\n    closeIsolatedMarginUserDataListenKey(params) {\n        return this.delete(`sapi/v1/userDataStream/isolated?${requestUtils_1.serialiseParams(params)}`);\n    }\n    /**\n     *\n     * Staking Endpoints\n     *\n     **/ //TODO: https://binance-docs.github.io/apidocs/spot/en/#purchase-staking-product-user_data\n    //TODO: https://binance-docs.github.io/apidocs/spot/en/#redeem-staking-product-user_data\n    //TODO: https://binance-docs.github.io/apidocs/spot/en/#set-auto-staking-user_data\n    getStakingProducts(params) {\n        return this.getPrivate(`sapi/v1/staking/productList`, params);\n    }\n    getStakingProductPosition(params) {\n        return this.getPrivate(\"sapi/v1/staking/position\", params);\n    }\n    getStakingHistory(params) {\n        return this.getPrivate(\"sapi/v1/staking/stakingRecord\", params);\n    }\n    getPersonalLeftQuotaOfStakingProduct(params) {\n        return this.getPrivate(\"sapi/v1/staking/personalLeftQuota\", params);\n    }\n    /**\n     *\n     * Savings Endpoints\n     *\n     **/ getFlexibleSavingProducts(params) {\n        return this.getPrivate(`sapi/v1/lending/daily/product/list`, params);\n    }\n    purchaseFlexibleProduct(params) {\n        return this.postPrivate(`sapi/v1/lending/daily/purchase`, params);\n    }\n    redeemFlexibleProduct(params) {\n        return this.postPrivate(`sapi/v1/lending/daily/redeem`, params);\n    }\n    getFlexibleProductPosition(params) {\n        return this.getPrivate(`sapi/v1/lending/daily/token/position`, params);\n    }\n    getLeftDailyPurchaseQuotaFlexibleProduct(params) {\n        return this.getPrivate(`sapi/v1/lending/daily/userLeftQuota`, params);\n    }\n    getLeftDailyRedemptionQuotaFlexibleProduct(params) {\n        return this.getPrivate(`sapi/v1/lending/daily/userRedemptionQuota`, params);\n    }\n    purchaseFixedAndActivityProject(params) {\n        return this.postPrivate(`sapi/v1/lending/customizedFixed/purchase`, params);\n    }\n    getFixedAndActivityProjects(params) {\n        return this.getPrivate(`sapi/v1/lending/project/list`, params);\n    }\n    getFixedAndActivityProductPosition(params) {\n        return this.getPrivate(`sapi/v1/lending/project/position/list`, params);\n    }\n    getLendingAccount() {\n        return this.getPrivate(`sapi/v1/lending/union/account`);\n    }\n    getPurchaseRecord(params) {\n        return this.getPrivate(`sapi/v1/lending/union/purchaseRecord`, params);\n    }\n    getRedemptionRecord(params) {\n        return this.getPrivate(`sapi/v1/lending/union/redemptionRecord`, params);\n    }\n    getInterestHistory(params) {\n        return this.getPrivate(`sapi/v1/lending/union/interestHistory`, params);\n    }\n    changeFixedAndActivityPositionToDailyPosition(params) {\n        return this.postPrivate(`sapi/v1/lending/positionChanged`, params);\n    }\n    /**\n     *\n     * Mining Endpoints\n     *\n     **/ //TODO: https://binance-docs.github.io/apidocs/spot/en/#mining-endpoints\n    /**\n     *\n     * Futures Management Endpoints:\n     * https://binance-docs.github.io/apidocs/spot/en/#futures\n     *\n     * Note: to trade futures use the usdm-client or coinm-client.\n     * MainClient only has the futures endpoints listed in the \"spot\" docs category, primarily used for transfers.\n     *\n     **/ /**\n     * Execute transfer between spot account and futures account.\n     *\n     * Type:\n     * - 1: transfer from spot account to USDT-Ⓜ futures account.\n     * - 2: transfer from USDT-Ⓜ futures account to spot account.\n     * - 3: transfer from spot account to COIN-Ⓜ futures account.\n     * - 4: transfer from COIN-Ⓜ futures account to spot account.\n     */ submitNewFutureAccountTransfer(params) {\n        return this.postPrivate(`sapi/v1/futures/transfer`, params);\n    }\n    getFutureAccountTransferHistory(params) {\n        return this.getPrivate(`sapi/v1/futures/transfer`, params);\n    }\n    getCrossCollateralBorrowHistory(params) {\n        return this.getPrivate(`sapi/v1/futures/loan/borrow/history`, params);\n    }\n    getCrossCollateralRepaymentHistory(params) {\n        return this.getPrivate(`sapi/v1/futures/loan/repay/history`, params);\n    }\n    getCrossCollateralWalletV2() {\n        return this.getPrivate(`sapi/v2/futures/loan/wallet`);\n    }\n    getAdjustCrossCollateralLTVHistory(params) {\n        return this.getPrivate(`sapi/v1/futures/loan/adjustCollateral/history`, params);\n    }\n    getCrossCollateralLiquidationHistory(params) {\n        return this.getPrivate(`sapi/v1/futures/loan/liquidationHistory`, params);\n    }\n    getCrossCollateralInterestHistory(params) {\n        return this.getPrivate(`sapi/v1/futures/loan/interestHistory`, params);\n    }\n    //TODO: https://binance-docs.github.io/apidocs/spot/en/#futures\n    /**\n     *\n     * BLVT Endpoints\n     *\n     **/ //TODO: https://binance-docs.github.io/apidocs/spot/en/#blvt-endpoints\n    /**\n     *\n     * BSwap Endpoints\n     *\n     **/ getBSwapLiquidity(params) {\n        return this.getPrivate(\"sapi/v1/bswap/liquidity\");\n    }\n    addBSwapLiquidity(params) {\n        return this.postPrivate(\"sapi/v1/bswap/liquidityAdd\");\n    }\n    removeBSwapLiquidity(params) {\n        return this.postPrivate(\"sapi/v1/bswap/liquidityRemove\");\n    }\n    getBSwapOperations(params) {\n        return this.getPrivate(\"sapi/v1/bswap/liquidityOps\");\n    }\n    //TODO: add missing bswap-endpoints https://binance-docs.github.io/apidocs/spot/en/#bswap-endpoints\n    /**\n     * Validate syntax meets requirements set by binance. Log warning if not.\n     */ validateOrderId(params, orderIdProperty) {\n        const apiCategory = \"spot\";\n        if (!params[orderIdProperty]) {\n            params[orderIdProperty] = requestUtils_1.generateNewOrderId(apiCategory);\n            return;\n        }\n        const expectedOrderIdPrefix = `x-${requestUtils_1.getOrderIdPrefix(apiCategory)}`;\n        if (!params[orderIdProperty].startsWith(expectedOrderIdPrefix)) {\n            requestUtils_1.logInvalidOrderId(orderIdProperty, expectedOrderIdPrefix, params);\n        }\n    }\n}\nexports.MainClient = MainClient;\n/**\n * @deprecated use MainClient instead of SpotClient (it is the same)\n */ exports.SpotClient = MainClient; //# sourceMappingURL=main-client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/main-client.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/types/coin.js":
/*!**************************************************************************************!*\
  !*** ../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/types/coin.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n})); //# sourceMappingURL=coin.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JpbmFuY2VAMi44LjE1L25vZGVfbW9kdWxlcy9iaW5hbmNlL2xpYi90eXBlcy9jb2luLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDLEVBQzdELGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vYmluYW5jZUAyLjguMTUvbm9kZV9tb2R1bGVzL2JpbmFuY2UvbGliL3R5cGVzL2NvaW4uanM/ZGI0ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvaW4uanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/types/coin.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/types/futures.js":
/*!*****************************************************************************************!*\
  !*** ../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/types/futures.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.EnumPositionMarginChangeType = exports.EnumMultiAssetMode = exports.EnumDualSideMode = void 0;\nvar EnumDualSideMode;\n(function(EnumDualSideMode) {\n    EnumDualSideMode[\"HedgeMode\"] = \"true\";\n    EnumDualSideMode[\"OneWayMode\"] = \"false\";\n})(EnumDualSideMode = exports.EnumDualSideMode || (exports.EnumDualSideMode = {}));\nvar EnumMultiAssetMode;\n(function(EnumMultiAssetMode) {\n    EnumMultiAssetMode[\"MultiAssetsMode\"] = \"true\";\n    EnumMultiAssetMode[\"SingleAssetsMode\"] = \"false\";\n})(EnumMultiAssetMode = exports.EnumMultiAssetMode || (exports.EnumMultiAssetMode = {}));\nvar EnumPositionMarginChangeType;\n(function(EnumPositionMarginChangeType) {\n    EnumPositionMarginChangeType[EnumPositionMarginChangeType[\"AddPositionMargin\"] = 1] = \"AddPositionMargin\";\n    EnumPositionMarginChangeType[EnumPositionMarginChangeType[\"ReducePositionMargin\"] = 0] = \"ReducePositionMargin\";\n})(EnumPositionMarginChangeType = exports.EnumPositionMarginChangeType || (exports.EnumPositionMarginChangeType = {})); //# sourceMappingURL=futures.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JpbmFuY2VAMi44LjE1L25vZGVfbW9kdWxlcy9iaW5hbmNlL2xpYi90eXBlcy9mdXR1cmVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxvQ0FBb0MsR0FBR0EsMEJBQTBCLEdBQUdBLHdCQUF3QixHQUFHLEtBQUs7QUFDcEcsSUFBSUk7QUFDSCxVQUFVQSxnQkFBZ0I7SUFDdkJBLGdCQUFnQixDQUFDLFlBQVksR0FBRztJQUNoQ0EsZ0JBQWdCLENBQUMsYUFBYSxHQUFHO0FBQ3JDLEdBQUdBLG1CQUFtQkosUUFBUUksZ0JBQWdCLElBQUtKLENBQUFBLHdCQUF3QixHQUFHLENBQUM7QUFDL0UsSUFBSUc7QUFDSCxVQUFVQSxrQkFBa0I7SUFDekJBLGtCQUFrQixDQUFDLGtCQUFrQixHQUFHO0lBQ3hDQSxrQkFBa0IsQ0FBQyxtQkFBbUIsR0FBRztBQUM3QyxHQUFHQSxxQkFBcUJILFFBQVFHLGtCQUFrQixJQUFLSCxDQUFBQSwwQkFBMEIsR0FBRyxDQUFDO0FBQ3JGLElBQUlFO0FBQ0gsVUFBVUEsNEJBQTRCO0lBQ25DQSw0QkFBNEIsQ0FBQ0EsNEJBQTRCLENBQUMsb0JBQW9CLEdBQUcsRUFBRSxHQUFHO0lBQ3RGQSw0QkFBNEIsQ0FBQ0EsNEJBQTRCLENBQUMsdUJBQXVCLEdBQUcsRUFBRSxHQUFHO0FBQzdGLEdBQUdBLCtCQUErQkYsUUFBUUUsNEJBQTRCLElBQUtGLENBQUFBLG9DQUFvQyxHQUFHLENBQUMsS0FDbkgsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9iaW5hbmNlQDIuOC4xNS9ub2RlX21vZHVsZXMvYmluYW5jZS9saWIvdHlwZXMvZnV0dXJlcy5qcz84OTIyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FbnVtUG9zaXRpb25NYXJnaW5DaGFuZ2VUeXBlID0gZXhwb3J0cy5FbnVtTXVsdGlBc3NldE1vZGUgPSBleHBvcnRzLkVudW1EdWFsU2lkZU1vZGUgPSB2b2lkIDA7XG52YXIgRW51bUR1YWxTaWRlTW9kZTtcbihmdW5jdGlvbiAoRW51bUR1YWxTaWRlTW9kZSkge1xuICAgIEVudW1EdWFsU2lkZU1vZGVbXCJIZWRnZU1vZGVcIl0gPSBcInRydWVcIjtcbiAgICBFbnVtRHVhbFNpZGVNb2RlW1wiT25lV2F5TW9kZVwiXSA9IFwiZmFsc2VcIjtcbn0pKEVudW1EdWFsU2lkZU1vZGUgPSBleHBvcnRzLkVudW1EdWFsU2lkZU1vZGUgfHwgKGV4cG9ydHMuRW51bUR1YWxTaWRlTW9kZSA9IHt9KSk7XG52YXIgRW51bU11bHRpQXNzZXRNb2RlO1xuKGZ1bmN0aW9uIChFbnVtTXVsdGlBc3NldE1vZGUpIHtcbiAgICBFbnVtTXVsdGlBc3NldE1vZGVbXCJNdWx0aUFzc2V0c01vZGVcIl0gPSBcInRydWVcIjtcbiAgICBFbnVtTXVsdGlBc3NldE1vZGVbXCJTaW5nbGVBc3NldHNNb2RlXCJdID0gXCJmYWxzZVwiO1xufSkoRW51bU11bHRpQXNzZXRNb2RlID0gZXhwb3J0cy5FbnVtTXVsdGlBc3NldE1vZGUgfHwgKGV4cG9ydHMuRW51bU11bHRpQXNzZXRNb2RlID0ge30pKTtcbnZhciBFbnVtUG9zaXRpb25NYXJnaW5DaGFuZ2VUeXBlO1xuKGZ1bmN0aW9uIChFbnVtUG9zaXRpb25NYXJnaW5DaGFuZ2VUeXBlKSB7XG4gICAgRW51bVBvc2l0aW9uTWFyZ2luQ2hhbmdlVHlwZVtFbnVtUG9zaXRpb25NYXJnaW5DaGFuZ2VUeXBlW1wiQWRkUG9zaXRpb25NYXJnaW5cIl0gPSAxXSA9IFwiQWRkUG9zaXRpb25NYXJnaW5cIjtcbiAgICBFbnVtUG9zaXRpb25NYXJnaW5DaGFuZ2VUeXBlW0VudW1Qb3NpdGlvbk1hcmdpbkNoYW5nZVR5cGVbXCJSZWR1Y2VQb3NpdGlvbk1hcmdpblwiXSA9IDBdID0gXCJSZWR1Y2VQb3NpdGlvbk1hcmdpblwiO1xufSkoRW51bVBvc2l0aW9uTWFyZ2luQ2hhbmdlVHlwZSA9IGV4cG9ydHMuRW51bVBvc2l0aW9uTWFyZ2luQ2hhbmdlVHlwZSB8fCAoZXhwb3J0cy5FbnVtUG9zaXRpb25NYXJnaW5DaGFuZ2VUeXBlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZ1dHVyZXMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiRW51bVBvc2l0aW9uTWFyZ2luQ2hhbmdlVHlwZSIsIkVudW1NdWx0aUFzc2V0TW9kZSIsIkVudW1EdWFsU2lkZU1vZGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/types/futures.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/types/shared.js":
/*!****************************************************************************************!*\
  !*** ../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/types/shared.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n})); //# sourceMappingURL=shared.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JpbmFuY2VAMi44LjE1L25vZGVfbW9kdWxlcy9iaW5hbmNlL2xpYi90eXBlcy9zaGFyZWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUMsRUFDN0Qsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9iaW5hbmNlQDIuOC4xNS9ub2RlX21vZHVsZXMvYmluYW5jZS9saWIvdHlwZXMvc2hhcmVkLmpzPzM0NDMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGFyZWQuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/types/shared.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/types/spot.js":
/*!**************************************************************************************!*\
  !*** ../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/types/spot.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.EnumUniversalTransferType = exports.EnumWithdrawTransferType = exports.EnumWithdrawStatus = exports.EnumDepositStatus = void 0;\nvar EnumDepositStatus;\n(function(EnumDepositStatus) {\n    EnumDepositStatus[EnumDepositStatus[\"Pending\"] = 0] = \"Pending\";\n    EnumDepositStatus[EnumDepositStatus[\"CreditedButCannotWithdraw\"] = 6] = \"CreditedButCannotWithdraw\";\n    EnumDepositStatus[EnumDepositStatus[\"Success\"] = 1] = \"Success\";\n})(EnumDepositStatus = exports.EnumDepositStatus || (exports.EnumDepositStatus = {}));\nvar EnumWithdrawStatus;\n(function(EnumWithdrawStatus) {\n    EnumWithdrawStatus[EnumWithdrawStatus[\"EmailSent\"] = 0] = \"EmailSent\";\n    EnumWithdrawStatus[EnumWithdrawStatus[\"Cancelled\"] = 1] = \"Cancelled\";\n    EnumWithdrawStatus[EnumWithdrawStatus[\"AwaitingApproval\"] = 2] = \"AwaitingApproval\";\n    EnumWithdrawStatus[EnumWithdrawStatus[\"Rejected\"] = 3] = \"Rejected\";\n    EnumWithdrawStatus[EnumWithdrawStatus[\"Processing\"] = 4] = \"Processing\";\n    EnumWithdrawStatus[EnumWithdrawStatus[\"Failure\"] = 5] = \"Failure\";\n    EnumWithdrawStatus[EnumWithdrawStatus[\"Completed\"] = 6] = \"Completed\";\n})(EnumWithdrawStatus = exports.EnumWithdrawStatus || (exports.EnumWithdrawStatus = {}));\nvar EnumWithdrawTransferType;\n(function(EnumWithdrawTransferType) {\n    EnumWithdrawTransferType[EnumWithdrawTransferType[\"External\"] = 0] = \"External\";\n    EnumWithdrawTransferType[EnumWithdrawTransferType[\"Interal\"] = 1] = \"Interal\";\n})(EnumWithdrawTransferType = exports.EnumWithdrawTransferType || (exports.EnumWithdrawTransferType = {}));\nvar EnumUniversalTransferType;\n(function(EnumUniversalTransferType) {\n    EnumUniversalTransferType[\"SpotToUSDM\"] = \"MAIN_UMFUTURE\";\n    EnumUniversalTransferType[\"SpotToCOINM\"] = \"MAIN_CMFUTURE\";\n    EnumUniversalTransferType[\"SpotToMargin\"] = \"MAIN_MARGIN\";\n    EnumUniversalTransferType[\"SpotToFunding\"] = \"MAIN_FUNDING\";\n    EnumUniversalTransferType[\"SpotToOptions\"] = \"MAIN_OPTION\";\n    EnumUniversalTransferType[\"FundingToSpot\"] = \"FUNDING_MAIN\";\n    EnumUniversalTransferType[\"FundingToUSDM\"] = \"FUNDING_UMFUTURE\";\n    EnumUniversalTransferType[\"FundingToCOINM\"] = \"FUNDING_CMFUTURE\";\n    EnumUniversalTransferType[\"FundingToMargin\"] = \"FUNDING_MARGIN\";\n    EnumUniversalTransferType[\"FundingToOptions\"] = \"FUNDING_OPTION\";\n    EnumUniversalTransferType[\"USDMToSpot\"] = \"UMFUTURE_MAIN\";\n    EnumUniversalTransferType[\"USDMToFunding\"] = \"UMFUTURE_FUNDING\";\n    EnumUniversalTransferType[\"USDMToMargin\"] = \"UMFUTURE_MARGIN\";\n    EnumUniversalTransferType[\"USDMToOptions\"] = \"UMFUTURE_OPTION\";\n    EnumUniversalTransferType[\"COINMToSpot\"] = \"CMFUTURE_MAIN\";\n    EnumUniversalTransferType[\"COINMToFunding\"] = \"CMFUTURE_FUNDING\";\n    EnumUniversalTransferType[\"COINMToMargin\"] = \"CMFUTURE_MARGIN\";\n    EnumUniversalTransferType[\"MarginToSpot\"] = \"MARGIN_MAIN\";\n    EnumUniversalTransferType[\"MarginToUSDM\"] = \"MARGIN_UMFUTURE\";\n    EnumUniversalTransferType[\"MarginToCOINM\"] = \"MARGIN_CMFUTURE\";\n    EnumUniversalTransferType[\"MarginToIsolatedMargin\"] = \"MARGIN_ISOLATEDMARGIN \";\n    EnumUniversalTransferType[\"MarginToFunding\"] = \"MARGIN_FUNDING\";\n    EnumUniversalTransferType[\"MarginToOptions\"] = \"MARGIN_OPTION\";\n    EnumUniversalTransferType[\"IsolatedMarginToMargin\"] = \"ISOLATEDMARGIN_MARGIN\";\n    EnumUniversalTransferType[\"IsolatedMarginToIsolatedMargin\"] = \"ISOLATEDMARGIN_ISOLATEDMARGIN\";\n    EnumUniversalTransferType[\"OptionsToSpot\"] = \"OPTION_MAIN\";\n    EnumUniversalTransferType[\"OptionsToUSDM\"] = \"OPTION_UMFUTURE\";\n    EnumUniversalTransferType[\"OptionsToFunding\"] = \"OPTION_FUNDING\";\n    EnumUniversalTransferType[\"OptionsToMargin\"] = \"OPTION_MARGIN\";\n})(EnumUniversalTransferType = exports.EnumUniversalTransferType || (exports.EnumUniversalTransferType = {})); //# sourceMappingURL=spot.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/types/spot.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/types/websockets.js":
/*!********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/types/websockets.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n})); //# sourceMappingURL=websockets.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JpbmFuY2VAMi44LjE1L25vZGVfbW9kdWxlcy9iaW5hbmNlL2xpYi90eXBlcy93ZWJzb2NrZXRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDLEVBQzdELHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vYmluYW5jZUAyLjguMTUvbm9kZV9tb2R1bGVzL2JpbmFuY2UvbGliL3R5cGVzL3dlYnNvY2tldHMuanM/YTFkYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdlYnNvY2tldHMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/types/websockets.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/usdm-client.js":
/*!***************************************************************************************!*\
  !*** ../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/usdm-client.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __awaiter = (void 0) && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.USDMClient = void 0;\nconst requestUtils_1 = __webpack_require__(/*! ./util/requestUtils */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/requestUtils.js\");\nconst BaseRestClient_1 = __importDefault(__webpack_require__(/*! ./util/BaseRestClient */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/BaseRestClient.js\"));\nclass USDMClient extends BaseRestClient_1.default {\n    constructor(restClientOptions = {}, requestOptions = {}, useTestnet){\n        const clientId = useTestnet ? \"usdmtest\" : \"usdm\";\n        super(clientId, restClientOptions, requestOptions);\n        this.clientId = clientId;\n        return this;\n    }\n    /**\n     * Abstraction required by each client to aid with time sync / drift handling\n     */ getServerTime() {\n        return __awaiter(this, void 0, void 0, function*() {\n            return this.get(requestUtils_1.getServerTimeEndpoint(this.clientId)).then((response)=>response.serverTime);\n        });\n    }\n    /**\n     *\n     * Market Data Endpoints\n     *\n     **/ testConnectivity() {\n        return this.get(\"fapi/v1/ping\");\n    }\n    getExchangeInfo() {\n        return this.get(\"fapi/v1/exchangeInfo\");\n    }\n    getOrderBook(params) {\n        return this.get(\"fapi/v1/depth\", params);\n    }\n    getRecentTrades(params) {\n        return this.get(\"fapi/v1/trades\", params);\n    }\n    getHistoricalTrades(params) {\n        return this.get(\"fapi/v1/historicalTrades\", params);\n    }\n    getAggregateTrades(params) {\n        return this.get(\"fapi/v1/aggTrades\", params);\n    }\n    /**\n     * Index Price and Mark Price\n     */ getMarkPrice(params) {\n        return this.get(\"fapi/v1/premiumIndex\", params);\n    }\n    getFundingRateHistory(params) {\n        return this.get(\"fapi/v1/fundingRate\", params);\n    }\n    getKlines(params) {\n        return this.get(\"fapi/v1/klines\", params);\n    }\n    getContinuousContractKlines(params) {\n        return this.get(\"fapi/v1/continuousKlines\", params);\n    }\n    getIndexPriceKlines(params) {\n        return this.get(\"fapi/v1/indexPriceKlines\", params);\n    }\n    getMarkPriceKlines(params) {\n        return this.get(\"fapi/v1/markPriceKlines\", params);\n    }\n    /**\n     * @deprecated use get24hrChangeStatistics() instead (method without the typo)\n     */ get24hrChangeStatististics(params) {\n        return this.get24hrChangeStatistics(params);\n    }\n    get24hrChangeStatistics(params) {\n        return this.get(\"fapi/v1/ticker/24hr\", params);\n    }\n    getSymbolPriceTicker(params) {\n        return this.get(\"fapi/v1/ticker/price\", params);\n    }\n    getSymbolOrderBookTicker(params) {\n        return this.get(\"fapi/v1/ticker/bookTicker\", params);\n    }\n    getOpenInterest(params) {\n        return this.get(\"fapi/v1/openInterest\", params);\n    }\n    getOpenInterestStatistics(params) {\n        return this.get(\"futures/data/openInterestHist\", params);\n    }\n    getTopTradersLongShortAccountRatio(params) {\n        return this.get(\"futures/data/topLongShortAccountRatio\", params);\n    }\n    getTopTradersLongShortPositionRatio(params) {\n        return this.get(\"futures/data/topLongShortPositionRatio\", params);\n    }\n    getGlobalLongShortAccountRatio(params) {\n        return this.get(\"futures/data/globalLongShortAccountRatio\", params);\n    }\n    getTakerBuySellVolume(params) {\n        return this.get(\"futures/data/takerlongshortRatio\", params);\n    }\n    getHistoricalBlvtNavKlines(params) {\n        return this.get(\"fapi/v1/lvtKlines\", params);\n    }\n    getCompositeSymbolIndex(params) {\n        return this.get(\"fapi/v1/indexInfo\", params);\n    }\n    /**\n     *\n     * USD-Futures Account/Trade Endpoints\n     *\n     **/ setPositionMode(params) {\n        return this.postPrivate(\"fapi/v1/positionSide/dual\", params);\n    }\n    getCurrentPositionMode() {\n        return this.getPrivate(\"fapi/v1/positionSide/dual\");\n    }\n    setMultiAssetsMode(params) {\n        return this.postPrivate(\"fapi/v1/multiAssetsMargin\", params);\n    }\n    getMultiAssetsMode() {\n        return this.getPrivate(\"fapi/v1/multiAssetsMargin\");\n    }\n    submitNewOrder(params) {\n        this.validateOrderId(params, \"newClientOrderId\");\n        return this.postPrivate(\"fapi/v1/order\", params);\n    }\n    /**\n     * Warning: max 5 orders at a time! This method does not throw, instead it returns individual errors in the response array if any orders were rejected.\n     *\n     * Known issue: `quantity` and `price` should be sent as strings\n     */ submitMultipleOrders(orders) {\n        const stringOrders = orders.map((order)=>{\n            const orderToStringify = Object.assign({}, order);\n            this.validateOrderId(orderToStringify, \"newClientOrderId\");\n            return JSON.stringify(orderToStringify);\n        });\n        const requestBody = {\n            batchOrders: `[${stringOrders.join(\",\")}]`\n        };\n        return this.postPrivate(\"fapi/v1/batchOrders\", requestBody);\n    }\n    getOrder(params) {\n        return this.getPrivate(\"fapi/v1/order\", params);\n    }\n    cancelOrder(params) {\n        return this.deletePrivate(\"fapi/v1/order\", params);\n    }\n    cancelAllOpenOrders(params) {\n        return this.deletePrivate(\"fapi/v1/allOpenOrders\", params);\n    }\n    cancelMultipleOrders(params) {\n        const requestParams = Object.assign({}, params);\n        if (params.orderIdList) {\n            requestParams[\"orderIdList\"] = JSON.stringify(params.orderIdList);\n        }\n        if (params.origClientOrderIdList) {\n            requestParams[\"origClientOrderIdList\"] = JSON.stringify(params.origClientOrderIdList);\n        }\n        return this.deletePrivate(\"fapi/v1/batchOrders\", requestParams);\n    }\n    // Auto-cancel all open orders\n    setCancelOrdersOnTimeout(params) {\n        return this.postPrivate(\"fapi/v1/countdownCancelAll\", params);\n    }\n    getCurrentOpenOrder(params) {\n        return this.getPrivate(\"fapi/v1/openOrder\", params);\n    }\n    getAllOpenOrders(params) {\n        return this.getPrivate(\"fapi/v1/openOrders\", params);\n    }\n    getAllOrders(params) {\n        return this.getPrivate(\"fapi/v1/allOrders\", params);\n    }\n    getBalance() {\n        return this.getPrivate(\"fapi/v2/balance\");\n    }\n    getAccountInformation() {\n        return this.getPrivate(\"fapi/v2/account\");\n    }\n    setLeverage(params) {\n        return this.postPrivate(\"fapi/v1/leverage\", params);\n    }\n    setMarginType(params) {\n        return this.postPrivate(\"fapi/v1/marginType\", params);\n    }\n    setIsolatedPositionMargin(params) {\n        return this.postPrivate(\"fapi/v1/positionMargin\", params);\n    }\n    getPositionMarginChangeHistory(params) {\n        return this.getPrivate(\"fapi/v1/positionMargin/history\", params);\n    }\n    getPositions(params) {\n        return this.getPrivate(\"fapi/v2/positionRisk\", params);\n    }\n    getAccountTrades(params) {\n        return this.getPrivate(\"fapi/v1/userTrades\", params);\n    }\n    getIncomeHistory(params) {\n        return this.getPrivate(\"fapi/v1/income\", params);\n    }\n    /**\n     * Contrary to what the docs say - if symbol is provided, this returns an array with length 1 (assuming the symbol exists)\n     */ getNotionalAndLeverageBrackets(params) {\n        return this.getPrivate(\"fapi/v1/leverageBracket\", params);\n    }\n    getADLQuantileEstimation(params) {\n        return this.getPrivate(\"fapi/v1/adlQuantile\", params);\n    }\n    getForceOrders(params) {\n        return this.getPrivate(\"fapi/v1/forceOrders\", params);\n    }\n    getApiQuantitativeRulesIndicators(params) {\n        return this.getPrivate(\"fapi/v1/apiTradingStatus\", params);\n    }\n    getAccountComissionRate(params) {\n        return this.getPrivate(\"fapi/v1/commissionRate\", params);\n    }\n    /**\n     *\n     * Broker Futures Endpoints\n     *\n     **/ // 1 == USDT-Margined, 2 == Coin-margined\n    getBrokerIfNewFuturesUser(brokerId, type = 1) {\n        return this.getPrivate(\"fapi/v1/apiReferral/ifNewUser\", {\n            brokerId,\n            type\n        });\n    }\n    setBrokerCustomIdForClient(customerId, email) {\n        return this.postPrivate(\"fapi/v1/apiReferral/customization\", {\n            customerId,\n            email\n        });\n    }\n    getBrokerClientCustomIds(customerId, email, page, limit) {\n        return this.getPrivate(\"fapi/v1/apiReferral/customization\", {\n            customerId,\n            email,\n            page,\n            limit\n        });\n    }\n    getBrokerUserCustomId(brokerId) {\n        return this.getPrivate(\"fapi/v1/apiReferral/userCustomization\", {\n            brokerId\n        });\n    }\n    getBrokerRebateDataOverview(type = 1) {\n        return this.getPrivate(\"fapi/v1/apiReferral/overview\", {\n            type\n        });\n    }\n    getBrokerUserTradeVolume(type = 1, startTime, endTime, limit) {\n        return this.getPrivate(\"fapi/v1/apiReferral/tradeVol\", {\n            type,\n            startTime,\n            endTime,\n            limit\n        });\n    }\n    getBrokerRebateVolume(type = 1, startTime, endTime, limit) {\n        return this.getPrivate(\"fapi/v1/apiReferral/rebateVol\", {\n            type,\n            startTime,\n            endTime,\n            limit\n        });\n    }\n    getBrokerTradeDetail(type = 1, startTime, endTime, limit) {\n        return this.getPrivate(\"fapi/v1/apiReferral/traderSummary\", {\n            type,\n            startTime,\n            endTime,\n            limit\n        });\n    }\n    /**\n     *\n     * User Data Stream Endpoints\n     *\n     **/ // USD-M Futures\n    getFuturesUserDataListenKey() {\n        return this.post(\"fapi/v1/listenKey\");\n    }\n    keepAliveFuturesUserDataListenKey() {\n        return this.put(\"fapi/v1/listenKey\");\n    }\n    closeFuturesUserDataListenKey() {\n        return this.delete(\"fapi/v1/listenKey\");\n    }\n    /**\n     * Validate syntax meets requirements set by binance. Log warning if not.\n     */ validateOrderId(params, orderIdProperty) {\n        const apiCategory = this.clientId;\n        if (!params[orderIdProperty]) {\n            params[orderIdProperty] = requestUtils_1.generateNewOrderId(apiCategory);\n            return;\n        }\n        const expectedOrderIdPrefix = `x-${requestUtils_1.getOrderIdPrefix(apiCategory)}`;\n        if (!params[orderIdProperty].startsWith(expectedOrderIdPrefix)) {\n            requestUtils_1.logInvalidOrderId(orderIdProperty, expectedOrderIdPrefix, params);\n        }\n    }\n}\nexports.USDMClient = USDMClient; //# sourceMappingURL=usdm-client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/usdm-client.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/BaseRestClient.js":
/*!***********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/BaseRestClient.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __awaiter = (void 0) && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/../../node_modules/.pnpm/axios@0.21.4/node_modules/axios/index.js\"));\nconst requestUtils_1 = __webpack_require__(/*! ./requestUtils */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/requestUtils.js\");\nconst beautifier_1 = __importDefault(__webpack_require__(/*! ./beautifier */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/beautifier.js\"));\nclass BaseRestClient {\n    constructor(baseUrlKey, options = {}, requestOptions = {}){\n        this.timeOffset = 0;\n        this.options = Object.assign({\n            recvWindow: 5000,\n            // how often to sync time drift with binance servers\n            syncIntervalMs: 3600000,\n            // if true, we'll throw errors if any params are undefined\n            strictParamValidation: false,\n            // disable the time sync mechanism by default\n            disableTimeSync: true\n        }, options);\n        this.globalRequestOptions = Object.assign({\n            // in ms == 5 minutes by default\n            timeout: 1000 * 60 * 5,\n            headers: {\n            }\n        }, requestOptions);\n        this.key = options.api_key;\n        this.secret = options.api_secret;\n        if (this.key) {\n            this.globalRequestOptions.headers[\"X-MBX-APIKEY\"] = this.key;\n        }\n        this.baseUrlKey = this.options.baseUrlKey || baseUrlKey;\n        this.baseUrl = requestUtils_1.getRestBaseUrl(this.baseUrlKey, this.options);\n        if (this.key && !this.secret) {\n            throw new Error(\"API Key & Secret are both required for private enpoints\");\n        }\n        if (this.options.disableTimeSync !== true) {\n            this.syncTime();\n            setInterval(this.syncTime.bind(this), +this.options.syncIntervalMs);\n        }\n        if (this.options.beautifyResponses) {\n            this.beautifier = new beautifier_1.default();\n        }\n        this.syncTimePromise = null;\n        this.apiLimitTrackers = {\n            \"x-mbx-used-weight\": 0,\n            \"x-mbx-used-weight-1m\": 0,\n            \"x-sapi-used-ip-weight-1m\": 0,\n            \"x-mbx-order-count-1s\": 0,\n            \"x-mbx-order-count-1m\": 0,\n            \"x-mbx-order-count-1h\": 0,\n            \"x-mbx-order-count-1d\": 0\n        };\n    }\n    getBaseUrlKey() {\n        return this.baseUrlKey;\n    }\n    getRateLimitStates() {\n        return Object.assign(Object.assign({}, this.apiLimitTrackers), {\n            lastUpdated: this.apiLimitLastUpdated\n        });\n    }\n    /**\n     * Return time sync offset, automatically set if time sync is enabled. A higher offset means system clock is behind server time.\n     */ getTimeOffset() {\n        return this.timeOffset;\n    }\n    setTimeOffset(value) {\n        this.timeOffset = value;\n    }\n    get(endpoint, params) {\n        return this._call(\"GET\", endpoint, params);\n    }\n    getForBaseUrl(endpoint, baseUrlKey, params) {\n        const baseUrl = requestUtils_1.getRestBaseUrl(baseUrlKey, {});\n        return this._call(\"GET\", endpoint, params, false, baseUrl);\n    }\n    getPrivate(endpoint, params) {\n        return this._call(\"GET\", endpoint, params, true);\n    }\n    post(endpoint, params) {\n        return this._call(\"POST\", endpoint, params);\n    }\n    postPrivate(endpoint, params) {\n        return this._call(\"POST\", endpoint, params, true);\n    }\n    put(endpoint, params) {\n        return this._call(\"PUT\", endpoint, params);\n    }\n    putPrivate(endpoint, params) {\n        return this._call(\"PUT\", endpoint, params, true);\n    }\n    delete(endpoint, params) {\n        return this._call(\"DELETE\", endpoint, params);\n    }\n    deletePrivate(endpoint, params) {\n        return this._call(\"DELETE\", endpoint, params, true);\n    }\n    /**\n     * @private Make a HTTP request to a specific endpoint. Private endpoints are automatically signed.\n     */ _call(method, endpoint, params, isPrivate, baseUrlOverride) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const timestamp = Date.now() + (this.getTimeOffset() || 0);\n            if (isPrivate && (!this.key || !this.secret)) {\n                throw new Error(\"Private endpoints require api and private keys to be set\");\n            }\n            // Handles serialisation of params into query string (url?key1=value1&key2=value2), handles encoding of values, adds timestamp and signature to request.\n            const { serialisedParams, signature, requestBody } = yield requestUtils_1.getRequestSignature(params, this.key, this.secret, this.options.recvWindow, timestamp, this.options.strictParamValidation, this.options.filterUndefinedParams);\n            const baseUrl = baseUrlOverride || this.baseUrl;\n            const options = Object.assign(Object.assign({}, this.globalRequestOptions), {\n                url: [\n                    baseUrl,\n                    endpoint\n                ].join(\"/\"),\n                method: method,\n                json: true\n            });\n            if (isPrivate) {\n                options.url += \"?\" + [\n                    serialisedParams,\n                    \"signature=\" + signature\n                ].join(\"&\");\n            } else if (method === \"GET\" || method === \"DELETE\") {\n                options.params = params;\n            } else {\n                options.data = requestUtils_1.serialiseParams(requestBody, this.options.strictParamValidation, true);\n            }\n            // console.log(\n            //   'sending request: ',\n            //   JSON.stringify(\n            //     {\n            //       reqOptions: options,\n            //       reqParams: params,\n            //     },\n            //     null,\n            //     2\n            //   )\n            // );\n            return axios_1.default(options).then((response)=>{\n                this.updateApiLimitState(response.headers, options.url);\n                if (response.status == 200) {\n                    return response.data;\n                }\n                throw response;\n            }).then((response)=>{\n                if (!this.options.beautifyResponses || !this.beautifier) {\n                    return response;\n                }\n                // Fallback to original response if beautifier fails\n                try {\n                    return this.beautifier.beautify(response, endpoint) || response;\n                } catch (e) {\n                    console.error(\"BaseRestClient response beautify failed: \", JSON.stringify({\n                        response: response,\n                        error: e\n                    }));\n                }\n                return response;\n            }).catch((e)=>this.parseException(e, options.url));\n        });\n    }\n    /**\n     * @private generic handler to parse request exceptions\n     */ parseException(e, url) {\n        var _a, _b;\n        const { response, request, message } = e;\n        if (response && response.headers) {\n            this.updateApiLimitState(response.headers, url);\n        }\n        if (this.options.parseExceptions === false) {\n            throw e;\n        }\n        // Something happened in setting up the request that triggered an Error\n        if (!response) {\n            if (!request) {\n                throw message;\n            }\n            // request made but no response received\n            throw e;\n        }\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        throw {\n            code: (_a = response.data) === null || _a === void 0 ? void 0 : _a.code,\n            message: (_b = response.data) === null || _b === void 0 ? void 0 : _b.msg,\n            body: response.data,\n            headers: response.headers,\n            requestUrl: url,\n            requestBody: request.body,\n            requestOptions: Object.assign(Object.assign({}, this.options), {\n                api_key: undefined,\n                api_secret: undefined\n            })\n        };\n    }\n    // TODO: cleanup?\n    updateApiLimitState(responseHeaders, requestedUrl) {\n        const delta = {};\n        for(const headerKey in this.apiLimitTrackers){\n            const headerValue = responseHeaders[headerKey];\n            const value = parseInt(headerValue);\n            if (headerValue !== undefined && !isNaN(value)) {\n                // TODO: track last seen by key? insetad of all? some keys not returned by some endpoints more useful in estimating whether reset should've happened\n                this.apiLimitTrackers[headerKey] = value;\n                delta[headerKey] = {\n                    updated: true,\n                    valueParsed: value,\n                    valueRaw: headerValue\n                };\n            } else {\n                delta[headerKey] = {\n                    updated: false,\n                    valueParsed: value,\n                    valueRaw: headerValue\n                };\n            }\n        }\n        // console.log('responseHeaders: ', requestedUrl);\n        // console.table(responseHeaders);\n        // console.table(delta);\n        this.apiLimitLastUpdated = new Date().getTime();\n    }\n    /**\n     * Trigger time sync and store promise\n     */ syncTime() {\n        if (this.options.disableTimeSync === true) {\n            return Promise.resolve();\n        }\n        if (this.syncTimePromise !== null) {\n            return this.syncTimePromise;\n        }\n        this.syncTimePromise = this.fetchTimeOffset().then((offset)=>{\n            this.timeOffset = offset;\n            this.syncTimePromise = null;\n        });\n        return this.syncTimePromise;\n    }\n    /**\n     * Estimate drift based on client<->server latency\n     */ fetchTimeOffset() {\n        return __awaiter(this, void 0, void 0, function*() {\n            try {\n                const start = Date.now();\n                const serverTime = yield this.getServerTime();\n                const end = Date.now();\n                const avgDrift = (end - start) / 2;\n                return Math.ceil(serverTime - end + avgDrift);\n            } catch (e) {\n                console.error(\"Failed to fetch get time offset: \", e);\n                return 0;\n            }\n        });\n    }\n}\nexports[\"default\"] = BaseRestClient; //# sourceMappingURL=BaseRestClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/BaseRestClient.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/WsStore.js":
/*!****************************************************************************************!*\
  !*** ../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/WsStore.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.WsConnectionStateEnum = void 0;\nconst logger_1 = __webpack_require__(/*! ../logger */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/logger.js\");\nvar WsConnectionStateEnum;\n(function(WsConnectionStateEnum) {\n    WsConnectionStateEnum[WsConnectionStateEnum[\"INITIAL\"] = 0] = \"INITIAL\";\n    WsConnectionStateEnum[WsConnectionStateEnum[\"CONNECTING\"] = 1] = \"CONNECTING\";\n    WsConnectionStateEnum[WsConnectionStateEnum[\"CONNECTED\"] = 2] = \"CONNECTED\";\n    WsConnectionStateEnum[WsConnectionStateEnum[\"CLOSING\"] = 3] = \"CLOSING\";\n    WsConnectionStateEnum[WsConnectionStateEnum[\"RECONNECTING\"] = 4] = \"RECONNECTING\";\n// ERROR = 5,\n})(WsConnectionStateEnum = exports.WsConnectionStateEnum || (exports.WsConnectionStateEnum = {}));\nclass WsStore {\n    constructor(logger){\n        this.logger = logger || logger_1.DefaultLogger;\n        this.wsState = {};\n    }\n    get(key, createIfMissing) {\n        if (this.wsState[key]) {\n            return this.wsState[key];\n        }\n        if (createIfMissing) {\n            return this.create(key);\n        }\n    }\n    getKeys() {\n        return Object.keys(this.wsState);\n    }\n    create(key) {\n        if (this.hasExistingActiveConnection(key)) {\n            this.logger.warning(\"WsStore setConnection() overwriting existing open connection: \", this.getWs(key));\n        }\n        this.wsState[key] = {\n            subscribedTopics: new Set(),\n            connectionState: WsConnectionStateEnum.INITIAL\n        };\n        return this.get(key);\n    }\n    delete(key) {\n        if (this.hasExistingActiveConnection(key)) {\n            const ws = this.getWs(key);\n            this.logger.warning(\"WsStore deleting state for connection still open: \", ws);\n            ws === null || ws === void 0 ? void 0 : ws.close();\n        }\n        delete this.wsState[key];\n    }\n    /* connection websocket */ hasExistingActiveConnection(key) {\n        return this.get(key) && this.isWsOpen(key);\n    }\n    getWs(key) {\n        var _a;\n        return (_a = this.get(key)) === null || _a === void 0 ? void 0 : _a.ws;\n    }\n    setWs(key, wsConnection) {\n        if (this.isWsOpen(key)) {\n            this.logger.warning(\"WsStore setConnection() overwriting existing open connection: \", this.getWs(key));\n        }\n        this.get(key, true).ws = wsConnection;\n        return wsConnection;\n    }\n    /* connection state */ isWsOpen(key) {\n        const existingConnection = this.getWs(key);\n        return !!existingConnection && existingConnection.readyState === existingConnection.OPEN;\n    }\n    getConnectionState(key) {\n        return this.get(key, true).connectionState;\n    }\n    setConnectionState(key, state) {\n        this.get(key, true).connectionState = state;\n    }\n    isConnectionState(key, state) {\n        return this.getConnectionState(key) === state;\n    }\n    isWsConnecting(key) {\n        return this.isConnectionState(key, WsConnectionStateEnum.CONNECTING) || this.isConnectionState(key, WsConnectionStateEnum.RECONNECTING);\n    }\n    /* subscribed topics */ getTopics(key) {\n        return this.get(key, true).subscribedTopics;\n    }\n    getTopicsByKey() {\n        const result = {};\n        for(const refKey in this.wsState){\n            result[refKey] = this.getTopics(refKey);\n        }\n        return result;\n    }\n    addTopic(key, topic) {\n        return this.getTopics(key).add(topic);\n    }\n    deleteTopic(key, topic) {\n        return this.getTopics(key).delete(topic);\n    }\n}\nexports[\"default\"] = WsStore; //# sourceMappingURL=WsStore.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/WsStore.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/beautifier-maps.js":
/*!************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/beautifier-maps.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BEAUTIFIER_EVENT_MAP = void 0;\nconst rollingTickerEventMap = {\n    e: \"eventType\",\n    E: \"eventTime\",\n    s: \"symbol\",\n    p: \"priceChange\",\n    P: \"priceChangePercent\",\n    o: \"openPrice\",\n    h: \"highPrice\",\n    l: \"lowPrice\",\n    c: \"lastPrice\",\n    w: \"weightedAveragePrice\",\n    v: \"totalTradedBaseAssetVolume\",\n    q: \"totalTradedQuoteAssetVolume\",\n    O: \"statisticsOpenTime\",\n    C: \"statisticsCloseTime\",\n    F: \"firstTradeId\",\n    L: \"lastTradeId\",\n    n: \"totalTrades\"\n};\nexports.BEAUTIFIER_EVENT_MAP = {\n    aggTrades: {\n        a: \"aggTradeId\",\n        p: \"price\",\n        q: \"quantity\",\n        f: \"firstTradeId\",\n        l: \"lastTradeId\",\n        T: \"timestamp\",\n        m: \"maker\",\n        M: \"bestPriceMatch\"\n    },\n    bookTickerEvent: {\n        e: \"eventType\",\n        u: \"updateId\",\n        s: \"symbol\",\n        b: \"bidPrice\",\n        B: \"bidQty\",\n        a: \"askPrice\",\n        A: \"askQty\"\n    },\n    klines: {\n        0: \"openTime\",\n        1: \"open\",\n        2: \"high\",\n        3: \"low\",\n        4: \"close\",\n        5: \"volume\",\n        6: \"closeTime\",\n        7: \"quoteAssetVolume\",\n        8: \"trades\",\n        9: \"takerBaseAssetVolume\",\n        10: \"takerQuoteAssetVolume\",\n        11: \"ignored\"\n    },\n    bids: [\n        {\n            0: \"price\",\n            1: \"quantity\",\n            2: \"ignored\"\n        }\n    ],\n    asks: [\n        {\n            0: \"price\",\n            1: \"quantity\",\n            2: \"ignored\"\n        }\n    ],\n    depthUpdateEvent: {\n        e: \"eventType\",\n        E: \"eventTime\",\n        s: \"symbol\",\n        U: \"firstUpdateId\",\n        u: \"lastUpdateId\",\n        b: \"bidDepthDelta\",\n        a: \"askDepthDelta\"\n    },\n    bidDepthDelta: [\n        {\n            0: \"price\",\n            1: \"quantity\",\n            2: \"ignored\"\n        }\n    ],\n    askDepthDelta: [\n        {\n            0: \"price\",\n            1: \"quantity\",\n            2: \"ignored\"\n        }\n    ],\n    klineEvent: {\n        e: \"eventType\",\n        E: \"eventTime\",\n        s: \"symbol\",\n        k: \"kline\"\n    },\n    continuous_klineEvent: {\n        e: \"eventType\",\n        E: \"eventTime\",\n        ps: \"symbol\",\n        ct: \"contractType\",\n        k: \"kline\"\n    },\n    indexPrice_klineEvent: {\n        e: \"eventType\",\n        E: \"eventTime\",\n        ps: \"symbol\",\n        k: \"kline\"\n    },\n    kline: {\n        t: \"startTime\",\n        T: \"endTime\",\n        s: \"symbol\",\n        i: \"interval\",\n        f: \"firstTradeId\",\n        L: \"lastTradeId\",\n        o: \"open\",\n        c: \"close\",\n        h: \"high\",\n        l: \"low\",\n        v: \"volume\",\n        n: \"trades\",\n        x: \"final\",\n        q: \"quoteVolume\",\n        V: \"volumeActive\",\n        Q: \"quoteVolumeActive\",\n        B: \"ignored\"\n    },\n    aggTradeEvent: {\n        e: \"eventType\",\n        E: \"eventTime\",\n        s: \"symbol\",\n        a: \"tradeId\",\n        p: \"price\",\n        q: \"quantity\",\n        f: \"firstTradeId\",\n        l: \"lastTradeId\",\n        T: \"time\",\n        m: \"maker\",\n        M: \"ignored\"\n    },\n    outboundAccountInfoEvent: {\n        e: \"eventType\",\n        E: \"eventTime\",\n        m: \"makerCommission\",\n        t: \"takerCommission\",\n        b: \"buyerCommission\",\n        s: \"sellerCommission\",\n        T: \"canTrade\",\n        W: \"canWithdraw\",\n        D: \"canDeposit\",\n        B: \"balances\",\n        u: \"lastUpdateTime\"\n    },\n    outboundAccountPositionEvent: {\n        e: \"eventType\",\n        E: \"eventTime\",\n        u: \"lastUpdateTime\",\n        B: \"balances\"\n    },\n    balanceUpdateEvent: {\n        e: \"eventType\",\n        E: \"eventTime\",\n        a: \"asset\",\n        d: \"balanceDelta\",\n        T: \"clearTime\"\n    },\n    indexPriceUpdateEvent: {\n        e: \"eventType\",\n        E: \"eventTime\",\n        i: \"symbol\",\n        p: \"indexPrice\"\n    },\n    listStatusEvent: {\n        e: \"eventType\",\n        E: \"eventTime\",\n        s: \"symbol\",\n        g: \"orderListId\",\n        c: \"contingencyType\",\n        l: \"listStatusType\",\n        L: \"listOrderStatus\",\n        r: \"listRejectReason\",\n        C: \"listClientOrderId\",\n        T: \"transactionTime\",\n        O: \"orders\"\n    },\n    markPriceUpdateEvent: {\n        e: \"eventType\",\n        E: \"eventTime\",\n        s: \"symbol\",\n        p: \"markPrice\",\n        i: \"indexPrice\",\n        P: \"settlePriceEstimate\",\n        r: \"fundingRate\",\n        T: \"nextFundingTime\"\n    },\n    orders: [\n        {\n            s: \"symbol\",\n            i: \"orderId\",\n            c: \"clientOrderId\"\n        }\n    ],\n    ACCOUNT_UPDATEEvent: {\n        e: \"eventType\",\n        E: \"eventTime\",\n        T: \"transactionTime\",\n        a: \"updateData\"\n    },\n    MARGIN_CALLEvent: {\n        e: \"eventType\",\n        E: \"eventTime\",\n        cw: \"crossWalletBalance\",\n        p: \"positions\"\n    },\n    ORDER_TRADE_UPDATEEvent: {\n        e: \"eventType\",\n        E: \"eventTime\",\n        T: \"transactionTime\",\n        o: \"order\"\n    },\n    CONDITIONAL_ORDER_TRIGGER_REJECTEvent: {\n        e: \"eventType\",\n        E: \"eventTime\",\n        T: \"transactionTime\",\n        or: \"order\",\n        s: \"symbol\",\n        i: \"orderId\",\n        r: \"reason\"\n    },\n    order: {\n        s: \"symbol\",\n        c: \"clientOrderId\",\n        S: \"orderSide\",\n        o: \"orderType\",\n        f: \"timeInForce\",\n        q: \"originalQuantity\",\n        p: \"originalPrice\",\n        ap: \"averagePrice\",\n        sp: \"stopPrice\",\n        x: \"executionType\",\n        X: \"orderStatus\",\n        i: \"orderId\",\n        l: \"lastFilledQuantity\",\n        z: \"orderFilledAccumulatedQuantity\",\n        L: \"lastFilledPrice\",\n        N: \"commissionAsset\",\n        n: \"commissionAmount\",\n        T: \"orderTradeTime\",\n        t: \"tradeId\",\n        b: \"bidsNotional\",\n        a: \"asksNotional\",\n        m: \"isMakerTrade\",\n        R: \"isReduceOnly\",\n        wt: \"stopPriceWorkingType\",\n        ot: \"originalOrderType\",\n        ps: \"positionSide\",\n        cp: \"isCloseAll\",\n        AP: \"trailingStopActivationPrice\",\n        cr: \"trailingStopCallbackRate\",\n        rp: \"realisedProfit\"\n    },\n    ACCOUNT_CONFIG_UPDATEEvent: {\n        e: \"eventType\",\n        E: \"eventTime\",\n        T: \"transactionTime\",\n        ac: \"assetConfiguration\",\n        ai: \"accountConfiguration\"\n    },\n    assetConfiguration: {\n        s: \"symbol\",\n        l: \"leverage\"\n    },\n    accountConfiguration: {\n        j: \"isMultiAssetsMode\"\n    },\n    positions: [\n        {\n            s: \"symbol\",\n            ps: \"positionSide\",\n            pa: \"positionAmount\",\n            mt: \"marginType\",\n            iw: \"isolatedWalletAmount\",\n            mp: \"markPrice\",\n            up: \"unrealisedPnl\",\n            mm: \"maintenanceMarginRequired\"\n        }\n    ],\n    listenKeyExpiredEvent: {\n        e: \"eventType\",\n        E: \"eventTime\"\n    },\n    updateData: {\n        m: \"updateEventType\",\n        P: \"updatedPositions\",\n        B: \"updatedBalances\"\n    },\n    updatedBalances: [\n        {\n            a: \"asset\",\n            wb: \"walletBalance\",\n            cw: \"crossWalletBalance\",\n            bc: \"balanceChange\"\n        }\n    ],\n    updatedPositions: [\n        {\n            s: \"symbol\",\n            ma: \"marginAsset\",\n            pa: \"positionAmount\",\n            ep: \"entryPrice\",\n            cr: \"accumulatedRealisedPreFee\",\n            up: \"unrealisedPnl\",\n            mt: \"marginType\",\n            iw: \"isolatedWalletAmount\",\n            ps: \"positionSide\"\n        }\n    ],\n    balances: [\n        {\n            a: \"asset\",\n            f: \"availableBalance\",\n            l: \"onOrderBalance\"\n        }\n    ],\n    executionReportEvent: {\n        e: \"eventType\",\n        E: \"eventTime\",\n        s: \"symbol\",\n        c: \"newClientOrderId\",\n        S: \"side\",\n        o: \"orderType\",\n        f: \"cancelType\",\n        q: \"quantity\",\n        p: \"price\",\n        P: \"stopPrice\",\n        F: \"icebergQuantity\",\n        g: \"orderListId\",\n        C: \"originalClientOrderId\",\n        x: \"executionType\",\n        X: \"orderStatus\",\n        r: \"rejectReason\",\n        i: \"orderId\",\n        l: \"lastTradeQuantity\",\n        z: \"accumulatedQuantity\",\n        L: \"lastTradePrice\",\n        n: \"commission\",\n        N: \"commissionAsset\",\n        T: \"tradeTime\",\n        t: \"tradeId\",\n        I: \"ignoreThis1\",\n        w: \"isOrderOnBook\",\n        m: \"isMaker\",\n        M: \"ignoreThis2\",\n        O: \"orderCreationTime\",\n        Z: \"cummulativeQuoteAssetTransactedQty\",\n        Y: \"lastQuoteAssetTransactedQty\",\n        Q: \"orderQuoteQty\"\n    },\n    tradeEvent: {\n        e: \"eventType\",\n        E: \"eventTime\",\n        s: \"symbol\",\n        t: \"tradeId\",\n        p: \"price\",\n        q: \"quantity\",\n        b: \"buyerOrderId\",\n        a: \"sellerOrderId\",\n        T: \"time\",\n        m: \"maker\",\n        M: \"ignored\"\n    },\n    \"24hrTickerEvent\": {\n        e: \"eventType\",\n        E: \"eventTime\",\n        s: \"symbol\",\n        p: \"priceChange\",\n        P: \"priceChangePercent\",\n        w: \"weightedAveragePrice\",\n        x: \"previousClose\",\n        c: \"currentClose\",\n        Q: \"closeQuantity\",\n        b: \"bestBid\",\n        B: \"bestBidQuantity\",\n        a: \"bestAskPrice\",\n        A: \"bestAskQuantity\",\n        o: \"open\",\n        h: \"high\",\n        l: \"low\",\n        v: \"baseAssetVolume\",\n        q: \"quoteAssetVolume\",\n        O: \"openTime\",\n        C: \"closeTime\",\n        F: \"firstTradeId\",\n        L: \"lastTradeId\",\n        n: \"trades\"\n    },\n    \"24hrMiniTickerEvent\": {\n        e: \"eventType\",\n        E: \"eventTime\",\n        s: \"symbol\",\n        ps: \"contractSymbol\",\n        c: \"close\",\n        o: \"open\",\n        h: \"high\",\n        l: \"low\",\n        v: \"baseAssetVolume\",\n        q: \"quoteAssetVolume\"\n    },\n    \"1hTickerEvent\": rollingTickerEventMap,\n    \"4hTickerEvent\": rollingTickerEventMap,\n    \"1dTickerEvent\": rollingTickerEventMap,\n    forceOrderEvent: {\n        e: \"eventType\",\n        E: \"eventTime\",\n        o: \"liquidationOrder\"\n    },\n    liquidationOrder: {\n        s: \"symbol\",\n        S: \"side\",\n        o: \"orderType\",\n        f: \"timeInForce\",\n        q: \"quantity\",\n        p: \"price\",\n        ap: \"averagePrice\",\n        X: \"orderStatus\",\n        l: \"lastFilledQuantity\",\n        z: \"orderFilledAccumulatedQuantity\",\n        T: \"orderTradeTime\"\n    }\n}; //# sourceMappingURL=beautifier-maps.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/beautifier-maps.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/beautifier.js":
/*!*******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/beautifier.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst beautifier_maps_1 = __webpack_require__(/*! ./beautifier-maps */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/beautifier-maps.js\");\nclass Beautifier {\n    constructor(){\n        this.floatKeys = [\n            \"accumulatedQuantity\",\n            \"accumulatedRealisedPreFee\",\n            \"asks\",\n            \"asksNotional\",\n            \"askPrice\",\n            \"askQty\",\n            \"availableBalance\",\n            \"averagePrice\",\n            \"balanceDelta\",\n            \"balances\",\n            \"balanceChange\",\n            \"baseAssetVolume\",\n            \"bestAskPrice\",\n            \"bestAskQuantity\",\n            \"bids\",\n            \"bidsNotional\",\n            \"bestBid\",\n            \"bestBidQuantity\",\n            \"bidPrice\",\n            \"bidQty\",\n            \"buyerCommission\",\n            \"close\",\n            \"closeQuantity\",\n            \"closeTime\",\n            \"commission\",\n            \"commissionAmount\",\n            \"crossWalletBalance\",\n            \"currentClose\",\n            \"cummulativeQuoteAssetTransactedQty\",\n            \"entryPrice\",\n            \"executedQty\",\n            \"free\",\n            \"freeze\",\n            \"fundingRate\",\n            \"high\",\n            \"highPrice\",\n            \"icebergQuantity\",\n            \"icebergQty\",\n            \"ignored\",\n            \"income\",\n            \"indexPrice\",\n            \"ipoable\",\n            \"ipoing\",\n            \"isolatedMargin\",\n            \"isolatedWallet\",\n            \"isolatedWalletAmount\",\n            \"lastFilledPrice\",\n            \"lastFilledQuantity\",\n            \"lastPrice\",\n            \"lastTradeId\",\n            \"lastTradePrice\",\n            \"lastTradeQuantity\",\n            \"lastQuoteAssetTransactedQty\",\n            \"liquidationPrice\",\n            \"locked\",\n            \"low\",\n            \"lowPrice\",\n            \"maintenanceMarginRequired\",\n            \"makerCommission\",\n            \"markPrice\",\n            \"maxNotionalValue\",\n            \"maxPrice\",\n            \"maxQty\",\n            \"minNotional\",\n            \"minPrice\",\n            \"minQty\",\n            \"multiplierDown\",\n            \"multiplierUp\",\n            \"multiplierDecimal\",\n            \"newTraderRebateCommission\",\n            \"notional\",\n            \"oldTraderRebateCommission\",\n            \"onOrderBalance\",\n            \"open\",\n            \"openPrice\",\n            \"orderQuoteQty\",\n            \"orderFilledAccumulatedQuantity\",\n            \"originalPrice\",\n            \"originalQuantity\",\n            \"origQty\",\n            \"positionAmount\",\n            \"positionAmt\",\n            \"previousClose\",\n            \"prevClosePrice\",\n            \"price\",\n            \"priceChange\",\n            \"priceChangePercent\",\n            \"quantity\",\n            \"qty\",\n            \"quoteAssetVolume\",\n            \"quoteVolume\",\n            \"quoteVolumeActive\",\n            \"realisedProfit\",\n            \"sellerCommission\",\n            \"settlePriceEstimate\",\n            \"statisticsCloseTime\",\n            \"statisticsOpenTime\",\n            \"stepSize\",\n            \"stopPrice\",\n            \"storage\",\n            \"takerBaseAssetVolume\",\n            \"takerCommission\",\n            \"takerQuoteAssetVolume\",\n            \"tickSize\",\n            \"totalRebateVol\",\n            \"totalTrades\",\n            \"totalTradeVol\",\n            \"totalTradedBaseAssetVolume\",\n            \"totalTradedQuoteAssetVolume\",\n            \"trailingStopActivationPrice\",\n            \"trailingStopCallbackRate\",\n            \"unrealisedPnl\",\n            \"unRealizedProfit\",\n            \"volume\",\n            \"volumeActive\",\n            \"walletBalance\",\n            \"weightedAveragePrice\",\n            \"weightedAvgPrice\",\n            \"withdrawFee\",\n            \"withdrawMax\",\n            \"withdrawMin\",\n            \"withdrawIntegerMultiple\",\n            \"withdrawing\"\n        ];\n        // Map so we don't have to perform indexOf for each iteration\n        this.floatKeysHashMap = {};\n        this.floatKeys.forEach((keyName)=>{\n            this.floatKeysHashMap[keyName] = true;\n        });\n        this.beautificationMap = beautifier_maps_1.BEAUTIFIER_EVENT_MAP;\n    }\n    beautifyValueWithKey(key, val) {\n        if (typeof val === \"string\" && this.floatKeysHashMap[key] && val !== \"\") {\n            const result = parseFloat(val);\n            if (isNaN(result)) {\n                return val;\n            }\n            return result;\n        }\n        return val;\n    }\n    /**\n     * Beautify array or object, recurisvely\n     */ beautifyObjectValues(data) {\n        if (Array.isArray(data)) {\n            return this.beautifyArrayValues(data);\n        }\n        const beautifedObject = {};\n        for (const [key, val] of Object.entries(data)){\n            const type = typeof val;\n            if (Array.isArray(val)) {\n                beautifedObject[key] = this.beautifyArrayValues(val, key);\n            } else if (key === \"e\" && type === \"string\") {\n                beautifedObject[\"eventType\"] = this.beautifyValueWithKey(key, val);\n            } else if (type === \"object\") {\n                beautifedObject[key] = this.beautifyObjectValues(val);\n            } else {\n                beautifedObject[key] = this.beautifyValueWithKey(key, val);\n            }\n        }\n        return beautifedObject;\n    }\n    // TODO: if not matched return original object....\n    beautifyArrayValues(data, parentKey) {\n        const beautifedArray = [];\n        for (const [key, val] of data.entries()){\n            const type = typeof val;\n            if (Array.isArray(val)) {\n                beautifedArray.push(this.beautifyArrayValues(val, parentKey || key));\n            } else if (type === \"string\" || type === \"number\" || type === \"boolean\") {\n                beautifedArray.push(this.beautifyValueWithKey(parentKey || key, val));\n            } else {\n                beautifedArray.push(this.beautifyObjectValues(val));\n            }\n        }\n        return beautifedArray;\n    }\n    beautify(data, key) {\n        if (typeof key !== \"string\" && typeof key !== \"number\") {\n            console.warn(`beautify(object, ${key}) is not valid key - beautification failed `, data, key);\n            return data;\n        }\n        const knownBeautification = this.beautificationMap[key];\n        if (!knownBeautification) {\n            // console.log(`beautify unknown key(..., \"${key}\")`);\n            if (Array.isArray(data)) {\n                return this.beautifyArrayValues(data);\n            }\n            if (typeof data === \"object\" && data !== null) {\n                return this.beautifyObjectValues(data);\n            }\n            return this.beautifyValueWithKey(key, data);\n        }\n        const newItem = {};\n        for(const key in data){\n            const value = data[key];\n            const valueType = typeof value;\n            let newKey = knownBeautification[key] || key;\n            if (Array.isArray(newKey)) {\n                newKey = newKey[0];\n            }\n            if (!Array.isArray(value)) {\n                if (valueType === \"object\" && value !== null) {\n                    newItem[newKey] = this.beautify(value, knownBeautification[key]);\n                } else {\n                    newItem[newKey] = this.beautifyValueWithKey(newKey, value);\n                }\n                continue;\n            }\n            const newArray = [];\n            if (Array.isArray(this.beautificationMap[newKey])) {\n                for (const elementValue of value){\n                    const mappedBeautification = this.beautificationMap[knownBeautification[key]];\n                    const childMapping = mappedBeautification[0];\n                    if (typeof childMapping === \"object\" && childMapping !== null) {\n                        const mappedResult = {};\n                        for(const childElementKey in elementValue){\n                            const newKey = childMapping[childElementKey] || childElementKey;\n                            mappedResult[newKey] = this.beautify(elementValue[childElementKey], newKey);\n                        }\n                        newArray.push(mappedResult);\n                        continue;\n                    }\n                    newArray.push(this.beautify(elementValue, childMapping));\n                }\n            }\n            newItem[newKey] = newArray;\n        }\n        return newItem;\n    }\n    /**\n     * Entry point to beautify WS message. EventType is determined automatically unless this is a combined stream event.\n     */ beautifyWsMessage(data, eventType, isCombined) {\n        if (Array.isArray(data)) {\n            return data.map((event)=>{\n                if (event.e) {\n                    return this.beautify(event, event.e + \"Event\");\n                }\n                return event;\n            });\n        } else if (data.e) {\n            return this.beautify(data, data.e + \"Event\");\n        } else if (isCombined && typeof data === \"object\" && data !== null) {\n            return this.beautify(data, eventType);\n        }\n        return data;\n    }\n}\nexports[\"default\"] = Beautifier; //# sourceMappingURL=beautifier.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/beautifier.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/browser-support.js":
/*!************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/browser-support.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nvar __awaiter = (void 0) && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.signMessage = void 0;\nfunction str2ab(str) {\n    const buf = new ArrayBuffer(str.length);\n    const bufView = new Uint8Array(buf);\n    for(let i = 0, strLen = str.length; i < strLen; i++){\n        bufView[i] = str.charCodeAt(i);\n    }\n    return buf;\n}\nfunction signMessage(message, secret) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const encoder = new TextEncoder();\n        if (secret.includes(\"PRIVATE KEY\")) {\n            const pemHeader = \"-----BEGIN PRIVATE KEY-----\";\n            const pemFooter = \"-----END PRIVATE KEY-----\";\n            const pemContents = secret.substring(pemHeader.length, secret.length - pemFooter.length);\n            const binaryDerString = globalThis.atob(pemContents);\n            const binaryDer = str2ab(binaryDerString);\n            const key = yield globalThis.crypto.subtle.importKey(\"pkcs8\", binaryDer, {\n                name: \"RSASSA-PKCS1-v1_5\",\n                hash: {\n                    name: \"SHA-256\"\n                }\n            }, false, [\n                \"sign\"\n            ]);\n            const signature = yield globalThis.crypto.subtle.sign(\"RSASSA-PKCS1-v1_5\", key, encoder.encode(message));\n            return btoa(String.fromCharCode(...new Uint8Array(signature)));\n        }\n        const key = yield globalThis.crypto.subtle.importKey(\"raw\", encoder.encode(secret), {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, false, [\n            \"sign\"\n        ]);\n        const signature = yield globalThis.crypto.subtle.sign(\"HMAC\", key, encoder.encode(message));\n        return Array.prototype.map.call(new Uint8Array(signature), (x)=>(\"00\" + x.toString(16)).slice(-2)).join(\"\");\n    });\n}\nexports.signMessage = signMessage; //# sourceMappingURL=browser-support.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JpbmFuY2VAMi44LjE1L25vZGVfbW9kdWxlcy9iaW5hbmNlL2xpYi91dGlsL2Jyb3dzZXItc3VwcG9ydC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLFlBQVksQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxTQUFTLElBQUssU0FBVUMsT0FBTyxFQUFFQyxVQUFVLEVBQUVDLENBQUMsRUFBRUMsU0FBUztJQUNuRixTQUFTQyxNQUFNQyxLQUFLO1FBQUksT0FBT0EsaUJBQWlCSCxJQUFJRyxRQUFRLElBQUlILEVBQUUsU0FBVUksT0FBTztZQUFJQSxRQUFRRDtRQUFRO0lBQUk7SUFDM0csT0FBTyxJQUFLSCxDQUFBQSxLQUFNQSxDQUFBQSxJQUFJSyxPQUFNLENBQUMsRUFBRyxTQUFVRCxPQUFPLEVBQUVFLE1BQU07UUFDckQsU0FBU0MsVUFBVUosS0FBSztZQUFJLElBQUk7Z0JBQUVLLEtBQUtQLFVBQVVRLElBQUksQ0FBQ047WUFBUyxFQUFFLE9BQU9PLEdBQUc7Z0JBQUVKLE9BQU9JO1lBQUk7UUFBRTtRQUMxRixTQUFTQyxTQUFTUixLQUFLO1lBQUksSUFBSTtnQkFBRUssS0FBS1AsU0FBUyxDQUFDLFFBQVEsQ0FBQ0U7WUFBUyxFQUFFLE9BQU9PLEdBQUc7Z0JBQUVKLE9BQU9JO1lBQUk7UUFBRTtRQUM3RixTQUFTRixLQUFLSSxNQUFNO1lBQUlBLE9BQU9DLElBQUksR0FBR1QsUUFBUVEsT0FBT1QsS0FBSyxJQUFJRCxNQUFNVSxPQUFPVCxLQUFLLEVBQUVXLElBQUksQ0FBQ1AsV0FBV0k7UUFBVztRQUM3R0gsS0FBSyxDQUFDUCxZQUFZQSxVQUFVYyxLQUFLLENBQUNqQixTQUFTQyxjQUFjLEVBQUUsR0FBR1UsSUFBSTtJQUN0RTtBQUNKO0FBQ0FPLDhDQUE2QztJQUFFYixPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdEZSxtQkFBbUIsR0FBRyxLQUFLO0FBQzNCLFNBQVNFLE9BQU9DLEdBQUc7SUFDZixNQUFNQyxNQUFNLElBQUlDLFlBQVlGLElBQUlHLE1BQU07SUFDdEMsTUFBTUMsVUFBVSxJQUFJQyxXQUFXSjtJQUMvQixJQUFLLElBQUlLLElBQUksR0FBR0MsU0FBU1AsSUFBSUcsTUFBTSxFQUFFRyxJQUFJQyxRQUFRRCxJQUFLO1FBQ2xERixPQUFPLENBQUNFLEVBQUUsR0FBR04sSUFBSVEsVUFBVSxDQUFDRjtJQUNoQztJQUNBLE9BQU9MO0FBQ1g7QUFDQSxTQUFTSCxZQUFZVyxPQUFPLEVBQUVDLE1BQU07SUFDaEMsT0FBT2xDLFVBQVUsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7UUFDbkMsTUFBTW1DLFVBQVUsSUFBSUM7UUFDcEIsSUFBSUYsT0FBT0csUUFBUSxDQUFDLGdCQUFnQjtZQUNoQyxNQUFNQyxZQUFZO1lBQ2xCLE1BQU1DLFlBQVk7WUFDbEIsTUFBTUMsY0FBY04sT0FBT08sU0FBUyxDQUFDSCxVQUFVWCxNQUFNLEVBQUVPLE9BQU9QLE1BQU0sR0FBR1ksVUFBVVosTUFBTTtZQUN2RixNQUFNZSxrQkFBa0JDLFdBQVdDLElBQUksQ0FBQ0o7WUFDeEMsTUFBTUssWUFBWXRCLE9BQU9tQjtZQUN6QixNQUFNSSxNQUFNLE1BQU1ILFdBQVdJLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDQyxTQUFTLENBQUMsU0FBU0osV0FBVztnQkFBRUssTUFBTTtnQkFBcUJDLE1BQU07b0JBQUVELE1BQU07Z0JBQVU7WUFBRSxHQUFHLE9BQU87Z0JBQUM7YUFBTztZQUNsSixNQUFNRSxZQUFZLE1BQU1ULFdBQVdJLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDSyxJQUFJLENBQUMscUJBQXFCUCxLQUFLWCxRQUFRbUIsTUFBTSxDQUFDckI7WUFDL0YsT0FBT3NCLEtBQUtDLE9BQU9DLFlBQVksSUFBSSxJQUFJNUIsV0FBV3VCO1FBQ3REO1FBQ0EsTUFBTU4sTUFBTSxNQUFNSCxXQUFXSSxNQUFNLENBQUNDLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDLE9BQU9kLFFBQVFtQixNQUFNLENBQUNwQixTQUFTO1lBQUVnQixNQUFNO1lBQVFDLE1BQU07Z0JBQUVELE1BQU07WUFBVTtRQUFFLEdBQUcsT0FBTztZQUFDO1NBQU87UUFDaEosTUFBTUUsWUFBWSxNQUFNVCxXQUFXSSxNQUFNLENBQUNDLE1BQU0sQ0FBQ0ssSUFBSSxDQUFDLFFBQVFQLEtBQUtYLFFBQVFtQixNQUFNLENBQUNyQjtRQUNsRixPQUFPeUIsTUFBTUMsU0FBUyxDQUFDQyxHQUFHLENBQ3JCQyxJQUFJLENBQUMsSUFBSWhDLFdBQVd1QixZQUFZLENBQUNVLElBQU0sQ0FBQyxPQUFPQSxFQUFFQyxRQUFRLENBQUMsR0FBRSxFQUFHQyxLQUFLLENBQUMsQ0FBQyxJQUN0RUMsSUFBSSxDQUFDO0lBQ2Q7QUFDSjtBQUNBNUMsbUJBQW1CLEdBQUdDLGFBQ3RCLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vYmluYW5jZUAyLjguMTUvbm9kZV9tb2R1bGVzL2JpbmFuY2UvbGliL3V0aWwvYnJvd3Nlci1zdXBwb3J0LmpzP2NkNWIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2lnbk1lc3NhZ2UgPSB2b2lkIDA7XG5mdW5jdGlvbiBzdHIyYWIoc3RyKSB7XG4gICAgY29uc3QgYnVmID0gbmV3IEFycmF5QnVmZmVyKHN0ci5sZW5ndGgpO1xuICAgIGNvbnN0IGJ1ZlZpZXcgPSBuZXcgVWludDhBcnJheShidWYpO1xuICAgIGZvciAobGV0IGkgPSAwLCBzdHJMZW4gPSBzdHIubGVuZ3RoOyBpIDwgc3RyTGVuOyBpKyspIHtcbiAgICAgICAgYnVmVmlld1tpXSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgIH1cbiAgICByZXR1cm4gYnVmO1xufVxuZnVuY3Rpb24gc2lnbk1lc3NhZ2UobWVzc2FnZSwgc2VjcmV0KSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgY29uc3QgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuICAgICAgICBpZiAoc2VjcmV0LmluY2x1ZGVzKCdQUklWQVRFIEtFWScpKSB7XG4gICAgICAgICAgICBjb25zdCBwZW1IZWFkZXIgPSAnLS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tJztcbiAgICAgICAgICAgIGNvbnN0IHBlbUZvb3RlciA9ICctLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tJztcbiAgICAgICAgICAgIGNvbnN0IHBlbUNvbnRlbnRzID0gc2VjcmV0LnN1YnN0cmluZyhwZW1IZWFkZXIubGVuZ3RoLCBzZWNyZXQubGVuZ3RoIC0gcGVtRm9vdGVyLmxlbmd0aCk7XG4gICAgICAgICAgICBjb25zdCBiaW5hcnlEZXJTdHJpbmcgPSBnbG9iYWxUaGlzLmF0b2IocGVtQ29udGVudHMpO1xuICAgICAgICAgICAgY29uc3QgYmluYXJ5RGVyID0gc3RyMmFiKGJpbmFyeURlclN0cmluZyk7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSB5aWVsZCBnbG9iYWxUaGlzLmNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KCdwa2NzOCcsIGJpbmFyeURlciwgeyBuYW1lOiAnUlNBU1NBLVBLQ1MxLXYxXzUnLCBoYXNoOiB7IG5hbWU6ICdTSEEtMjU2JyB9IH0sIGZhbHNlLCBbJ3NpZ24nXSk7XG4gICAgICAgICAgICBjb25zdCBzaWduYXR1cmUgPSB5aWVsZCBnbG9iYWxUaGlzLmNyeXB0by5zdWJ0bGUuc2lnbignUlNBU1NBLVBLQ1MxLXYxXzUnLCBrZXksIGVuY29kZXIuZW5jb2RlKG1lc3NhZ2UpKTtcbiAgICAgICAgICAgIHJldHVybiBidG9hKFN0cmluZy5mcm9tQ2hhckNvZGUoLi4ubmV3IFVpbnQ4QXJyYXkoc2lnbmF0dXJlKSkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGtleSA9IHlpZWxkIGdsb2JhbFRoaXMuY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoJ3JhdycsIGVuY29kZXIuZW5jb2RlKHNlY3JldCksIHsgbmFtZTogJ0hNQUMnLCBoYXNoOiB7IG5hbWU6ICdTSEEtMjU2JyB9IH0sIGZhbHNlLCBbJ3NpZ24nXSk7XG4gICAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IHlpZWxkIGdsb2JhbFRoaXMuY3J5cHRvLnN1YnRsZS5zaWduKCdITUFDJywga2V5LCBlbmNvZGVyLmVuY29kZShtZXNzYWdlKSk7XG4gICAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUubWFwXG4gICAgICAgICAgICAuY2FsbChuZXcgVWludDhBcnJheShzaWduYXR1cmUpLCAoeCkgPT4gKCcwMCcgKyB4LnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpKVxuICAgICAgICAgICAgLmpvaW4oJycpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5zaWduTWVzc2FnZSA9IHNpZ25NZXNzYWdlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnJvd3Nlci1zdXBwb3J0LmpzLm1hcCJdLCJuYW1lcyI6WyJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJhZG9wdCIsInZhbHVlIiwicmVzb2x2ZSIsIlByb21pc2UiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJzaWduTWVzc2FnZSIsInN0cjJhYiIsInN0ciIsImJ1ZiIsIkFycmF5QnVmZmVyIiwibGVuZ3RoIiwiYnVmVmlldyIsIlVpbnQ4QXJyYXkiLCJpIiwic3RyTGVuIiwiY2hhckNvZGVBdCIsIm1lc3NhZ2UiLCJzZWNyZXQiLCJlbmNvZGVyIiwiVGV4dEVuY29kZXIiLCJpbmNsdWRlcyIsInBlbUhlYWRlciIsInBlbUZvb3RlciIsInBlbUNvbnRlbnRzIiwic3Vic3RyaW5nIiwiYmluYXJ5RGVyU3RyaW5nIiwiZ2xvYmFsVGhpcyIsImF0b2IiLCJiaW5hcnlEZXIiLCJrZXkiLCJjcnlwdG8iLCJzdWJ0bGUiLCJpbXBvcnRLZXkiLCJuYW1lIiwiaGFzaCIsInNpZ25hdHVyZSIsInNpZ24iLCJlbmNvZGUiLCJidG9hIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJtYXAiLCJjYWxsIiwieCIsInRvU3RyaW5nIiwic2xpY2UiLCJqb2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/browser-support.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/node-support.js":
/*!*********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/node-support.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, {\n        enumerable: true,\n        get: function() {\n            return m[k];\n        }\n    });\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (void 0) && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.signMessage = void 0;\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst browserMethods = __importStar(__webpack_require__(/*! ./browser-support */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/browser-support.js\"));\nfunction signMessage(message, secret) {\n    return __awaiter(this, void 0, void 0, function*() {\n        if (secret.includes(\"PRIVATE KEY\") && typeof crypto_1.createSign === \"function\") {\n            return crypto_1.createSign(\"RSA-SHA256\").update(message).sign(secret, \"base64\");\n        }\n        if (typeof crypto_1.createHmac === \"function\") {\n            return crypto_1.createHmac(\"sha256\", secret).update(message).digest(\"hex\");\n        }\n        return browserMethods.signMessage(message, secret);\n    });\n}\nexports.signMessage = signMessage; //# sourceMappingURL=node-support.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JpbmFuY2VAMi44LjE1L25vZGVfbW9kdWxlcy9iaW5hbmNlL2xpYi91dGlsL25vZGUtc3VwcG9ydC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLGtCQUFrQixDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLGVBQWUsSUFBTUMsQ0FBQUEsT0FBT0MsTUFBTSxHQUFJLFNBQVNDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEVBQUU7SUFDMUYsSUFBSUEsT0FBT0MsV0FBV0QsS0FBS0Q7SUFDM0JKLE9BQU9PLGNBQWMsQ0FBQ0wsR0FBR0csSUFBSTtRQUFFRyxZQUFZO1FBQU1DLEtBQUs7WUFBYSxPQUFPTixDQUFDLENBQUNDLEVBQUU7UUFBRTtJQUFFO0FBQ3RGLElBQU0sU0FBU0YsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsRUFBRTtJQUN0QixJQUFJQSxPQUFPQyxXQUFXRCxLQUFLRDtJQUMzQkYsQ0FBQyxDQUFDRyxHQUFHLEdBQUdGLENBQUMsQ0FBQ0MsRUFBRTtBQUNoQixDQUFDO0FBQ0QsSUFBSU0scUJBQXFCLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsa0JBQWtCLElBQU1WLENBQUFBLE9BQU9DLE1BQU0sR0FBSSxTQUFTQyxDQUFDLEVBQUVTLENBQUM7SUFDekZYLE9BQU9PLGNBQWMsQ0FBQ0wsR0FBRyxXQUFXO1FBQUVNLFlBQVk7UUFBTUksT0FBT0Q7SUFBRTtBQUNyRSxJQUFLLFNBQVNULENBQUMsRUFBRVMsQ0FBQztJQUNkVCxDQUFDLENBQUMsVUFBVSxHQUFHUztBQUNuQjtBQUNBLElBQUlFLGVBQWUsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxZQUFZLElBQUssU0FBVUMsR0FBRztJQUMzRCxJQUFJQSxPQUFPQSxJQUFJQyxVQUFVLEVBQUUsT0FBT0Q7SUFDbEMsSUFBSUUsU0FBUyxDQUFDO0lBQ2QsSUFBSUYsT0FBTyxNQUFNO1FBQUEsSUFBSyxJQUFJVixLQUFLVSxJQUFLLElBQUlWLE1BQU0sYUFBYUosT0FBT2lCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNMLEtBQUtWLElBQUlMLGdCQUFnQmlCLFFBQVFGLEtBQUtWO0lBQUU7SUFDeElNLG1CQUFtQk0sUUFBUUY7SUFDM0IsT0FBT0U7QUFDWDtBQUNBLElBQUlJLFlBQVksQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxTQUFTLElBQUssU0FBVUMsT0FBTyxFQUFFQyxVQUFVLEVBQUVDLENBQUMsRUFBRUMsU0FBUztJQUNuRixTQUFTQyxNQUFNYixLQUFLO1FBQUksT0FBT0EsaUJBQWlCVyxJQUFJWCxRQUFRLElBQUlXLEVBQUUsU0FBVUcsT0FBTztZQUFJQSxRQUFRZDtRQUFRO0lBQUk7SUFDM0csT0FBTyxJQUFLVyxDQUFBQSxLQUFNQSxDQUFBQSxJQUFJSSxPQUFNLENBQUMsRUFBRyxTQUFVRCxPQUFPLEVBQUVFLE1BQU07UUFDckQsU0FBU0MsVUFBVWpCLEtBQUs7WUFBSSxJQUFJO2dCQUFFa0IsS0FBS04sVUFBVU8sSUFBSSxDQUFDbkI7WUFBUyxFQUFFLE9BQU9vQixHQUFHO2dCQUFFSixPQUFPSTtZQUFJO1FBQUU7UUFDMUYsU0FBU0MsU0FBU3JCLEtBQUs7WUFBSSxJQUFJO2dCQUFFa0IsS0FBS04sU0FBUyxDQUFDLFFBQVEsQ0FBQ1o7WUFBUyxFQUFFLE9BQU9vQixHQUFHO2dCQUFFSixPQUFPSTtZQUFJO1FBQUU7UUFDN0YsU0FBU0YsS0FBS2QsTUFBTTtZQUFJQSxPQUFPa0IsSUFBSSxHQUFHUixRQUFRVixPQUFPSixLQUFLLElBQUlhLE1BQU1ULE9BQU9KLEtBQUssRUFBRXVCLElBQUksQ0FBQ04sV0FBV0k7UUFBVztRQUM3R0gsS0FBSyxDQUFDTixZQUFZQSxVQUFVWSxLQUFLLENBQUNmLFNBQVNDLGNBQWMsRUFBRSxHQUFHUyxJQUFJO0lBQ3RFO0FBQ0o7QUFDQS9CLDhDQUE2QztJQUFFWSxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdEeUIsbUJBQW1CLEdBQUcsS0FBSztBQUMzQixNQUFNRSxXQUFXQyxtQkFBT0EsQ0FBQyxzQkFBUTtBQUNqQyxNQUFNQyxpQkFBaUI1QixhQUFhMkIsbUJBQU9BLENBQUMseUhBQW1CO0FBQy9ELFNBQVNGLFlBQVlJLE9BQU8sRUFBRUMsTUFBTTtJQUNoQyxPQUFPdkIsVUFBVSxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztRQUNuQyxJQUFJdUIsT0FBT0MsUUFBUSxDQUFDLGtCQUFrQixPQUFPTCxTQUFTTSxVQUFVLEtBQUssWUFBWTtZQUM3RSxPQUFPTixTQUFTTSxVQUFVLENBQUMsY0FBY0MsTUFBTSxDQUFDSixTQUFTSyxJQUFJLENBQUNKLFFBQVE7UUFDMUU7UUFDQSxJQUFJLE9BQU9KLFNBQVNTLFVBQVUsS0FBSyxZQUFZO1lBQzNDLE9BQU9ULFNBQVNTLFVBQVUsQ0FBQyxVQUFVTCxRQUFRRyxNQUFNLENBQUNKLFNBQVNPLE1BQU0sQ0FBQztRQUN4RTtRQUNBLE9BQU9SLGVBQWVILFdBQVcsQ0FBQ0ksU0FBU0M7SUFDL0M7QUFDSjtBQUNBTixtQkFBbUIsR0FBR0MsYUFDdEIsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9iaW5hbmNlQDIuOC4xNS9ub2RlX21vZHVsZXMvYmluYW5jZS9saWIvdXRpbC9ub2RlLXN1cHBvcnQuanM/NzA0NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNpZ25NZXNzYWdlID0gdm9pZCAwO1xuY29uc3QgY3J5cHRvXzEgPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuY29uc3QgYnJvd3Nlck1ldGhvZHMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vYnJvd3Nlci1zdXBwb3J0XCIpKTtcbmZ1bmN0aW9uIHNpZ25NZXNzYWdlKG1lc3NhZ2UsIHNlY3JldCkge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGlmIChzZWNyZXQuaW5jbHVkZXMoJ1BSSVZBVEUgS0VZJykgJiYgdHlwZW9mIGNyeXB0b18xLmNyZWF0ZVNpZ24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBjcnlwdG9fMS5jcmVhdGVTaWduKCdSU0EtU0hBMjU2JykudXBkYXRlKG1lc3NhZ2UpLnNpZ24oc2VjcmV0LCAnYmFzZTY0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBjcnlwdG9fMS5jcmVhdGVIbWFjID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gY3J5cHRvXzEuY3JlYXRlSG1hYygnc2hhMjU2Jywgc2VjcmV0KS51cGRhdGUobWVzc2FnZSkuZGlnZXN0KCdoZXgnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYnJvd3Nlck1ldGhvZHMuc2lnbk1lc3NhZ2UobWVzc2FnZSwgc2VjcmV0KTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuc2lnbk1lc3NhZ2UgPSBzaWduTWVzc2FnZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vZGUtc3VwcG9ydC5qcy5tYXAiXSwibmFtZXMiOlsiX19jcmVhdGVCaW5kaW5nIiwiT2JqZWN0IiwiY3JlYXRlIiwibyIsIm0iLCJrIiwiazIiLCJ1bmRlZmluZWQiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJfX3NldE1vZHVsZURlZmF1bHQiLCJ2IiwidmFsdWUiLCJfX2ltcG9ydFN0YXIiLCJtb2QiLCJfX2VzTW9kdWxlIiwicmVzdWx0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiYWRvcHQiLCJyZXNvbHZlIiwiUHJvbWlzZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwiZG9uZSIsInRoZW4iLCJhcHBseSIsImV4cG9ydHMiLCJzaWduTWVzc2FnZSIsImNyeXB0b18xIiwicmVxdWlyZSIsImJyb3dzZXJNZXRob2RzIiwibWVzc2FnZSIsInNlY3JldCIsImluY2x1ZGVzIiwiY3JlYXRlU2lnbiIsInVwZGF0ZSIsInNpZ24iLCJjcmVhdGVIbWFjIiwiZGlnZXN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/node-support.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/proxy.js":
/*!**************************************************************************************!*\
  !*** ../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/proxy.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getWsProxyAgent = exports.getHttpsProxyAgent = void 0;\n/**\n * Returns an axios & websocket compatible proxy config using brightdata credentials\n */ function getHttpsProxyAgent(host, port, user, pass) {\n    try {\n        // Optional dependency that might be missing\n        const { HttpsProxyAgent } = __webpack_require__(/*! https-proxy-agent */ \"(rsc)/../../node_modules/.pnpm/https-proxy-agent@6.2.1/node_modules/https-proxy-agent/dist/index.js\");\n        const url = `https://${user}:${pass}@${host}:${port}`;\n        return new HttpsProxyAgent(url);\n    } catch (e) {\n        const msg = `Failed to prepare https proxy config - proxy agent dependency not installed`;\n        console.error(new Date(), msg, e);\n        throw new Error(msg);\n    }\n}\nexports.getHttpsProxyAgent = getHttpsProxyAgent;\nfunction getWsProxyAgent(host, port, user, pass) {\n    try {\n        const { SocksProxyAgent } = __webpack_require__(/*! socks-proxy-agent */ \"(rsc)/../../node_modules/.pnpm/socks-proxy-agent@8.0.1/node_modules/socks-proxy-agent/dist/index.js\");\n        const url = `socks://${user}:${pass}@${host}:${port}`;\n        return new SocksProxyAgent(url);\n    } catch (e) {\n        const msg = `Failed to prepare WS proxy config - proxy agent dependency not installed`;\n        console.error(new Date(), msg, e);\n        throw new Error(msg);\n    }\n}\nexports.getWsProxyAgent = getWsProxyAgent; //# sourceMappingURL=proxy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JpbmFuY2VAMi44LjE1L25vZGVfbW9kdWxlcy9iaW5hbmNlL2xpYi91dGlsL3Byb3h5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx1QkFBdUIsR0FBR0EsMEJBQTBCLEdBQUcsS0FBSztBQUM1RDs7Q0FFQyxHQUNELFNBQVNHLG1CQUFtQkMsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsSUFBSTtJQUM5QyxJQUFJO1FBQ0EsNENBQTRDO1FBQzVDLE1BQU0sRUFBRUMsZUFBZSxFQUFFLEdBQUdDLG1CQUFPQSxDQUFDO1FBQ3BDLE1BQU1DLE1BQU0sQ0FBQyxRQUFRLEVBQUVKLEtBQUssQ0FBQyxFQUFFQyxLQUFLLENBQUMsRUFBRUgsS0FBSyxDQUFDLEVBQUVDLEtBQUssQ0FBQztRQUNyRCxPQUFPLElBQUlHLGdCQUFnQkU7SUFDL0IsRUFDQSxPQUFPQyxHQUFHO1FBQ04sTUFBTUMsTUFBTSxDQUFDLDJFQUEyRSxDQUFDO1FBQ3pGQyxRQUFRQyxLQUFLLENBQUMsSUFBSUMsUUFBUUgsS0FBS0Q7UUFDL0IsTUFBTSxJQUFJSyxNQUFNSjtJQUNwQjtBQUNKO0FBQ0FaLDBCQUEwQixHQUFHRztBQUM3QixTQUFTRCxnQkFBZ0JFLElBQUksRUFBRUMsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLElBQUk7SUFDM0MsSUFBSTtRQUNBLE1BQU0sRUFBRVUsZUFBZSxFQUFFLEdBQUdSLG1CQUFPQSxDQUFDO1FBQ3BDLE1BQU1DLE1BQU0sQ0FBQyxRQUFRLEVBQUVKLEtBQUssQ0FBQyxFQUFFQyxLQUFLLENBQUMsRUFBRUgsS0FBSyxDQUFDLEVBQUVDLEtBQUssQ0FBQztRQUNyRCxPQUFPLElBQUlZLGdCQUFnQlA7SUFDL0IsRUFDQSxPQUFPQyxHQUFHO1FBQ04sTUFBTUMsTUFBTSxDQUFDLHdFQUF3RSxDQUFDO1FBQ3RGQyxRQUFRQyxLQUFLLENBQUMsSUFBSUMsUUFBUUgsS0FBS0Q7UUFDL0IsTUFBTSxJQUFJSyxNQUFNSjtJQUNwQjtBQUNKO0FBQ0FaLHVCQUF1QixHQUFHRSxpQkFDMUIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9iaW5hbmNlQDIuOC4xNS9ub2RlX21vZHVsZXMvYmluYW5jZS9saWIvdXRpbC9wcm94eS5qcz83NzM4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRXc1Byb3h5QWdlbnQgPSBleHBvcnRzLmdldEh0dHBzUHJveHlBZ2VudCA9IHZvaWQgMDtcbi8qKlxuICogUmV0dXJucyBhbiBheGlvcyAmIHdlYnNvY2tldCBjb21wYXRpYmxlIHByb3h5IGNvbmZpZyB1c2luZyBicmlnaHRkYXRhIGNyZWRlbnRpYWxzXG4gKi9cbmZ1bmN0aW9uIGdldEh0dHBzUHJveHlBZ2VudChob3N0LCBwb3J0LCB1c2VyLCBwYXNzKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gT3B0aW9uYWwgZGVwZW5kZW5jeSB0aGF0IG1pZ2h0IGJlIG1pc3NpbmdcbiAgICAgICAgY29uc3QgeyBIdHRwc1Byb3h5QWdlbnQgfSA9IHJlcXVpcmUoJ2h0dHBzLXByb3h5LWFnZW50Jyk7XG4gICAgICAgIGNvbnN0IHVybCA9IGBodHRwczovLyR7dXNlcn06JHtwYXNzfUAke2hvc3R9OiR7cG9ydH1gO1xuICAgICAgICByZXR1cm4gbmV3IEh0dHBzUHJveHlBZ2VudCh1cmwpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICBjb25zdCBtc2cgPSBgRmFpbGVkIHRvIHByZXBhcmUgaHR0cHMgcHJveHkgY29uZmlnIC0gcHJveHkgYWdlbnQgZGVwZW5kZW5jeSBub3QgaW5zdGFsbGVkYDtcbiAgICAgICAgY29uc29sZS5lcnJvcihuZXcgRGF0ZSgpLCBtc2csIGUpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG59XG5leHBvcnRzLmdldEh0dHBzUHJveHlBZ2VudCA9IGdldEh0dHBzUHJveHlBZ2VudDtcbmZ1bmN0aW9uIGdldFdzUHJveHlBZ2VudChob3N0LCBwb3J0LCB1c2VyLCBwYXNzKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgeyBTb2Nrc1Byb3h5QWdlbnQgfSA9IHJlcXVpcmUoJ3NvY2tzLXByb3h5LWFnZW50Jyk7XG4gICAgICAgIGNvbnN0IHVybCA9IGBzb2NrczovLyR7dXNlcn06JHtwYXNzfUAke2hvc3R9OiR7cG9ydH1gO1xuICAgICAgICByZXR1cm4gbmV3IFNvY2tzUHJveHlBZ2VudCh1cmwpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICBjb25zdCBtc2cgPSBgRmFpbGVkIHRvIHByZXBhcmUgV1MgcHJveHkgY29uZmlnIC0gcHJveHkgYWdlbnQgZGVwZW5kZW5jeSBub3QgaW5zdGFsbGVkYDtcbiAgICAgICAgY29uc29sZS5lcnJvcihuZXcgRGF0ZSgpLCBtc2csIGUpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG59XG5leHBvcnRzLmdldFdzUHJveHlBZ2VudCA9IGdldFdzUHJveHlBZ2VudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3h5LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldFdzUHJveHlBZ2VudCIsImdldEh0dHBzUHJveHlBZ2VudCIsImhvc3QiLCJwb3J0IiwidXNlciIsInBhc3MiLCJIdHRwc1Byb3h5QWdlbnQiLCJyZXF1aXJlIiwidXJsIiwiZSIsIm1zZyIsImNvbnNvbGUiLCJlcnJvciIsIkRhdGUiLCJFcnJvciIsIlNvY2tzUHJveHlBZ2VudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/proxy.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/requestUtils.js":
/*!*********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/requestUtils.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __awaiter = (void 0) && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.asArray = exports.appendEventMarket = exports.getWsKeyWithContext = exports.getContextFromWsKey = exports.appendEventIfMissing = exports.logInvalidOrderId = exports.isWsPong = exports.isPublicEndpoint = exports.getRestBaseUrl = exports.getServerTimeEndpoint = exports.getRequestSignature = exports.serialiseParams = exports.generateNewOrderId = exports.getOrderIdPrefix = void 0;\nconst node_support_1 = __webpack_require__(/*! ./node-support */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/node-support.js\");\nconst nanoid_1 = __webpack_require__(/*! nanoid */ \"(rsc)/../../node_modules/.pnpm/nanoid@3.3.7/node_modules/nanoid/index.cjs\");\nfunction getOrderIdPrefix(network) {\n    switch(network){\n        case \"spot\":\n        case \"spot1\":\n        case \"spot2\":\n        case \"spot3\":\n        case \"spot4\":\n        default:\n            return \"U5D79M5B\";\n        case \"usdm\":\n        case \"usdmtest\":\n        case \"coinm\":\n        case \"coinmtest\":\n            return \"15PC4ZJy\";\n        case \"voptions\":\n        case \"voptionstest\":\n            return \"\";\n    }\n}\nexports.getOrderIdPrefix = getOrderIdPrefix;\nfunction generateNewOrderId(network) {\n    const id = nanoid_1.nanoid(25);\n    const prefixedId = \"x-\" + getOrderIdPrefix(network) + id;\n    return prefixedId;\n}\nexports.generateNewOrderId = generateNewOrderId;\nfunction serialiseParams(params = {}, strict_validation = false, encodeValues = false, filterUndefinedParams = false) {\n    const paramKeys = !filterUndefinedParams ? Object.keys(params) : Object.keys(params).filter((key)=>typeof params[key] !== \"undefined\");\n    return paramKeys.map((key)=>{\n        const value = params[key];\n        if (strict_validation === true && typeof value === \"undefined\") {\n            throw new Error(\"Failed to sign API request due to undefined parameter\");\n        }\n        const encodedValue = encodeValues ? encodeURIComponent(value) : value;\n        return `${key}=${encodedValue}`;\n    }).join(\"&\");\n}\nexports.serialiseParams = serialiseParams;\nfunction getRequestSignature(data, key, secret, recvWindow, timestamp, strictParamValidation, filterUndefinedParams) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function*() {\n        // Optional, set to 5000 by default. Increase if timestamp/recvWindow errors are seen.\n        const requestRecvWindow = (_b = (_a = data === null || data === void 0 ? void 0 : data.recvWindow) !== null && _a !== void 0 ? _a : recvWindow) !== null && _b !== void 0 ? _b : 5000;\n        if (key && secret) {\n            const requestParams = Object.assign(Object.assign({}, data), {\n                timestamp,\n                recvWindow: requestRecvWindow\n            });\n            const serialisedParams = serialiseParams(requestParams, strictParamValidation, true, filterUndefinedParams);\n            const signature = yield node_support_1.signMessage(serialisedParams, secret);\n            requestParams.signature = signature;\n            return {\n                requestBody: Object.assign({}, data),\n                serialisedParams,\n                timestamp: timestamp,\n                signature: signature,\n                recvWindow: requestRecvWindow\n            };\n        }\n        return {\n            requestBody: data,\n            serialisedParams: undefined\n        };\n    });\n}\nexports.getRequestSignature = getRequestSignature;\nconst BINANCE_BASE_URLS = {\n    // spot/margin/savings/mining\n    spot: \"https://api.binance.com\",\n    spot1: \"https://api.binance.com\",\n    spot2: \"https://api1.binance.com\",\n    spot3: \"https://api2.binance.com\",\n    spot4: \"https://api3.binance.com\",\n    // USDM Futures\n    usdm: \"https://fapi.binance.com\",\n    usdmtest: \"https://testnet.binancefuture.com\",\n    // COINM Futures\n    coinm: \"https://dapi.binance.com\",\n    coinmtest: \"https://testnet.binancefuture.com\",\n    // Vanilla Options\n    voptions: \"https://vapi.binance.com\",\n    voptionstest: \"https://testnet.binanceops.com\"\n};\nfunction getServerTimeEndpoint(urlKey) {\n    switch(urlKey){\n        case \"spot\":\n        case \"spot1\":\n        case \"spot2\":\n        case \"spot3\":\n        case \"spot4\":\n        default:\n            return \"api/v3/time\";\n        case \"usdm\":\n        case \"usdmtest\":\n            return \"fapi/v1/time\";\n        case \"coinm\":\n        case \"coinmtest\":\n            return \"dapi/v1/time\";\n        case \"voptions\":\n        case \"voptionstest\":\n            return \"vapi/v1/time\";\n    }\n}\nexports.getServerTimeEndpoint = getServerTimeEndpoint;\nfunction getRestBaseUrl(clientType, restInverseOptions) {\n    if (restInverseOptions.baseUrl) {\n        return restInverseOptions.baseUrl;\n    }\n    if (restInverseOptions.baseUrlKey) {\n        return BINANCE_BASE_URLS[restInverseOptions.baseUrlKey];\n    }\n    return BINANCE_BASE_URLS[clientType];\n}\nexports.getRestBaseUrl = getRestBaseUrl;\nfunction isPublicEndpoint(endpoint) {\n    if (endpoint.startsWith(\"v2/public\")) {\n        return true;\n    }\n    if (endpoint.startsWith(\"public/linear\")) {\n        return true;\n    }\n    return false;\n}\nexports.isPublicEndpoint = isPublicEndpoint;\nfunction isWsPong(response) {\n    return response.request && response.request.op === \"ping\" && response.ret_msg === \"pong\" && response.success === true;\n}\nexports.isWsPong = isWsPong;\nfunction logInvalidOrderId(orderIdProperty, expectedOrderIdPrefix, params) {\n    console.warn(`WARNING: '${orderIdProperty}' invalid - it should be prefixed with ${expectedOrderIdPrefix}. Use the 'client.generateNewOrderId()' REST client utility method to generate a fresh order ID on demand. Original request: ${JSON.stringify(params)}`);\n}\nexports.logInvalidOrderId = logInvalidOrderId;\nfunction appendEventIfMissing(wsMsg, wsKey) {\n    if (wsMsg.e) {\n        return;\n    }\n    if (wsKey.indexOf(\"bookTicker\") !== -1) {\n        wsMsg.e = \"bookTicker\";\n        return;\n    }\n    if (wsKey.indexOf(\"diffBookDepth\") !== -1) {\n        wsMsg.e = \"diffBookDepth\";\n        return;\n    }\n    if (wsKey.indexOf(\"partialBookDepth\") !== -1 || wsKey.indexOf(\"depth\") !== -1) {\n        wsMsg.e = \"partialBookDepth\";\n        return;\n    }\n// console.warn('couldnt derive event type: ', wsKey);\n}\nexports.appendEventIfMissing = appendEventIfMissing;\nfunction getContextFromWsKey(wsKey) {\n    const [market, streamName, symbol, listenKey, ...otherParams] = wsKey.split(\"_\");\n    return {\n        symbol: symbol === \"undefined\" ? undefined : symbol,\n        market: market,\n        isTestnet: market.includes(\"estnet\"),\n        isUserData: wsKey.includes(\"userData\"),\n        streamName,\n        listenKey: listenKey === \"undefined\" ? undefined : listenKey,\n        otherParams\n    };\n}\nexports.getContextFromWsKey = getContextFromWsKey;\nfunction getWsKeyWithContext(market, streamName, symbol = undefined, listenKey = undefined, ...otherParams) {\n    return [\n        market,\n        streamName,\n        symbol,\n        listenKey,\n        ...otherParams\n    ].join(\"_\");\n}\nexports.getWsKeyWithContext = getWsKeyWithContext;\nfunction appendEventMarket(wsMsg, wsKey) {\n    const { market } = getContextFromWsKey(wsKey);\n    wsMsg.wsMarket = market;\n    wsMsg.wsKey = wsKey;\n}\nexports.appendEventMarket = appendEventMarket;\nfunction asArray(el) {\n    return Array.isArray(el) ? el : [\n        el\n    ];\n}\nexports.asArray = asArray; //# sourceMappingURL=requestUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/requestUtils.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/typeGuards.js":
/*!*******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/typeGuards.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isAccountUpdateRaw = exports.isAccountConfigUpdateRaw = exports.isOrderTradeUpdateRaw = exports.isKlineRaw = exports.is24hrMiniTickerRaw = exports.isAllRollingWindowTickerRaw = exports.isAll24hrMiniTickerRaw = exports.isWsFormattedFuturesUserDataListenKeyExpired = exports.isWsFormattedFuturesUserDataAccountConfigUpdateEvent = exports.isWsFormattedFuturesUserDataCondOrderTriggerRejectEvent = exports.isWsFormattedFuturesUserDataTradeUpdateEvent = exports.isWsFormattedFuturesUserDataMarginCall = exports.isWsFormattedFuturesUserDataAccountUpdate = exports.isWsFormattedSpotUserDataListStatusEvent = exports.isWsFormattedSpotBalanceUpdate = exports.isWsFormattedSpotOutboundAccountPosition = exports.isWsFormattedSpotUserDataExecutionReport = exports.isWsFormattedFuturesUserDataEvent = exports.isWsFormattedSpotUserDataEvent = exports.isWsFormattedUserDataEvent = exports.isWsAggTradeFormatted = exports.isWsFormattedRollingWindowTickerArray = exports.isWsFormatted24hrTickerArray = exports.isWsFormattedForceOrder = exports.isWsFormatted24hrTicker = exports.isWsFormattedKline = exports.isWsFormattedTrade = exports.isWsFormattedMarkPriceUpdate = exports.isWsFormattedMarkPriceUpdateArray = exports.isWsFormattedMarkPriceUpdateEvent = void 0;\n/**\n * Use type guards to narrow down types with minimal efforts.\n *\n * The file is organised by Typeguards starting with `WsFormattedMessage` typeguards in the first half\n * and `WsRawMessage` typeguards in the second half.\n *\n */ /**\n * Typeguards for WsFormattedMessage event types:\n */ function isWsFormattedMarkPriceUpdateEvent(data) {\n    return !Array.isArray(data) && data.eventType === \"markPriceUpdate\";\n}\nexports.isWsFormattedMarkPriceUpdateEvent = isWsFormattedMarkPriceUpdateEvent;\nfunction isWsFormattedMarkPriceUpdateArray(data) {\n    return Array.isArray(data) && data.length !== 0 && data[0].eventType === \"markPriceUpdate\";\n}\nexports.isWsFormattedMarkPriceUpdateArray = isWsFormattedMarkPriceUpdateArray;\n/** @deprecated, use isWsFormattedMarkPriceUpdateEvent or isWsFormattedMarkPriceUpdateArray */ function isWsFormattedMarkPriceUpdate(data) {\n    return isWsFormattedMarkPriceUpdateArray(data);\n}\nexports.isWsFormattedMarkPriceUpdate = isWsFormattedMarkPriceUpdate;\nfunction isWsFormattedTrade(data) {\n    return !Array.isArray(data) && data.eventType === \"trade\";\n}\nexports.isWsFormattedTrade = isWsFormattedTrade;\nfunction isWsFormattedKline(data) {\n    return !Array.isArray(data) && data.eventType === \"kline\";\n}\nexports.isWsFormattedKline = isWsFormattedKline;\nfunction isWsFormatted24hrTicker(data) {\n    return !Array.isArray(data) && data.eventType === \"24hrTicker\";\n}\nexports.isWsFormatted24hrTicker = isWsFormatted24hrTicker;\nfunction isWsFormattedForceOrder(data) {\n    return !Array.isArray(data) && data.eventType === \"forceOrder\";\n}\nexports.isWsFormattedForceOrder = isWsFormattedForceOrder;\nfunction isWsFormatted24hrTickerArray(data) {\n    return Array.isArray(data) && data.length !== 0 && data[0].eventType === \"24hrTicker\";\n}\nexports.isWsFormatted24hrTickerArray = isWsFormatted24hrTickerArray;\nfunction isWsFormattedRollingWindowTickerArray(data) {\n    return Array.isArray(data) && data.length !== 0 && [\n        \"1hTicker\",\n        \"4hTicker\",\n        \"1dTicker\"\n    ].includes(data[0].eventType);\n}\nexports.isWsFormattedRollingWindowTickerArray = isWsFormattedRollingWindowTickerArray;\n/**\n * Typeguard to validate a 'Compressed/Aggregate' trade\n */ function isWsAggTradeFormatted(data) {\n    return !Array.isArray(data) && data.eventType === \"aggTrade\";\n}\nexports.isWsAggTradeFormatted = isWsAggTradeFormatted;\nfunction isWsFormattedUserDataEvent(data) {\n    return !Array.isArray(data) && data.wsKey.includes(\"userData\");\n}\nexports.isWsFormattedUserDataEvent = isWsFormattedUserDataEvent;\nfunction isWsFormattedSpotUserDataEvent(data) {\n    return isWsFormattedUserDataEvent(data) && data.wsMarket.includes(\"spot\");\n}\nexports.isWsFormattedSpotUserDataEvent = isWsFormattedSpotUserDataEvent;\nfunction isWsFormattedFuturesUserDataEvent(data) {\n    return isWsFormattedUserDataEvent(data) && data.wsMarket.includes(\"usdm\");\n}\nexports.isWsFormattedFuturesUserDataEvent = isWsFormattedFuturesUserDataEvent;\nfunction isWsFormattedSpotUserDataExecutionReport(data) {\n    return isWsFormattedSpotUserDataEvent(data) && data.eventType === \"executionReport\";\n}\nexports.isWsFormattedSpotUserDataExecutionReport = isWsFormattedSpotUserDataExecutionReport;\nfunction isWsFormattedSpotOutboundAccountPosition(data) {\n    return isWsFormattedSpotUserDataEvent(data) && data.eventType === \"outboundAccountPosition\";\n}\nexports.isWsFormattedSpotOutboundAccountPosition = isWsFormattedSpotOutboundAccountPosition;\nfunction isWsFormattedSpotBalanceUpdate(data) {\n    return isWsFormattedSpotUserDataEvent(data) && data.eventType === \"balanceUpdate\";\n}\nexports.isWsFormattedSpotBalanceUpdate = isWsFormattedSpotBalanceUpdate;\nfunction isWsFormattedSpotUserDataListStatusEvent(data) {\n    return isWsFormattedSpotUserDataEvent(data) && data.eventType === \"listStatus\";\n}\nexports.isWsFormattedSpotUserDataListStatusEvent = isWsFormattedSpotUserDataListStatusEvent;\nfunction isWsFormattedFuturesUserDataAccountUpdate(data) {\n    return isWsFormattedFuturesUserDataEvent(data) && data.eventType === \"ACCOUNT_UPDATE\";\n}\nexports.isWsFormattedFuturesUserDataAccountUpdate = isWsFormattedFuturesUserDataAccountUpdate;\nfunction isWsFormattedFuturesUserDataMarginCall(data) {\n    return isWsFormattedFuturesUserDataEvent(data) && data.eventType === \"MARGIN_CALL\";\n}\nexports.isWsFormattedFuturesUserDataMarginCall = isWsFormattedFuturesUserDataMarginCall;\nfunction isWsFormattedFuturesUserDataTradeUpdateEvent(data) {\n    return isWsFormattedFuturesUserDataEvent(data) && data.eventType === \"ORDER_TRADE_UPDATE\";\n}\nexports.isWsFormattedFuturesUserDataTradeUpdateEvent = isWsFormattedFuturesUserDataTradeUpdateEvent;\nfunction isWsFormattedFuturesUserDataCondOrderTriggerRejectEvent(data) {\n    return isWsFormattedFuturesUserDataEvent(data) && data.eventType === \"CONDITIONAL_ORDER_TRIGGER_REJECT\";\n}\nexports.isWsFormattedFuturesUserDataCondOrderTriggerRejectEvent = isWsFormattedFuturesUserDataCondOrderTriggerRejectEvent;\nfunction isWsFormattedFuturesUserDataAccountConfigUpdateEvent(data) {\n    return isWsFormattedFuturesUserDataEvent(data) && data.eventType === \"ACCOUNT_CONFIG_UPDATE\";\n}\nexports.isWsFormattedFuturesUserDataAccountConfigUpdateEvent = isWsFormattedFuturesUserDataAccountConfigUpdateEvent;\nfunction isWsFormattedFuturesUserDataListenKeyExpired(data) {\n    return isWsFormattedFuturesUserDataEvent(data) && data.eventType === \"listenKeyExpired\";\n}\nexports.isWsFormattedFuturesUserDataListenKeyExpired = isWsFormattedFuturesUserDataListenKeyExpired;\n/**\n * Typeguards for WsRawMessage event types:\n */ /**\n * Typeguard to validate all symbol 24hrMiniTicker raw event\n */ function isAll24hrMiniTickerRaw(data) {\n    return Array.isArray(data) && data[0].e === \"24hrMiniTicker\";\n}\nexports.isAll24hrMiniTickerRaw = isAll24hrMiniTickerRaw;\nfunction isAllRollingWindowTickerRaw(data) {\n    return Array.isArray(data) && [\n        \"1hTicker\",\n        \"4hTicker\",\n        \"1dTicker\"\n    ].includes(data[0].e);\n}\nexports.isAllRollingWindowTickerRaw = isAllRollingWindowTickerRaw;\n/**\n * Typeguard to validate a single 24hrMiniTicker raw event\n */ function is24hrMiniTickerRaw(data) {\n    return !Array.isArray(data) && data.e === \"24hrMiniTicker\";\n}\nexports.is24hrMiniTickerRaw = is24hrMiniTickerRaw;\n/**\n * Typeguard to validate a single kline raw event\n */ function isKlineRaw(data) {\n    return !Array.isArray(data) && data.e === \"kline\";\n}\nexports.isKlineRaw = isKlineRaw;\n/**\n * Typeguard to validate a single ORDER_TRADE_UPDATE raw event\n */ function isOrderTradeUpdateRaw(data) {\n    return !Array.isArray(data) && data.e === \"ORDER_TRADE_UPDATE\";\n}\nexports.isOrderTradeUpdateRaw = isOrderTradeUpdateRaw;\n/**\n * Typeguard to validate a single ACCOUNT_CONFIG_UPDATE raw event\n */ function isAccountConfigUpdateRaw(data) {\n    return !Array.isArray(data) && data.e === \"ACCOUNT_CONFIG_UPDATE\";\n}\nexports.isAccountConfigUpdateRaw = isAccountConfigUpdateRaw;\n/**\n * Typeguard to validate a single ACCOUNT_UPDATE raw event\n */ function isAccountUpdateRaw(data) {\n    return !Array.isArray(data) && data.e === \"ACCOUNT_UPDATE\";\n}\nexports.isAccountUpdateRaw = isAccountUpdateRaw; //# sourceMappingURL=typeGuards.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/typeGuards.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/usdm/exchangeInfo.js":
/*!**************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/usdm/exchangeInfo.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getUSDMFuturesMinNotionalSymbolMap = exports.getUSDMFuturesSymbolMinNotional = void 0;\n/** Get min notional filter for a USDM futures symbol */ function getUSDMFuturesSymbolMinNotional(exchangeInfo, symbol) {\n    const specs = exchangeInfo.symbols.find((sym)=>sym.symbol === symbol);\n    if (!specs) {\n        return null;\n    }\n    const filterType = \"MIN_NOTIONAL\";\n    const filter = specs.filters.find((filter)=>filter.filterType === filterType);\n    if (!filter) {\n        return null;\n    }\n    return Number(filter.notional);\n}\nexports.getUSDMFuturesSymbolMinNotional = getUSDMFuturesSymbolMinNotional;\n/** Returns an object where keys are USDM Futures symbols and values are min notionals for that symbol */ function getUSDMFuturesMinNotionalSymbolMap(exchangeInfo) {\n    const minNotionals = exchangeInfo.symbols.reduce((res, spec)=>{\n        const filter = spec.filters.find((filter)=>filter.filterType === \"MIN_NOTIONAL\");\n        if (filter) {\n            res[spec.symbol] = filter.notional;\n        }\n        return res;\n    }, {});\n    return minNotionals;\n}\nexports.getUSDMFuturesMinNotionalSymbolMap = getUSDMFuturesMinNotionalSymbolMap; //# sourceMappingURL=exchangeInfo.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JpbmFuY2VAMi44LjE1L25vZGVfbW9kdWxlcy9iaW5hbmNlL2xpYi91dGlsL3VzZG0vZXhjaGFuZ2VJbmZvLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCwwQ0FBMEMsR0FBR0EsdUNBQXVDLEdBQUcsS0FBSztBQUM1RixzREFBc0QsR0FDdEQsU0FBU0csZ0NBQWdDQyxZQUFZLEVBQUVDLE1BQU07SUFDekQsTUFBTUMsUUFBUUYsYUFBYUcsT0FBTyxDQUFDQyxJQUFJLENBQUMsQ0FBQ0MsTUFBUUEsSUFBSUosTUFBTSxLQUFLQTtJQUNoRSxJQUFJLENBQUNDLE9BQU87UUFDUixPQUFPO0lBQ1g7SUFDQSxNQUFNSSxhQUFhO0lBQ25CLE1BQU1DLFNBQVNMLE1BQU1NLE9BQU8sQ0FBQ0osSUFBSSxDQUFDLENBQUNHLFNBQVdBLE9BQU9ELFVBQVUsS0FBS0E7SUFDcEUsSUFBSSxDQUFDQyxRQUFRO1FBQ1QsT0FBTztJQUNYO0lBQ0EsT0FBT0UsT0FBT0YsT0FBT0csUUFBUTtBQUNqQztBQUNBZCx1Q0FBdUMsR0FBR0c7QUFDMUMsdUdBQXVHLEdBQ3ZHLFNBQVNELG1DQUFtQ0UsWUFBWTtJQUNwRCxNQUFNVyxlQUFlWCxhQUFhRyxPQUFPLENBQUNTLE1BQU0sQ0FBQyxDQUFDQyxLQUFLQztRQUNuRCxNQUFNUCxTQUFTTyxLQUFLTixPQUFPLENBQUNKLElBQUksQ0FBQyxDQUFDRyxTQUFXQSxPQUFPRCxVQUFVLEtBQUs7UUFDbkUsSUFBSUMsUUFBUTtZQUNSTSxHQUFHLENBQUNDLEtBQUtiLE1BQU0sQ0FBQyxHQUFHTSxPQUFPRyxRQUFRO1FBQ3RDO1FBQ0EsT0FBT0c7SUFDWCxHQUFHLENBQUM7SUFDSixPQUFPRjtBQUNYO0FBQ0FmLDBDQUEwQyxHQUFHRSxvQ0FDN0Msd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9iaW5hbmNlQDIuOC4xNS9ub2RlX21vZHVsZXMvYmluYW5jZS9saWIvdXRpbC91c2RtL2V4Y2hhbmdlSW5mby5qcz84NTk0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRVU0RNRnV0dXJlc01pbk5vdGlvbmFsU3ltYm9sTWFwID0gZXhwb3J0cy5nZXRVU0RNRnV0dXJlc1N5bWJvbE1pbk5vdGlvbmFsID0gdm9pZCAwO1xuLyoqIEdldCBtaW4gbm90aW9uYWwgZmlsdGVyIGZvciBhIFVTRE0gZnV0dXJlcyBzeW1ib2wgKi9cbmZ1bmN0aW9uIGdldFVTRE1GdXR1cmVzU3ltYm9sTWluTm90aW9uYWwoZXhjaGFuZ2VJbmZvLCBzeW1ib2wpIHtcbiAgICBjb25zdCBzcGVjcyA9IGV4Y2hhbmdlSW5mby5zeW1ib2xzLmZpbmQoKHN5bSkgPT4gc3ltLnN5bWJvbCA9PT0gc3ltYm9sKTtcbiAgICBpZiAoIXNwZWNzKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBmaWx0ZXJUeXBlID0gJ01JTl9OT1RJT05BTCc7XG4gICAgY29uc3QgZmlsdGVyID0gc3BlY3MuZmlsdGVycy5maW5kKChmaWx0ZXIpID0+IGZpbHRlci5maWx0ZXJUeXBlID09PSBmaWx0ZXJUeXBlKTtcbiAgICBpZiAoIWZpbHRlcikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIE51bWJlcihmaWx0ZXIubm90aW9uYWwpO1xufVxuZXhwb3J0cy5nZXRVU0RNRnV0dXJlc1N5bWJvbE1pbk5vdGlvbmFsID0gZ2V0VVNETUZ1dHVyZXNTeW1ib2xNaW5Ob3Rpb25hbDtcbi8qKiBSZXR1cm5zIGFuIG9iamVjdCB3aGVyZSBrZXlzIGFyZSBVU0RNIEZ1dHVyZXMgc3ltYm9scyBhbmQgdmFsdWVzIGFyZSBtaW4gbm90aW9uYWxzIGZvciB0aGF0IHN5bWJvbCAqL1xuZnVuY3Rpb24gZ2V0VVNETUZ1dHVyZXNNaW5Ob3Rpb25hbFN5bWJvbE1hcChleGNoYW5nZUluZm8pIHtcbiAgICBjb25zdCBtaW5Ob3Rpb25hbHMgPSBleGNoYW5nZUluZm8uc3ltYm9scy5yZWR1Y2UoKHJlcywgc3BlYykgPT4ge1xuICAgICAgICBjb25zdCBmaWx0ZXIgPSBzcGVjLmZpbHRlcnMuZmluZCgoZmlsdGVyKSA9PiBmaWx0ZXIuZmlsdGVyVHlwZSA9PT0gJ01JTl9OT1RJT05BTCcpO1xuICAgICAgICBpZiAoZmlsdGVyKSB7XG4gICAgICAgICAgICByZXNbc3BlYy5zeW1ib2xdID0gZmlsdGVyLm5vdGlvbmFsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfSwge30pO1xuICAgIHJldHVybiBtaW5Ob3Rpb25hbHM7XG59XG5leHBvcnRzLmdldFVTRE1GdXR1cmVzTWluTm90aW9uYWxTeW1ib2xNYXAgPSBnZXRVU0RNRnV0dXJlc01pbk5vdGlvbmFsU3ltYm9sTWFwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhjaGFuZ2VJbmZvLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldFVTRE1GdXR1cmVzTWluTm90aW9uYWxTeW1ib2xNYXAiLCJnZXRVU0RNRnV0dXJlc1N5bWJvbE1pbk5vdGlvbmFsIiwiZXhjaGFuZ2VJbmZvIiwic3ltYm9sIiwic3BlY3MiLCJzeW1ib2xzIiwiZmluZCIsInN5bSIsImZpbHRlclR5cGUiLCJmaWx0ZXIiLCJmaWx0ZXJzIiwiTnVtYmVyIiwibm90aW9uYWwiLCJtaW5Ob3Rpb25hbHMiLCJyZWR1Y2UiLCJyZXMiLCJzcGVjIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/usdm/exchangeInfo.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/usdm/index.js":
/*!*******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/usdm/index.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, {\n        enumerable: true,\n        get: function() {\n            return m[k];\n        }\n    });\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n__exportStar(__webpack_require__(/*! ./exchangeInfo */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/usdm/exchangeInfo.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JpbmFuY2VAMi44LjE1L25vZGVfbW9kdWxlcy9iaW5hbmNlL2xpYi91dGlsL3VzZG0vaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxrQkFBa0IsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxlQUFlLElBQU1DLENBQUFBLE9BQU9DLE1BQU0sR0FBSSxTQUFTQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQzFGLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCSixPQUFPTyxjQUFjLENBQUNMLEdBQUdHLElBQUk7UUFBRUcsWUFBWTtRQUFNQyxLQUFLO1lBQWEsT0FBT04sQ0FBQyxDQUFDQyxFQUFFO1FBQUU7SUFBRTtBQUN0RixJQUFNLFNBQVNGLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEVBQUU7SUFDdEIsSUFBSUEsT0FBT0MsV0FBV0QsS0FBS0Q7SUFDM0JGLENBQUMsQ0FBQ0csR0FBRyxHQUFHRixDQUFDLENBQUNDLEVBQUU7QUFDaEIsQ0FBQztBQUNELElBQUlNLGVBQWUsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxZQUFZLElBQUssU0FBU1AsQ0FBQyxFQUFFUSxRQUFPO0lBQ2pFLElBQUssSUFBSUMsS0FBS1QsRUFBRyxJQUFJUyxNQUFNLGFBQWEsQ0FBQ1osT0FBT2EsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ0osVUFBU0MsSUFBSWIsZ0JBQWdCWSxVQUFTUixHQUFHUztBQUMzSDtBQUNBWiw4Q0FBNkM7SUFBRWdCLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0ROLGFBQWFPLG1CQUFPQSxDQUFDLHdIQUFnQixHQUFHTixVQUN4QyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JpbmFuY2VAMi44LjE1L25vZGVfbW9kdWxlcy9iaW5hbmNlL2xpYi91dGlsL3VzZG0vaW5kZXguanM/Mzk1NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2V4Y2hhbmdlSW5mb1wiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiX19jcmVhdGVCaW5kaW5nIiwiT2JqZWN0IiwiY3JlYXRlIiwibyIsIm0iLCJrIiwiazIiLCJ1bmRlZmluZWQiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJfX2V4cG9ydFN0YXIiLCJleHBvcnRzIiwicCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInZhbHVlIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/usdm/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/ws-utils.js":
/*!*****************************************************************************************!*\
  !*** ../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/ws-utils.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.safeTerminateWs = void 0;\n/**\n * #168: ws.terminate() is undefined in browsers.\n * This only works in node.js, not in browsers.\n * Does nothing if `ws` is undefined.\n */ function safeTerminateWs(ws) {\n    // #168: ws.terminate() undefined in browsers\n    if (typeof (ws === null || ws === void 0 ? void 0 : ws.terminate) === \"function\" && ws) {\n        ws.terminate();\n    }\n}\nexports.safeTerminateWs = safeTerminateWs; //# sourceMappingURL=ws-utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JpbmFuY2VAMi44LjE1L25vZGVfbW9kdWxlcy9iaW5hbmNlL2xpYi91dGlsL3dzLXV0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx1QkFBdUIsR0FBRyxLQUFLO0FBQy9COzs7O0NBSUMsR0FDRCxTQUFTRSxnQkFBZ0JDLEVBQUU7SUFDdkIsNkNBQTZDO0lBQzdDLElBQUksT0FBUUEsQ0FBQUEsT0FBTyxRQUFRQSxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdDLFNBQVMsTUFBTSxjQUFjRCxJQUFJO1FBQ3BGQSxHQUFHQyxTQUFTO0lBQ2hCO0FBQ0o7QUFDQUosdUJBQXVCLEdBQUdFLGlCQUMxQixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JpbmFuY2VAMi44LjE1L25vZGVfbW9kdWxlcy9iaW5hbmNlL2xpYi91dGlsL3dzLXV0aWxzLmpzPzEzN2YiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNhZmVUZXJtaW5hdGVXcyA9IHZvaWQgMDtcbi8qKlxuICogIzE2ODogd3MudGVybWluYXRlKCkgaXMgdW5kZWZpbmVkIGluIGJyb3dzZXJzLlxuICogVGhpcyBvbmx5IHdvcmtzIGluIG5vZGUuanMsIG5vdCBpbiBicm93c2Vycy5cbiAqIERvZXMgbm90aGluZyBpZiBgd3NgIGlzIHVuZGVmaW5lZC5cbiAqL1xuZnVuY3Rpb24gc2FmZVRlcm1pbmF0ZVdzKHdzKSB7XG4gICAgLy8gIzE2ODogd3MudGVybWluYXRlKCkgdW5kZWZpbmVkIGluIGJyb3dzZXJzXG4gICAgaWYgKHR5cGVvZiAod3MgPT09IG51bGwgfHwgd3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHdzLnRlcm1pbmF0ZSkgPT09ICdmdW5jdGlvbicgJiYgd3MpIHtcbiAgICAgICAgd3MudGVybWluYXRlKCk7XG4gICAgfVxufVxuZXhwb3J0cy5zYWZlVGVybWluYXRlV3MgPSBzYWZlVGVybWluYXRlV3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13cy11dGlscy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzYWZlVGVybWluYXRlV3MiLCJ3cyIsInRlcm1pbmF0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/ws-utils.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/websocket-client.js":
/*!********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/websocket-client.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, {\n        enumerable: true,\n        get: function() {\n            return m[k];\n        }\n    });\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (void 0) && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = (void 0) && (void 0).__rest || function(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.WebsocketClient = exports.parseRawWsMessage = void 0;\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst isomorphic_ws_1 = __importDefault(__webpack_require__(/*! isomorphic-ws */ \"(rsc)/../../node_modules/.pnpm/isomorphic-ws@4.0.1_ws@7.5.9/node_modules/isomorphic-ws/node.js\"));\nconst logger_1 = __webpack_require__(/*! ./logger */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/logger.js\");\nconst main_client_1 = __webpack_require__(/*! ./main-client */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/main-client.js\");\nconst usdm_client_1 = __webpack_require__(/*! ./usdm-client */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/usdm-client.js\");\nconst beautifier_1 = __importDefault(__webpack_require__(/*! ./util/beautifier */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/beautifier.js\"));\nconst requestUtils_1 = __webpack_require__(/*! ./util/requestUtils */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/requestUtils.js\");\nconst ws_utils_1 = __webpack_require__(/*! ./util/ws-utils */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/ws-utils.js\");\nconst WsStore_1 = __importStar(__webpack_require__(/*! ./util/WsStore */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/util/WsStore.js\"));\nconst coinm_client_1 = __webpack_require__(/*! ./coinm-client */ \"(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/coinm-client.js\");\nconst wsBaseEndpoints = {\n    spot: \"wss://stream.binance.com:9443\",\n    margin: \"wss://stream.binance.com:9443\",\n    isolatedMargin: \"wss://stream.binance.com:9443\",\n    usdm: \"wss://fstream.binance.com\",\n    usdmTestnet: \"wss://stream.binancefuture.com\",\n    coinm: \"wss://dstream.binance.com\",\n    coinmTestnet: \"wss://dstream.binancefuture.com\",\n    options: \"wss://vstream.binance.com\",\n    optionsTestnet: \"wss://testnetws.binanceops.com\"\n};\nconst loggerCategory = {\n    category: \"binance-ws\"\n};\nfunction throwUnhandledSwitch(x, msg) {\n    throw new Error(msg);\n}\nfunction parseEventTypeFromMessage(parsedMsg) {\n    var _a;\n    if (parsedMsg === null || parsedMsg === void 0 ? void 0 : parsedMsg.e) {\n        return parsedMsg.e;\n    }\n    if (Array.isArray(parsedMsg) && parsedMsg.length) {\n        return (_a = parsedMsg[0]) === null || _a === void 0 ? void 0 : _a.e;\n    }\n    return;\n}\n/**\n * Try to resolve event.data. Example circumstance: {\"stream\":\"!forceOrder@arr\",\"data\":{\"e\":\"forceOrder\",\"E\":1634653599186,\"o\":{\"s\":\"IOTXUSDT\",\"S\":\"SELL\",\"o\":\"LIMIT\",\"f\":\"IOC\",\"q\":\"3661\",\"p\":\"0.06606\",\"ap\":\"0.06669\",\"X\":\"FILLED\",\"l\":\"962\",\"z\":\"3661\",\"T\":1634653599180}}}\n */ function parseRawWsMessage(event) {\n    if (typeof event === \"string\") {\n        const parsedEvent = JSON.parse(event);\n        if (parsedEvent.data) {\n            if (typeof parsedEvent.data === \"string\") {\n                return parseRawWsMessage(parsedEvent.data);\n            }\n            return parsedEvent.data;\n        }\n    }\n    if (event === null || event === void 0 ? void 0 : event.data) {\n        return JSON.parse(event.data);\n    }\n    return event;\n}\nexports.parseRawWsMessage = parseRawWsMessage;\nclass WebsocketClient extends events_1.EventEmitter {\n    constructor(options, logger){\n        super();\n        this.logger = logger || logger_1.DefaultLogger;\n        this.wsStore = new WsStore_1.default(this.logger);\n        this.beautifier = new beautifier_1.default();\n        this.restClients = {};\n        this.options = Object.assign({\n            pongTimeout: 7500,\n            pingInterval: 10000,\n            reconnectTimeout: 500\n        }, options);\n        this.listenKeyStateStore = {};\n        this.wsUrlKeyMap = {};\n        // add default error handling so this doesn't crash node (if the user didn't set a handler)\n        this.on(\"error\", ()=>{});\n    }\n    getRestClientOptions() {\n        return Object.assign(Object.assign(Object.assign({}, this.options), this.options.restOptions), {\n            api_key: this.options.api_key,\n            api_secret: this.options.api_secret\n        });\n    }\n    connectToWsUrl(url, wsKey, forceNewConnection) {\n        const wsRefKey = wsKey || url;\n        const oldWs = this.wsStore.getWs(wsRefKey);\n        if (oldWs && this.wsStore.isWsOpen(wsRefKey) && !forceNewConnection) {\n            this.logger.silly(`connectToWsUrl(): Returning existing open WS connection`, Object.assign(Object.assign({}, loggerCategory), {\n                wsRefKey\n            }));\n            return oldWs;\n        }\n        this.logger.silly(`connectToWsUrl(): Opening WS connection to URL: ${url}`, Object.assign(Object.assign({}, loggerCategory), {\n            wsRefKey\n        }));\n        const _a = this.options.wsOptions || {}, { protocols = [] } = _a, wsOptions = __rest(_a, [\n            \"protocols\"\n        ]);\n        const ws = new isomorphic_ws_1.default(url, protocols, wsOptions);\n        this.wsUrlKeyMap[url] = wsRefKey;\n        if (typeof ws.on === \"function\") {\n            ws.on(\"ping\", (event)=>this.onWsPing(event, wsRefKey, ws, \"event\"));\n            ws.on(\"pong\", (event)=>this.onWsPong(event, wsRefKey, \"event\"));\n        }\n        ws.onopen = (event)=>this.onWsOpen(event, wsRefKey, url);\n        ws.onerror = (event)=>this.parseWsError(\"WS Error Event\", event, wsRefKey, url);\n        ws.onclose = (event)=>this.onWsClose(event, wsRefKey, ws, url);\n        ws.onmessage = (event)=>this.onWsMessage(event, wsRefKey, \"function\");\n        // Not sure these work in the browser, the traditional event listeners are required for ping/pong frames in node\n        ws.onping = (event)=>this.onWsPing(event, wsRefKey, ws, \"function\");\n        ws.onpong = (event)=>this.onWsPong(event, wsRefKey, \"function\");\n        // Add ws connection with key to store\n        this.wsStore.setWs(wsRefKey, ws);\n        ws.wsKey = wsRefKey;\n        return ws;\n    }\n    tryWsSend(wsKey, wsMessage) {\n        try {\n            this.logger.silly(`Sending upstream ws message: `, Object.assign(Object.assign({}, loggerCategory), {\n                wsMessage,\n                wsKey\n            }));\n            if (!wsKey) {\n                throw new Error(\"No wsKey provided\");\n            }\n            const ws = this.getWs(wsKey);\n            if (!ws) {\n                throw new Error(`No active websocket connection exists for wsKey: ${wsKey}`);\n            }\n            ws.send(wsMessage);\n        } catch (e) {\n            this.logger.error(`Failed to send WS message`, Object.assign(Object.assign({}, loggerCategory), {\n                wsMessage,\n                wsKey,\n                exception: e\n            }));\n        }\n    }\n    tryWsPing(wsKey) {\n        try {\n            // this.logger.silly(`Sending upstream ping: `, { ...loggerCategory, wsKey });\n            if (!wsKey) {\n                throw new Error(\"No wsKey provided\");\n            }\n            const ws = this.getWs(wsKey);\n            if (!ws) {\n                throw new Error(`No active websocket connection exists for wsKey: ${wsKey}`);\n            }\n            // Binance allows unsolicited pongs, so we send both (though we expect a pong in response to our ping if the connection is still alive)\n            ws.ping();\n            ws.pong();\n        } catch (e) {\n            this.logger.error(`Failed to send WS ping`, Object.assign(Object.assign({}, loggerCategory), {\n                wsKey,\n                exception: e\n            }));\n        }\n    }\n    onWsOpen(ws, wsKey, wsUrl) {\n        this.logger.silly(`onWsOpen(): ${wsUrl} : ${wsKey}`);\n        if (this.wsStore.isConnectionState(wsKey, WsStore_1.WsConnectionStateEnum.RECONNECTING)) {\n            this.logger.info(\"Websocket reconnected\", Object.assign(Object.assign({}, loggerCategory), {\n                wsKey\n            }));\n            this.emit(\"reconnected\", {\n                wsKey,\n                ws\n            });\n        } else {\n            this.logger.info(\"Websocket connected\", Object.assign(Object.assign({}, loggerCategory), {\n                wsKey\n            }));\n            this.emit(\"open\", {\n                wsKey,\n                ws\n            });\n        }\n        this.setWsState(wsKey, WsStore_1.WsConnectionStateEnum.CONNECTED);\n        const topics = [\n            ...this.wsStore.getTopics(wsKey)\n        ];\n        if (topics.length) {\n            this.requestSubscribeTopics(wsKey, topics);\n        }\n        if (!this.options.disableHeartbeat) {\n            const wsState = this.wsStore.get(wsKey, true);\n            if (wsState.activePingTimer) {\n                clearInterval(wsState.activePingTimer);\n            }\n            wsState.activePingTimer = setInterval(()=>this.sendPing(wsKey, wsUrl), this.options.pingInterval);\n        }\n    }\n    onWsClose(event, wsKey, ws, wsUrl) {\n        const wsConnectionState = this.wsStore.getConnectionState(wsKey);\n        this.logger.info(\"Websocket connection closed\", Object.assign(Object.assign({}, loggerCategory), {\n            wsKey,\n            event,\n            wsConnectionState\n        }));\n        // User data sockets include the listen key. To prevent accummulation in memory we should clean up old disconnected states\n        const { isUserData } = requestUtils_1.getContextFromWsKey(wsKey);\n        if (isUserData) {\n            this.wsStore.delete(wsKey);\n            this.clearUserDataKeepAliveTimer;\n        }\n        if (wsConnectionState !== WsStore_1.WsConnectionStateEnum.CLOSING) {\n            this.reconnectWithDelay(wsKey, this.options.reconnectTimeout, wsUrl);\n            this.emit(\"reconnecting\", {\n                wsKey,\n                event,\n                ws\n            });\n        } else {\n            this.setWsState(wsKey, WsStore_1.WsConnectionStateEnum.INITIAL);\n            this.emit(\"close\", {\n                wsKey,\n                event,\n                ws\n            });\n        }\n    }\n    onWsMessage(event, wsKey, source) {\n        try {\n            this.clearPongTimer(wsKey);\n            const msg = parseRawWsMessage(event);\n            // Edge case where raw event does not include event type, detect using wsKey and mutate msg.e\n            requestUtils_1.appendEventIfMissing(msg, wsKey);\n            requestUtils_1.appendEventMarket(msg, wsKey);\n            const eventType = parseEventTypeFromMessage(msg);\n            if (eventType) {\n                this.emit(\"message\", msg);\n                if (eventType === \"listenKeyExpired\") {\n                    const { market } = requestUtils_1.getContextFromWsKey(wsKey);\n                    this.logger.info(`${market} listenKey expired - attempting to respawn user data stream: ${wsKey}`);\n                    // Just closing the connection (with the last parameter as true) will handle cleanup and respawn\n                    this.close(wsKey, true);\n                }\n                if (this.options.beautify) {\n                    // call beautifier here and emit separate msg, if enabled\n                    const beautifiedMessage = this.beautifier.beautifyWsMessage(msg, eventType, false);\n                    this.emit(\"formattedMessage\", beautifiedMessage);\n                    // emit a separate event for user data messages\n                    if (!Array.isArray(beautifiedMessage)) {\n                        if ([\n                            \"balanceUpdate\",\n                            \"executionReport\",\n                            \"listStatus\",\n                            \"listenKeyExpired\",\n                            \"outboundAccountPosition\",\n                            \"ACCOUNT_CONFIG_UPDATE\",\n                            \"ACCOUNT_UPDATE\",\n                            \"MARGIN_CALL\",\n                            \"ORDER_TRADE_UPDATE\",\n                            \"CONDITIONAL_ORDER_TRIGGER_REJECT\"\n                        ].includes(eventType)) {\n                            this.emit(\"formattedUserDataMessage\", beautifiedMessage);\n                        }\n                    }\n                }\n                return;\n            }\n            if (msg.result !== undefined) {\n                this.emit(\"reply\", {\n                    type: event.type,\n                    data: msg,\n                    wsKey\n                });\n                return;\n            }\n            this.logger.warning(\"Bug? Unhandled ws message event type. Check if appendEventIfMissing needs to parse wsKey.\", Object.assign(Object.assign({}, loggerCategory), {\n                parsedMessage: JSON.stringify(msg),\n                rawEvent: event,\n                wsKey,\n                source\n            }));\n        } catch (e) {\n            this.logger.error(\"Exception parsing ws message: \", Object.assign(Object.assign({}, loggerCategory), {\n                rawEvent: event,\n                wsKey,\n                error: e,\n                source\n            }));\n            this.emit(\"error\", {\n                wsKey,\n                error: e,\n                rawEvent: event,\n                source\n            });\n        }\n    }\n    sendPing(wsKey, wsUrl) {\n        this.clearPongTimer(wsKey);\n        this.logger.silly(\"Sending ping\", Object.assign(Object.assign({}, loggerCategory), {\n            wsKey\n        }));\n        this.tryWsPing(wsKey);\n        this.wsStore.get(wsKey, true).activePongTimer = setTimeout(()=>this.executeReconnectableClose(wsKey, \"Pong timeout\", wsUrl), this.options.pongTimeout);\n    }\n    onWsPing(event, wsKey, ws, source) {\n        this.logger.silly(\"Received ping, sending pong frame\", Object.assign(Object.assign({}, loggerCategory), {\n            wsKey,\n            event,\n            source\n        }));\n        ws.pong();\n    }\n    onWsPong(event, wsKey, source) {\n        this.logger.silly(\"Received pong, clearing pong timer\", Object.assign(Object.assign({}, loggerCategory), {\n            wsKey,\n            event,\n            source\n        }));\n        this.clearPongTimer(wsKey);\n    }\n    /**\n     * Closes a connection, if it's even open. If open, this will trigger a reconnect asynchronously.\n     * If closed, trigger a reconnect immediately\n     */ executeReconnectableClose(wsKey, reason, wsUrl) {\n        this.logger.info(`${reason} - closing socket to reconnect`, Object.assign(Object.assign({}, loggerCategory), {\n            wsKey,\n            reason\n        }));\n        const wasOpen = this.wsStore.isWsOpen(wsKey);\n        ws_utils_1.safeTerminateWs(this.getWs(wsKey));\n        delete this.wsStore.get(wsKey, true).activePongTimer;\n        this.clearPingTimer(wsKey);\n        this.clearPongTimer(wsKey);\n        if (!wasOpen) {\n            this.logger.info(`${reason} - socket already closed - trigger immediate reconnect`, Object.assign(Object.assign({}, loggerCategory), {\n                wsKey,\n                reason\n            }));\n            this.reconnectWithDelay(wsKey, this.options.reconnectTimeout, wsUrl);\n        }\n    }\n    close(wsKey, autoReconnectAfterClose) {\n        var _a;\n        this.logger.info(\"Closing connection\", Object.assign(Object.assign({}, loggerCategory), {\n            wsKey,\n            willReconnect: autoReconnectAfterClose\n        }));\n        this.setWsState(wsKey, autoReconnectAfterClose ? WsStore_1.WsConnectionStateEnum.RECONNECTING : WsStore_1.WsConnectionStateEnum.CLOSING);\n        this.clearTimers(wsKey);\n        (_a = this.getWs(wsKey)) === null || _a === void 0 ? void 0 : _a.close();\n        const { listenKey } = requestUtils_1.getContextFromWsKey(wsKey);\n        if (listenKey) {\n            this.teardownUserDataListenKey(listenKey, this.getWs(wsKey));\n        } else {\n            ws_utils_1.safeTerminateWs(this.getWs(wsKey));\n        }\n    }\n    closeAll(autoReconnectAfterClose) {\n        const keys = this.wsStore.getKeys();\n        this.logger.info(`Closing all ws connections: ${keys}`);\n        keys.forEach((key)=>{\n            this.close(key, autoReconnectAfterClose);\n        });\n    }\n    closeWs(ws, autoReconnectAfterClose) {\n        const wsKey = this.wsUrlKeyMap[ws.url] || (ws === null || ws === void 0 ? void 0 : ws.wsKey);\n        if (!wsKey) {\n            throw new Error(`Cannot close websocket as it has no known wsKey attached.`);\n        }\n        return this.close(wsKey, autoReconnectAfterClose);\n    }\n    parseWsError(context, error, wsKey, wsUrl) {\n        this.logger.error(context, Object.assign(Object.assign({}, loggerCategory), {\n            wsKey,\n            error\n        }));\n        if (!error.message) {\n            this.logger.error(`${context} due to unexpected error: `, error);\n            this.emit(\"error\", {\n                error,\n                wsKey,\n                wsUrl\n            });\n            return;\n        }\n        switch(error.message){\n            case \"Unexpected server response: 401\":\n                this.logger.error(`${context} due to 401 authorization failure.`, Object.assign(Object.assign({}, loggerCategory), {\n                    wsKey\n                }));\n                break;\n            default:\n                if (this.wsStore.getConnectionState(wsKey) !== WsStore_1.WsConnectionStateEnum.CLOSING) {\n                    this.logger.error(`${context} due to unexpected response error: \"${(error === null || error === void 0 ? void 0 : error.msg) || (error === null || error === void 0 ? void 0 : error.message) || error}\"`, Object.assign(Object.assign({}, loggerCategory), {\n                        wsKey,\n                        error\n                    }));\n                    this.executeReconnectableClose(wsKey, \"unhandled onWsError\", wsUrl);\n                } else {\n                    this.logger.info(`${wsKey} socket forcefully closed. Will not reconnect.`);\n                }\n                break;\n        }\n        this.emit(\"error\", {\n            error,\n            wsKey,\n            wsUrl\n        });\n    }\n    reconnectWithDelay(wsKey, connectionDelayMs, wsUrl) {\n        var _a;\n        this.clearTimers(wsKey);\n        if (this.wsStore.getConnectionState(wsKey) !== WsStore_1.WsConnectionStateEnum.CONNECTING) {\n            this.setWsState(wsKey, WsStore_1.WsConnectionStateEnum.RECONNECTING);\n        }\n        this.logger.info(\"Reconnecting to websocket with delay...\", Object.assign(Object.assign({}, loggerCategory), {\n            wsKey,\n            connectionDelayMs\n        }));\n        if ((_a = this.wsStore.get(wsKey)) === null || _a === void 0 ? void 0 : _a.activeReconnectTimer) {\n            this.clearReconnectTimer(wsKey);\n        }\n        this.wsStore.get(wsKey, true).activeReconnectTimer = setTimeout(()=>{\n            this.clearReconnectTimer(wsKey);\n            if (wsKey.includes(\"userData\")) {\n                const { market, symbol, isTestnet } = requestUtils_1.getContextFromWsKey(wsKey);\n                this.logger.info(\"Reconnecting to user data stream\", Object.assign(Object.assign({}, loggerCategory), {\n                    wsKey,\n                    market,\n                    symbol\n                }));\n                // We'll set a new one once the new stream respawns, with a diff listenKey in the key\n                this.wsStore.delete(wsKey);\n                this.respawnUserDataStream(market, symbol, isTestnet);\n                return;\n            }\n            this.logger.info(\"Reconnecting to public websocket\", Object.assign(Object.assign({}, loggerCategory), {\n                wsKey,\n                wsUrl\n            }));\n            this.connectToWsUrl(wsUrl, wsKey);\n        }, connectionDelayMs);\n    }\n    clearTimers(wsKey) {\n        this.clearPingTimer(wsKey);\n        this.clearPongTimer(wsKey);\n        this.clearReconnectTimer(wsKey);\n    }\n    // Send a ping at intervals\n    clearPingTimer(wsKey) {\n        const wsState = this.wsStore.get(wsKey);\n        if (wsState === null || wsState === void 0 ? void 0 : wsState.activePingTimer) {\n            clearInterval(wsState.activePingTimer);\n            wsState.activePingTimer = undefined;\n        }\n    }\n    // Expect a pong within a time limit\n    clearPongTimer(wsKey) {\n        const wsState = this.wsStore.get(wsKey);\n        if (wsState === null || wsState === void 0 ? void 0 : wsState.activePongTimer) {\n            // @ts-ignore\n            clearTimeout(wsState.activePongTimer);\n            wsState.activePongTimer = undefined;\n        }\n    }\n    // Timer tracking that a reconnect is about to happen / in progress\n    clearReconnectTimer(wsKey) {\n        const wsState = this.wsStore.get(wsKey);\n        if (wsState === null || wsState === void 0 ? void 0 : wsState.activeReconnectTimer) {\n            clearTimeout(wsState.activeReconnectTimer);\n            wsState.activeReconnectTimer = undefined;\n        }\n    }\n    clearUserDataKeepAliveTimer(listenKey) {\n        const state = this.listenKeyStateStore[listenKey];\n        if (!state) {\n            return;\n        }\n        if (state.keepAliveTimer) {\n            this.logger.silly(`Clearing old listen key interval timer for ${listenKey}`);\n            clearInterval(state.keepAliveTimer);\n        }\n    }\n    getWsBaseUrl(market, wsKey) {\n        if (this.options.wsUrl) {\n            return this.options.wsUrl;\n        }\n        return wsBaseEndpoints[market];\n    }\n    getWs(wsKey) {\n        return this.wsStore.getWs(wsKey);\n    }\n    setWsState(wsKey, state) {\n        this.wsStore.setConnectionState(wsKey, state);\n    }\n    getSpotRestClient() {\n        if (!this.restClients.spot) {\n            this.restClients.spot = new main_client_1.MainClient(this.getRestClientOptions(), this.options.requestOptions);\n        }\n        return this.restClients.spot;\n    }\n    getUSDMRestClient(isTestnet) {\n        if (isTestnet) {\n            if (!this.restClients.usdmFuturesTestnet) {\n                this.restClients.usdmFuturesTestnet = new usdm_client_1.USDMClient(this.getRestClientOptions(), this.options.requestOptions, isTestnet);\n            }\n            return this.restClients.usdmFuturesTestnet;\n        }\n        if (!this.restClients.usdmFutures) {\n            this.restClients.usdmFutures = new usdm_client_1.USDMClient(this.getRestClientOptions(), this.options.requestOptions);\n        }\n        return this.restClients.usdmFutures;\n    }\n    getCOINMRestClient(isTestnet) {\n        if (isTestnet) {\n            if (!this.restClients.coinmFuturesTestnet) {\n                this.restClients.coinmFuturesTestnet = new coinm_client_1.CoinMClient(this.getRestClientOptions(), this.options.requestOptions, isTestnet);\n            }\n            return this.restClients.coinmFuturesTestnet;\n        }\n        if (!this.restClients.coinmFutures) {\n            this.restClients.coinmFutures = new coinm_client_1.CoinMClient(this.getRestClientOptions(), this.options.requestOptions);\n        }\n        return this.restClients.coinmFutures;\n    }\n    /**\n     * Send WS message to subscribe to topics. Use subscribe() to call this.\n     */ requestSubscribeTopics(wsKey, topics) {\n        const wsMessage = JSON.stringify({\n            method: \"SUBSCRIBE\",\n            params: topics,\n            id: new Date().getTime()\n        });\n        this.tryWsSend(wsKey, wsMessage);\n    }\n    /**\n     * Send WS message to unsubscribe from topics. Use unsubscribe() to call this.\n     */ requestUnsubscribeTopics(wsKey, topics) {\n        const wsMessage = JSON.stringify({\n            op: \"UNSUBSCRIBE\",\n            params: topics,\n            id: new Date().getTime()\n        });\n        this.tryWsSend(wsKey, wsMessage);\n    }\n    /**\n     * Send WS message to unsubscribe from topics.\n     */ requestListSubscriptions(wsKey, requestId) {\n        const wsMessage = JSON.stringify({\n            method: \"LIST_SUBSCRIPTIONS\",\n            id: requestId\n        });\n        this.tryWsSend(wsKey, wsMessage);\n    }\n    /**\n     * Send WS message to set property state\n     */ requestSetProperty(wsKey, property, value, requestId) {\n        const wsMessage = JSON.stringify({\n            method: \"SET_PROPERTY\",\n            params: [\n                property,\n                value\n            ],\n            id: requestId\n        });\n        this.tryWsSend(wsKey, wsMessage);\n    }\n    /**\n     * Send WS message to get property state\n     */ requestGetProperty(wsKey, property, requestId) {\n        const wsMessage = JSON.stringify({\n            method: \"GET_PROPERTY\",\n            params: [\n                property\n            ],\n            id: requestId\n        });\n        this.tryWsSend(wsKey, wsMessage);\n    }\n    /**\n     * --------------------------\n     * User data listen key tracking & persistence\n     * --------------------------\n     **/ getListenKeyState(listenKey, market) {\n        const state = this.listenKeyStateStore[listenKey];\n        if (state) {\n            return state;\n        }\n        this.listenKeyStateStore[listenKey] = {\n            market,\n            lastKeepAlive: 0,\n            keepAliveTimer: undefined,\n            keepAliveFailures: 0\n        };\n        return this.listenKeyStateStore[listenKey];\n    }\n    setKeepAliveListenKeyTimer(listenKey, market, ws, wsKey, symbol, isTestnet) {\n        const listenKeyState = this.getListenKeyState(listenKey, market);\n        this.clearUserDataKeepAliveTimer(listenKey);\n        this.logger.silly(`Created new listen key interval timer for ${listenKey}`);\n        // Set timer to keep WS alive every 50 minutes\n        const minutes50 = 1000 * 60 * 50;\n        listenKeyState.keepAliveTimer = setInterval(()=>this.checkKeepAliveListenKey(listenKey, market, ws, wsKey, symbol, isTestnet), minutes50);\n    }\n    sendKeepAliveForMarket(listenKey, market, ws, wsKey, symbol, isTestnet) {\n        switch(market){\n            case \"spot\":\n                return this.getSpotRestClient().keepAliveSpotUserDataListenKey(listenKey);\n            case \"margin\":\n                return this.getSpotRestClient().keepAliveMarginUserDataListenKey(listenKey);\n            case \"isolatedMargin\":\n                return this.getSpotRestClient().keepAliveIsolatedMarginUserDataListenKey({\n                    listenKey,\n                    symbol: symbol\n                });\n            case \"coinm\":\n            case \"options\":\n            case \"optionsTestnet\":\n            case \"usdm\":\n                return this.getUSDMRestClient().keepAliveFuturesUserDataListenKey();\n            case \"usdmTestnet\":\n                return this.getUSDMRestClient(isTestnet).keepAliveFuturesUserDataListenKey();\n            case \"coinmTestnet\":\n                return this.getUSDMRestClient(isTestnet).keepAliveFuturesUserDataListenKey();\n            default:\n                throwUnhandledSwitch(market, `Failed to send keep alive for user data stream in unhandled market ${market}`);\n        }\n    }\n    checkKeepAliveListenKey(listenKey, market, ws, wsKey, symbol, isTestnet) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const listenKeyState = this.getListenKeyState(listenKey, market);\n            try {\n                // Simple way to test keep alive failure handling:\n                // throw new Error(`Fake keep alive failure`);\n                yield this.sendKeepAliveForMarket(listenKey, market, ws, wsKey, symbol, isTestnet);\n                listenKeyState.lastKeepAlive = Date.now();\n                listenKeyState.keepAliveFailures = 0;\n                this.logger.info(`Completed keep alive cycle for listenKey(${listenKey}) in market(${market})`, Object.assign(Object.assign({}, loggerCategory), {\n                    listenKey\n                }));\n            } catch (e) {\n                listenKeyState.keepAliveFailures++;\n                // If max failurees reached, tear down and respawn if allowed\n                if (listenKeyState.keepAliveFailures >= 3) {\n                    this.logger.error(\"FATAL: Failed to keep WS alive for listen key after 3 attempts\", Object.assign(Object.assign({}, loggerCategory), {\n                        listenKey,\n                        error: e\n                    }));\n                    // reconnect follows a less automatic workflow. Kill connection first, with instruction NOT to reconnect automatically\n                    this.close(wsKey, false);\n                    // respawn a connection with a potentially new listen key (since the old one may be invalid now)\n                    this.respawnUserDataStream(market, symbol);\n                    return;\n                }\n                const reconnectDelaySeconds = 1000 * 15;\n                this.logger.warning(`Userdata keep alive request failed due to error, trying again with short delay (${reconnectDelaySeconds} seconds)`, Object.assign(Object.assign({}, loggerCategory), {\n                    listenKey,\n                    error: e,\n                    keepAliveAttempts: listenKeyState.keepAliveFailures\n                }));\n                setTimeout(()=>this.checkKeepAliveListenKey(listenKey, market, ws, wsKey, symbol), reconnectDelaySeconds);\n            }\n        });\n    }\n    teardownUserDataListenKey(listenKey, ws) {\n        if (listenKey) {\n            this.clearUserDataKeepAliveTimer(listenKey);\n            delete this.listenKeyStateStore[listenKey];\n            ws_utils_1.safeTerminateWs(ws);\n        }\n    }\n    respawnUserDataStream(market, symbol, isTestnet, respawnAttempt) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const forceNewConnection = true;\n            const isReconnecting = true;\n            let ws;\n            try {\n                switch(market){\n                    case \"spot\":\n                        ws = yield this.subscribeSpotUserDataStream(forceNewConnection, isReconnecting);\n                        break;\n                    case \"margin\":\n                        ws = yield this.subscribeMarginUserDataStream(forceNewConnection, isReconnecting);\n                        break;\n                    case \"isolatedMargin\":\n                        ws = yield this.subscribeIsolatedMarginUserDataStream(symbol, forceNewConnection, isReconnecting);\n                        break;\n                    case \"usdm\":\n                        ws = yield this.subscribeUsdFuturesUserDataStream(isTestnet, forceNewConnection, isReconnecting);\n                        break;\n                    case \"usdmTestnet\":\n                        ws = yield this.subscribeUsdFuturesUserDataStream(true, forceNewConnection, isReconnecting);\n                        break;\n                    case \"coinm\":\n                        ws = yield this.subscribeCoinFuturesUserDataStream(isTestnet, forceNewConnection, isReconnecting);\n                        break;\n                    case \"coinmTestnet\":\n                        ws = yield this.subscribeCoinFuturesUserDataStream(true, forceNewConnection, isReconnecting);\n                        break;\n                    case \"options\":\n                    case \"optionsTestnet\":\n                        throw new Error(\"TODO: respawn other user data streams once subscribe methods have been aded\");\n                    default:\n                        throwUnhandledSwitch(market, `Failed to respawn user data stream - unhandled market: ${market}`);\n                }\n            } catch (e) {\n                this.logger.error(\"Exception trying to spawn user data stream\", Object.assign(Object.assign({}, loggerCategory), {\n                    market,\n                    symbol,\n                    isTestnet,\n                    error: e\n                }));\n                this.emit(\"error\", {\n                    wsKey: market + \"_\" + \"userData\",\n                    error: e\n                });\n            }\n            if (!ws) {\n                const delayInSeconds = 2;\n                this.logger.error(\"User key respawn failed, trying again with short delay\", Object.assign(Object.assign({}, loggerCategory), {\n                    market,\n                    symbol,\n                    isTestnet,\n                    respawnAttempt,\n                    delayInSeconds\n                }));\n                setTimeout(()=>this.respawnUserDataStream(market, symbol, isTestnet, respawnAttempt ? respawnAttempt + 1 : 1), 1000 * delayInSeconds);\n            }\n        });\n    }\n    /**\n     * --------------------------\n     * Universal market websocket streams (may apply to one or more API markets)\n     * --------------------------\n     **/ /**\n     * Subscribe to a universal market websocket stream\n     */ subscribeEndpoint(endpoint, market, forceNewConnection) {\n        const wsKey = requestUtils_1.getWsKeyWithContext(market, endpoint);\n        return this.connectToWsUrl(this.getWsBaseUrl(market, wsKey) + `/ws/${endpoint}`, wsKey, forceNewConnection);\n    }\n    /**\n     * Subscribe to aggregate trades for a symbol in a market category\n     */ subscribeAggregateTrades(symbol, market, forceNewConnection) {\n        const lowerCaseSymbol = symbol.toLowerCase();\n        const streamName = \"aggTrade\";\n        const wsKey = requestUtils_1.getWsKeyWithContext(market, streamName, lowerCaseSymbol);\n        return this.connectToWsUrl(this.getWsBaseUrl(market, wsKey) + `/ws/${lowerCaseSymbol}@${streamName}`, wsKey, forceNewConnection);\n    }\n    /**\n     * Subscribe to trades for a symbol in a market category\n     * IMPORTANT: This topic for usdm and coinm is not listed in the api docs and might stop working without warning\n     */ subscribeTrades(symbol, market, forceNewConnection) {\n        const lowerCaseSymbol = symbol.toLowerCase();\n        const streamName = \"trade\";\n        const wsKey = requestUtils_1.getWsKeyWithContext(market, streamName, lowerCaseSymbol);\n        return this.connectToWsUrl(this.getWsBaseUrl(market, wsKey) + `/ws/${lowerCaseSymbol}@${streamName}`, wsKey, forceNewConnection);\n    }\n    /**\n     * Subscribe to coin index for a symbol in COINM Futures markets\n     */ subscribeCoinIndexPrice(symbol, updateSpeedMs = 3000, forceNewConnection) {\n        const lowerCaseSymbol = symbol.toLowerCase();\n        const streamName = \"indexPrice\";\n        const speedSuffix = updateSpeedMs === 1000 ? \"@1s\" : \"\";\n        const market = \"coinm\";\n        const wsKey = requestUtils_1.getWsKeyWithContext(market, streamName, lowerCaseSymbol);\n        return this.connectToWsUrl(this.getWsBaseUrl(market, wsKey) + `/ws/${lowerCaseSymbol}@${streamName}${speedSuffix}`, wsKey, forceNewConnection);\n    }\n    /**\n     * Subscribe to mark price for a symbol in a market category\n     */ subscribeMarkPrice(symbol, market, updateSpeedMs = 3000, forceNewConnection) {\n        const lowerCaseSymbol = symbol.toLowerCase();\n        const streamName = \"markPrice\";\n        const speedSuffix = updateSpeedMs === 1000 ? \"@1s\" : \"\";\n        const wsKey = requestUtils_1.getWsKeyWithContext(market, streamName, lowerCaseSymbol);\n        return this.connectToWsUrl(this.getWsBaseUrl(market, wsKey) + `/ws/${lowerCaseSymbol}@${streamName}${speedSuffix}`, wsKey, forceNewConnection);\n    }\n    /**\n     * Subscribe to mark price for all symbols in a market category\n     */ subscribeAllMarketMarkPrice(market, updateSpeedMs = 3000, forceNewConnection) {\n        const streamName = \"!markPrice@arr\";\n        const speedSuffix = updateSpeedMs === 1000 ? \"@1s\" : \"\";\n        const wsKey = requestUtils_1.getWsKeyWithContext(market, streamName);\n        return this.connectToWsUrl(this.getWsBaseUrl(market, wsKey) + `/ws/${streamName}${speedSuffix}`, wsKey, forceNewConnection);\n    }\n    /**\n     * Subscribe to klines(candles) for a symbol in a market category\n     */ subscribeKlines(symbol, interval, market, forceNewConnection) {\n        const lowerCaseSymbol = symbol.toLowerCase();\n        const streamName = \"kline\";\n        const wsKey = requestUtils_1.getWsKeyWithContext(market, streamName, lowerCaseSymbol, interval);\n        return this.connectToWsUrl(this.getWsBaseUrl(market, wsKey) + `/ws/${lowerCaseSymbol}@${streamName}_${interval}`, wsKey, forceNewConnection);\n    }\n    /**\n     * Subscribe to continuous contract klines(candles) for a symbol futures\n     */ subscribeContinuousContractKlines(symbol, contractType, interval, market, forceNewConnection) {\n        const lowerCaseSymbol = symbol.toLowerCase();\n        const streamName = \"continuousKline\";\n        const wsKey = requestUtils_1.getWsKeyWithContext(market, streamName, lowerCaseSymbol, interval);\n        return this.connectToWsUrl(this.getWsBaseUrl(market, wsKey) + `/ws/${lowerCaseSymbol}_${contractType}@${streamName}_${interval}`, wsKey, forceNewConnection);\n    }\n    /**\n     * Subscribe to index klines(candles) for a symbol in a coinm futures\n     */ subscribeIndexKlines(symbol, interval, forceNewConnection) {\n        const lowerCaseSymbol = symbol.toLowerCase();\n        const streamName = \"indexPriceKline\";\n        const market = \"coinm\";\n        const wsKey = requestUtils_1.getWsKeyWithContext(market, streamName, lowerCaseSymbol, interval);\n        return this.connectToWsUrl(this.getWsBaseUrl(market, wsKey) + `/ws/${lowerCaseSymbol}@${streamName}_${interval}`, wsKey, forceNewConnection);\n    }\n    /**\n     * Subscribe to index klines(candles) for a symbol in a coinm futures\n     */ subscribeMarkPriceKlines(symbol, interval, forceNewConnection) {\n        const lowerCaseSymbol = symbol.toLowerCase();\n        const streamName = \"markPrice_kline\";\n        const market = \"coinm\";\n        const wsKey = requestUtils_1.getWsKeyWithContext(market, streamName, lowerCaseSymbol, interval);\n        return this.connectToWsUrl(this.getWsBaseUrl(market, wsKey) + `/ws/${lowerCaseSymbol}@${streamName}_${interval}`, wsKey, forceNewConnection);\n    }\n    /**\n     * Subscribe to mini 24hr ticker for a symbol in market category.\n     */ subscribeSymbolMini24hrTicker(symbol, market, forceNewConnection) {\n        const lowerCaseSymbol = symbol.toLowerCase();\n        const streamName = \"miniTicker\";\n        const wsKey = requestUtils_1.getWsKeyWithContext(market, streamName, lowerCaseSymbol);\n        return this.connectToWsUrl(this.getWsBaseUrl(market, wsKey) + `/ws/${lowerCaseSymbol}@${streamName}`, wsKey, forceNewConnection);\n    }\n    /**\n     * Subscribe to mini 24hr mini ticker in market category.\n     */ subscribeAllMini24hrTickers(market, forceNewConnection) {\n        const streamName = \"miniTicker\";\n        const wsKey = requestUtils_1.getWsKeyWithContext(market, streamName);\n        return this.connectToWsUrl(this.getWsBaseUrl(market, wsKey) + `/ws/!${streamName}@arr`, wsKey, forceNewConnection);\n    }\n    /**\n     * Subscribe to 24hr ticker for a symbol in any market.\n     */ subscribeSymbol24hrTicker(symbol, market, forceNewConnection) {\n        const lowerCaseSymbol = symbol.toLowerCase();\n        const streamName = \"ticker\";\n        const wsKey = requestUtils_1.getWsKeyWithContext(market, streamName, lowerCaseSymbol);\n        return this.connectToWsUrl(this.getWsBaseUrl(market, wsKey) + `/ws/${lowerCaseSymbol}@${streamName}`, wsKey, forceNewConnection);\n    }\n    /**\n     * Subscribe to 24hr ticker in any market.\n     */ subscribeAll24hrTickers(market, forceNewConnection) {\n        const streamName = \"ticker\";\n        const wsKey = requestUtils_1.getWsKeyWithContext(market, streamName);\n        return this.connectToWsUrl(this.getWsBaseUrl(market, wsKey) + `/ws/!${streamName}@arr`, wsKey, forceNewConnection);\n    }\n    /**\n     * Subscribe to rolling window ticker statistics for all market symbols,\n     * computed over multiple windows. Note that only tickers that have\n     * changed will be present in the array.\n     *\n     * Notes:\n     * - Supported window sizes: 1h,4h,1d.\n     * - Supported markets: spot\n     */ subscribeAllRollingWindowTickers(market, windowSize, forceNewConnection) {\n        const streamName = \"ticker\";\n        const wsKey = requestUtils_1.getWsKeyWithContext(market, streamName, windowSize);\n        const wsUrl = this.getWsBaseUrl(market, wsKey) + `/ws/!${streamName}_${windowSize}@arr`;\n        return this.connectToWsUrl(wsUrl, wsKey, forceNewConnection);\n    }\n    /**\n     * Subscribe to best bid/ask for symbol in spot markets.\n     */ subscribeSymbolBookTicker(symbol, market, forceNewConnection) {\n        const lowerCaseSymbol = symbol.toLowerCase();\n        const streamName = \"bookTicker\";\n        const wsKey = requestUtils_1.getWsKeyWithContext(market, streamName, lowerCaseSymbol);\n        return this.connectToWsUrl(this.getWsBaseUrl(market, wsKey) + `/ws/${lowerCaseSymbol}@${streamName}`, wsKey, forceNewConnection);\n    }\n    /**\n     * Subscribe to best bid/ask for all symbols in spot markets.\n     */ subscribeAllBookTickers(market, forceNewConnection) {\n        const streamName = \"bookTicker\";\n        const wsKey = requestUtils_1.getWsKeyWithContext(market, streamName);\n        return this.connectToWsUrl(this.getWsBaseUrl(market, wsKey) + `/ws/!${streamName}`, wsKey, forceNewConnection);\n    }\n    /**\n     * Subscribe to best bid/ask for symbol in spot markets.\n     */ subscribeSymbolLiquidationOrders(symbol, market, forceNewConnection) {\n        const lowerCaseSymbol = symbol.toLowerCase();\n        const streamName = \"forceOrder\";\n        const wsKey = requestUtils_1.getWsKeyWithContext(market, streamName, lowerCaseSymbol);\n        return this.connectToWsUrl(this.getWsBaseUrl(market, wsKey) + `/ws/${lowerCaseSymbol}@${streamName}`, wsKey, forceNewConnection);\n    }\n    /**\n     * Subscribe to best bid/ask for all symbols in spot markets.\n     */ subscribeAllLiquidationOrders(market, forceNewConnection) {\n        const streamName = \"forceOrder@arr\";\n        const wsKey = requestUtils_1.getWsKeyWithContext(market, streamName);\n        return this.connectToWsUrl(this.getWsBaseUrl(market, wsKey) + `/ws/!${streamName}`, wsKey, forceNewConnection);\n    }\n    /**\n     * Subscribe to partial book depths. Note, spot only supports 1000ms or 100ms for updateMs, while futures only support 100, 250 or 500ms.\n     */ subscribePartialBookDepths(symbol, levels, updateMs, market, forceNewConnection) {\n        const lowerCaseSymbol = symbol.toLowerCase();\n        const streamName = \"depth\";\n        const wsKey = requestUtils_1.getWsKeyWithContext(market, streamName, lowerCaseSymbol);\n        const updateMsSuffx = updateMs === 100 ? `@${updateMs}ms` : \"\";\n        return this.connectToWsUrl(this.getWsBaseUrl(market, wsKey) + `/ws/${lowerCaseSymbol}@${streamName}${levels}${updateMsSuffx}`, wsKey, forceNewConnection);\n    }\n    /**\n     * Subscribe to spot orderbook depth updates to locally manage an order book.\n     */ subscribeDiffBookDepth(symbol, updateMs = 1000, market, forceNewConnection) {\n        const lowerCaseSymbol = symbol.toLowerCase();\n        const streamName = \"depth\";\n        const wsKey = requestUtils_1.getWsKeyWithContext(market, \"diffBookDepth\", lowerCaseSymbol, String(updateMs));\n        const updateMsSuffx = updateMs === 100 ? `@${updateMs}ms` : \"\";\n        return this.connectToWsUrl(this.getWsBaseUrl(market, wsKey) + `/ws/${lowerCaseSymbol}@${streamName}${updateMsSuffx}`, wsKey, forceNewConnection);\n    }\n    /**\n     * --------------------------\n     * SPOT market websocket streams\n     * --------------------------\n     **/ /**\n     * Subscribe to aggregate trades for a symbol in spot markets.\n     */ subscribeSpotAggregateTrades(symbol, forceNewConnection) {\n        return this.subscribeAggregateTrades(symbol, \"spot\", forceNewConnection);\n    }\n    /**\n     * Subscribe to trades for a symbol in spot markets.\n     */ subscribeSpotTrades(symbol, forceNewConnection) {\n        return this.subscribeTrades(symbol, \"spot\", forceNewConnection);\n    }\n    /**\n     * Subscribe to candles for a symbol in spot markets.\n     */ subscribeSpotKline(symbol, interval, forceNewConnection) {\n        return this.subscribeKlines(symbol, interval, \"spot\", forceNewConnection);\n    }\n    /**\n     * Subscribe to mini 24hr ticker for a symbol in spot markets.\n     */ subscribeSpotSymbolMini24hrTicker(symbol, forceNewConnection) {\n        return this.subscribeSymbolMini24hrTicker(symbol, \"spot\", forceNewConnection);\n    }\n    /**\n     * Subscribe to mini 24hr mini ticker in spot markets.\n     */ subscribeSpotAllMini24hrTickers(forceNewConnection) {\n        return this.subscribeAllMini24hrTickers(\"spot\", forceNewConnection);\n    }\n    /**\n     * Subscribe to 24hr ticker for a symbol in spot markets.\n     */ subscribeSpotSymbol24hrTicker(symbol, forceNewConnection) {\n        return this.subscribeSymbol24hrTicker(symbol, \"spot\", forceNewConnection);\n    }\n    /**\n     * Subscribe to 24hr ticker in spot markets.\n     */ subscribeSpotAll24hrTickers(forceNewConnection) {\n        return this.subscribeAll24hrTickers(\"spot\", forceNewConnection);\n    }\n    /**\n     * Subscribe to best bid/ask for symbol in spot markets.\n     */ subscribeSpotSymbolBookTicker(symbol, forceNewConnection) {\n        return this.subscribeSymbolBookTicker(symbol, \"spot\", forceNewConnection);\n    }\n    /**\n     * Subscribe to best bid/ask for all symbols in spot markets.\n     */ subscribeSpotAllBookTickers(forceNewConnection) {\n        return this.subscribeAllBookTickers(\"spot\", forceNewConnection);\n    }\n    /**\n     * Subscribe to top bid/ask levels for symbol in spot markets.\n     */ subscribeSpotPartialBookDepth(symbol, levels, updateMs = 1000, forceNewConnection) {\n        return this.subscribePartialBookDepths(symbol, levels, updateMs, \"spot\", forceNewConnection);\n    }\n    /**\n     * Subscribe to spot orderbook depth updates to locally manage an order book.\n     */ subscribeSpotDiffBookDepth(symbol, updateMs = 1000, forceNewConnection) {\n        return this.subscribeDiffBookDepth(symbol, updateMs, \"spot\", forceNewConnection);\n    }\n    /**\n     * Subscribe to a spot user data stream. Use REST client to generate and persist listen key.\n     * Supports spot, margin & isolated margin listen keys.\n     */ subscribeSpotUserDataStreamWithListenKey(listenKey, forceNewConnection, isReconnecting) {\n        const market = \"spot\";\n        const wsKey = requestUtils_1.getWsKeyWithContext(market, \"userData\", undefined, listenKey);\n        if (!forceNewConnection && this.wsStore.isWsConnecting(wsKey)) {\n            this.logger.silly(\"Existing spot user data connection in progress for listen key. Avoiding duplicate\");\n            return this.getWs(wsKey);\n        }\n        this.setWsState(wsKey, isReconnecting ? WsStore_1.WsConnectionStateEnum.RECONNECTING : WsStore_1.WsConnectionStateEnum.CONNECTING);\n        const ws = this.connectToWsUrl(this.getWsBaseUrl(market, wsKey) + `/ws/${listenKey}`, wsKey, forceNewConnection);\n        // Start & store timer to keep alive listen key (and handle expiration)\n        this.setKeepAliveListenKeyTimer(listenKey, market, ws, wsKey);\n        return ws;\n    }\n    /**\n     * Subscribe to spot user data stream - listen key is automatically generated. Calling multiple times only opens one connection.\n     */ subscribeSpotUserDataStream(forceNewConnection, isReconnecting) {\n        return __awaiter(this, void 0, void 0, function*() {\n            try {\n                const { listenKey } = yield this.getSpotRestClient().getSpotUserDataListenKey();\n                return this.subscribeSpotUserDataStreamWithListenKey(listenKey, forceNewConnection, isReconnecting);\n            } catch (e) {\n                this.logger.error(`Failed to connect to spot user data`, Object.assign(Object.assign({}, loggerCategory), {\n                    error: e\n                }));\n                this.emit(\"error\", {\n                    wsKey: \"spot\" + \"_\" + \"userData\",\n                    error: e\n                });\n            }\n        });\n    }\n    /**\n     * Subscribe to margin user data stream - listen key is automatically generated.\n     */ subscribeMarginUserDataStream(forceNewConnection, isReconnecting) {\n        return __awaiter(this, void 0, void 0, function*() {\n            try {\n                const { listenKey } = yield this.getSpotRestClient().getMarginUserDataListenKey();\n                const market = \"margin\";\n                const wsKey = requestUtils_1.getWsKeyWithContext(market, \"userData\", undefined, listenKey);\n                if (!forceNewConnection && this.wsStore.isWsConnecting(wsKey)) {\n                    this.logger.silly(\"Existing margin user data connection in progress for listen key. Avoiding duplicate\");\n                    return this.getWs(wsKey);\n                }\n                this.setWsState(wsKey, isReconnecting ? WsStore_1.WsConnectionStateEnum.RECONNECTING : WsStore_1.WsConnectionStateEnum.CONNECTING);\n                const ws = this.connectToWsUrl(this.getWsBaseUrl(market, wsKey) + `/ws/${listenKey}`, wsKey, forceNewConnection);\n                // Start & store timer to keep alive listen key (and handle expiration)\n                this.setKeepAliveListenKeyTimer(listenKey, market, ws, wsKey);\n                return ws;\n            } catch (e) {\n                this.logger.error(`Failed to connect to margin user data`, Object.assign(Object.assign({}, loggerCategory), {\n                    error: e\n                }));\n                this.emit(\"error\", {\n                    wsKey: \"margin\" + \"_\" + \"userData\",\n                    error: e\n                });\n            }\n        });\n    }\n    /**\n     * Subscribe to isolated margin user data stream - listen key is automatically generated.\n     */ subscribeIsolatedMarginUserDataStream(symbol, forceNewConnection, isReconnecting) {\n        return __awaiter(this, void 0, void 0, function*() {\n            try {\n                const lowerCaseSymbol = symbol.toLowerCase();\n                const { listenKey } = yield this.getSpotRestClient().getIsolatedMarginUserDataListenKey({\n                    symbol: lowerCaseSymbol\n                });\n                const market = \"isolatedMargin\";\n                const wsKey = requestUtils_1.getWsKeyWithContext(market, \"userData\", lowerCaseSymbol, listenKey);\n                if (!forceNewConnection && this.wsStore.isWsConnecting(wsKey)) {\n                    this.logger.silly(\"Existing isolated margin user data connection in progress for listen key. Avoiding duplicate\");\n                    return this.getWs(wsKey);\n                }\n                this.setWsState(wsKey, isReconnecting ? WsStore_1.WsConnectionStateEnum.RECONNECTING : WsStore_1.WsConnectionStateEnum.CONNECTING);\n                const ws = this.connectToWsUrl(this.getWsBaseUrl(market, wsKey) + `/ws/${listenKey}`, wsKey, forceNewConnection);\n                // Start & store timer to keep alive listen key (and handle expiration)\n                this.setKeepAliveListenKeyTimer(listenKey, market, ws, wsKey, symbol);\n                return ws;\n            } catch (e) {\n                this.logger.error(`Failed to connect to isolated margin user data`, Object.assign(Object.assign({}, loggerCategory), {\n                    error: e,\n                    symbol\n                }));\n                this.emit(\"error\", {\n                    wsKey: \"isolatedMargin\" + \"_\" + \"userData\",\n                    error: e\n                });\n            }\n        });\n    }\n    /**\n     * --------------------------\n     * End of SPOT market websocket streams\n     * --------------------------\n     **/ /**\n     * Subscribe to USD-M Futures user data stream - listen key is automatically generated.\n     */ subscribeUsdFuturesUserDataStream(isTestnet, forceNewConnection, isReconnecting) {\n        return __awaiter(this, void 0, void 0, function*() {\n            try {\n                const restClient = this.getUSDMRestClient(isTestnet);\n                const { listenKey } = yield restClient.getFuturesUserDataListenKey();\n                const market = isTestnet ? \"usdmTestnet\" : \"usdm\";\n                const wsKey = requestUtils_1.getWsKeyWithContext(market, \"userData\", undefined, listenKey);\n                if (!forceNewConnection && this.wsStore.isWsConnecting(wsKey)) {\n                    this.logger.silly(\"Existing usd futures user data connection in progress for listen key. Avoiding duplicate\");\n                    return this.getWs(wsKey);\n                }\n                // Necessary so client knows this is a reconnect\n                this.setWsState(wsKey, isReconnecting ? WsStore_1.WsConnectionStateEnum.RECONNECTING : WsStore_1.WsConnectionStateEnum.CONNECTING);\n                const ws = this.connectToWsUrl(this.getWsBaseUrl(market, wsKey) + `/ws/${listenKey}`, wsKey, forceNewConnection);\n                // Start & store timer to keep alive listen key (and handle expiration)\n                this.setKeepAliveListenKeyTimer(listenKey, market, ws, wsKey, undefined, isTestnet);\n                return ws;\n            } catch (e) {\n                this.logger.error(`Failed to connect to USD Futures user data`, Object.assign(Object.assign({}, loggerCategory), {\n                    error: e\n                }));\n                this.emit(\"error\", {\n                    wsKey: \"usdm\" + \"_\" + \"userData\",\n                    error: e\n                });\n            }\n        });\n    }\n    /**\n     * Subscribe to COIN-M Futures user data stream - listen key is automatically generated.\n     */ subscribeCoinFuturesUserDataStream(isTestnet, forceNewConnection, isReconnecting) {\n        return __awaiter(this, void 0, void 0, function*() {\n            try {\n                const { listenKey } = yield this.getCOINMRestClient(isTestnet).getFuturesUserDataListenKey();\n                const market = isTestnet ? \"coinmTestnet\" : \"coinm\";\n                const wsKey = requestUtils_1.getWsKeyWithContext(market, \"userData\", undefined, listenKey);\n                if (!forceNewConnection && this.wsStore.isWsConnecting(wsKey)) {\n                    this.logger.silly(\"Existing usd futures user data connection in progress for listen key. Avoiding duplicate\");\n                    return this.getWs(wsKey);\n                }\n                // Necessary so client knows this is a reconnect\n                this.setWsState(wsKey, isReconnecting ? WsStore_1.WsConnectionStateEnum.RECONNECTING : WsStore_1.WsConnectionStateEnum.CONNECTING);\n                const ws = this.connectToWsUrl(this.getWsBaseUrl(market, wsKey) + `/ws/${listenKey}`, wsKey, forceNewConnection);\n                // Start & store timer to keep alive listen key (and handle expiration)\n                this.setKeepAliveListenKeyTimer(listenKey, market, ws, wsKey, undefined, isTestnet);\n                return ws;\n            } catch (e) {\n                this.logger.error(`Failed to connect to COIN Futures user data`, Object.assign(Object.assign({}, loggerCategory), {\n                    error: e\n                }));\n                this.emit(\"error\", {\n                    wsKey: \"coinm\" + \"_\" + \"userData\",\n                    error: e\n                });\n            }\n        });\n    }\n}\nexports.WebsocketClient = WebsocketClient; //# sourceMappingURL=websocket-client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/binance@2.8.15/node_modules/binance/lib/websocket-client.js\n");

/***/ })

};
;
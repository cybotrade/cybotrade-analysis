"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sinclair+typebox@0.28.20";
exports.ids = ["vendor-chunks/@sinclair+typebox@0.28.20"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/compiler/compiler.js":
/*!**************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/compiler/compiler.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*--------------------------------------------------------------------------\n\n@sinclair/typebox/compiler\n\nThe MIT License (MIT)\n\nCopyright (c) 2017-2023 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TypeCompiler = exports.TypeCompilerTypeGuardError = exports.TypeCompilerDereferenceError = exports.TypeCompilerUnknownTypeError = exports.TypeCheck = void 0;\nconst Types = __webpack_require__(/*! ../typebox */ \"(ssr)/../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/typebox.js\");\nconst index_1 = __webpack_require__(/*! ../errors/index */ \"(ssr)/../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/errors/index.js\");\nconst index_2 = __webpack_require__(/*! ../system/index */ \"(ssr)/../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/system/index.js\");\nconst hash_1 = __webpack_require__(/*! ../value/hash */ \"(ssr)/../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/value/hash.js\");\n// -------------------------------------------------------------------\n// TypeCheck\n// -------------------------------------------------------------------\nclass TypeCheck {\n    constructor(schema, references, checkFunc, code){\n        this.schema = schema;\n        this.references = references;\n        this.checkFunc = checkFunc;\n        this.code = code;\n    }\n    /** Returns the generated assertion code used to validate this type. */ Code() {\n        return this.code;\n    }\n    /** Returns an iterator for each error in this value. */ Errors(value) {\n        return index_1.ValueErrors.Errors(this.schema, this.references, value);\n    }\n    /** Returns true if the value matches the compiled type. */ Check(value) {\n        return this.checkFunc(value);\n    }\n}\nexports.TypeCheck = TypeCheck;\n// -------------------------------------------------------------------\n// Character\n// -------------------------------------------------------------------\nvar Character;\n(function(Character) {\n    function DollarSign(code) {\n        return code === 36;\n    }\n    Character.DollarSign = DollarSign;\n    function IsUnderscore(code) {\n        return code === 95;\n    }\n    Character.IsUnderscore = IsUnderscore;\n    function IsAlpha(code) {\n        return code >= 65 && code <= 90 || code >= 97 && code <= 122;\n    }\n    Character.IsAlpha = IsAlpha;\n    function IsNumeric(code) {\n        return code >= 48 && code <= 57;\n    }\n    Character.IsNumeric = IsNumeric;\n})(Character || (Character = {}));\n// -------------------------------------------------------------------\n// MemberExpression\n// -------------------------------------------------------------------\nvar MemberExpression;\n(function(MemberExpression) {\n    function IsFirstCharacterNumeric(value) {\n        if (value.length === 0) return false;\n        return Character.IsNumeric(value.charCodeAt(0));\n    }\n    function IsAccessor(value) {\n        if (IsFirstCharacterNumeric(value)) return false;\n        for(let i = 0; i < value.length; i++){\n            const code = value.charCodeAt(i);\n            const check = Character.IsAlpha(code) || Character.IsNumeric(code) || Character.DollarSign(code) || Character.IsUnderscore(code);\n            if (!check) return false;\n        }\n        return true;\n    }\n    function EscapeHyphen(key) {\n        return key.replace(/'/g, \"\\\\'\");\n    }\n    function Encode(object, key) {\n        return IsAccessor(key) ? `${object}.${key}` : `${object}['${EscapeHyphen(key)}']`;\n    }\n    MemberExpression.Encode = Encode;\n})(MemberExpression || (MemberExpression = {}));\n// -------------------------------------------------------------------\n// Identifier\n// -------------------------------------------------------------------\nvar Identifier;\n(function(Identifier) {\n    function Encode($id) {\n        const buffer = [];\n        for(let i = 0; i < $id.length; i++){\n            const code = $id.charCodeAt(i);\n            if (Character.IsNumeric(code) || Character.IsAlpha(code)) {\n                buffer.push($id.charAt(i));\n            } else {\n                buffer.push(`_${code}_`);\n            }\n        }\n        return buffer.join(\"\").replace(/__/g, \"_\");\n    }\n    Identifier.Encode = Encode;\n})(Identifier || (Identifier = {}));\n// -------------------------------------------------------------------\n// TypeCompiler\n// -------------------------------------------------------------------\nclass TypeCompilerUnknownTypeError extends Error {\n    constructor(schema){\n        super(\"TypeCompiler: Unknown type\");\n        this.schema = schema;\n    }\n}\nexports.TypeCompilerUnknownTypeError = TypeCompilerUnknownTypeError;\nclass TypeCompilerDereferenceError extends Error {\n    constructor(schema){\n        super(`TypeCompiler: Unable to dereference schema with $id '${schema.$ref}'`);\n        this.schema = schema;\n    }\n}\nexports.TypeCompilerDereferenceError = TypeCompilerDereferenceError;\nclass TypeCompilerTypeGuardError extends Error {\n    constructor(schema){\n        super(\"TypeCompiler: Preflight validation check failed to guard for the given schema\");\n        this.schema = schema;\n    }\n}\nexports.TypeCompilerTypeGuardError = TypeCompilerTypeGuardError;\n/** Compiles Types for Runtime Type Checking */ var TypeCompiler;\n(function(TypeCompiler) {\n    // -------------------------------------------------------------------\n    // Guards\n    // -------------------------------------------------------------------\n    function IsBigInt(value) {\n        return typeof value === \"bigint\";\n    }\n    function IsNumber(value) {\n        return typeof value === \"number\" && globalThis.Number.isFinite(value);\n    }\n    function IsString(value) {\n        return typeof value === \"string\";\n    }\n    // ----------------------------------------------------------------------\n    // SchemaGuards\n    // ----------------------------------------------------------------------\n    function IsAnyOrUnknown(schema) {\n        return schema[Types.Kind] === \"Any\" || schema[Types.Kind] === \"Unknown\";\n    }\n    // -------------------------------------------------------------------\n    // Polices\n    // -------------------------------------------------------------------\n    function IsExactOptionalProperty(value, key, expression) {\n        return index_2.TypeSystem.ExactOptionalPropertyTypes ? `('${key}' in ${value} ? ${expression} : true)` : `(${MemberExpression.Encode(value, key)} !== undefined ? ${expression} : true)`;\n    }\n    function IsObjectCheck(value) {\n        return !index_2.TypeSystem.AllowArrayObjects ? `(typeof ${value} === 'object' && ${value} !== null && !Array.isArray(${value}))` : `(typeof ${value} === 'object' && ${value} !== null)`;\n    }\n    function IsRecordCheck(value) {\n        return !index_2.TypeSystem.AllowArrayObjects ? `(typeof ${value} === 'object' && ${value} !== null && !Array.isArray(${value}) && !(${value} instanceof Date) && !(${value} instanceof Uint8Array))` : `(typeof ${value} === 'object' && ${value} !== null && !(${value} instanceof Date) && !(${value} instanceof Uint8Array))`;\n    }\n    function IsNumberCheck(value) {\n        return !index_2.TypeSystem.AllowNaN ? `(typeof ${value} === 'number' && Number.isFinite(${value}))` : `typeof ${value} === 'number'`;\n    }\n    function IsVoidCheck(value) {\n        return index_2.TypeSystem.AllowVoidNull ? `(${value} === undefined || ${value} === null)` : `${value} === undefined`;\n    }\n    // -------------------------------------------------------------------\n    // Types\n    // -------------------------------------------------------------------\n    function* Any(schema, references, value) {\n        yield \"true\";\n    }\n    function* Array(schema, references, value) {\n        yield `Array.isArray(${value})`;\n        if (IsNumber(schema.minItems)) yield `${value}.length >= ${schema.minItems}`;\n        if (IsNumber(schema.maxItems)) yield `${value}.length <= ${schema.maxItems}`;\n        if (schema.uniqueItems === true) yield `((function() { const set = new Set(); for(const element of ${value}) { const hashed = hash(element); if(set.has(hashed)) { return false } else { set.add(hashed) } } return true })())`;\n        const expression = CreateExpression(schema.items, references, \"value\");\n        const parameter = CreateParameter(\"value\", \"any\");\n        yield `${value}.every((${parameter}) => ${expression})`;\n    }\n    function* BigInt(schema, references, value) {\n        yield `(typeof ${value} === 'bigint')`;\n        if (IsBigInt(schema.multipleOf)) yield `(${value} % BigInt(${schema.multipleOf})) === 0`;\n        if (IsBigInt(schema.exclusiveMinimum)) yield `${value} > BigInt(${schema.exclusiveMinimum})`;\n        if (IsBigInt(schema.exclusiveMaximum)) yield `${value} < BigInt(${schema.exclusiveMaximum})`;\n        if (IsBigInt(schema.minimum)) yield `${value} >= BigInt(${schema.minimum})`;\n        if (IsBigInt(schema.maximum)) yield `${value} <= BigInt(${schema.maximum})`;\n    }\n    function* Boolean(schema, references, value) {\n        yield `(typeof ${value} === 'boolean')`;\n    }\n    function* Constructor(schema, references, value) {\n        yield* Visit(schema.returns, references, `${value}.prototype`);\n    }\n    function* Date(schema, references, value) {\n        yield `(${value} instanceof Date) && Number.isFinite(${value}.getTime())`;\n        if (IsNumber(schema.exclusiveMinimumTimestamp)) yield `${value}.getTime() > ${schema.exclusiveMinimumTimestamp}`;\n        if (IsNumber(schema.exclusiveMaximumTimestamp)) yield `${value}.getTime() < ${schema.exclusiveMaximumTimestamp}`;\n        if (IsNumber(schema.minimumTimestamp)) yield `${value}.getTime() >= ${schema.minimumTimestamp}`;\n        if (IsNumber(schema.maximumTimestamp)) yield `${value}.getTime() <= ${schema.maximumTimestamp}`;\n    }\n    function* Function(schema, references, value) {\n        yield `(typeof ${value} === 'function')`;\n    }\n    function* Integer(schema, references, value) {\n        yield `(typeof ${value} === 'number' && Number.isInteger(${value}))`;\n        if (IsNumber(schema.multipleOf)) yield `(${value} % ${schema.multipleOf}) === 0`;\n        if (IsNumber(schema.exclusiveMinimum)) yield `${value} > ${schema.exclusiveMinimum}`;\n        if (IsNumber(schema.exclusiveMaximum)) yield `${value} < ${schema.exclusiveMaximum}`;\n        if (IsNumber(schema.minimum)) yield `${value} >= ${schema.minimum}`;\n        if (IsNumber(schema.maximum)) yield `${value} <= ${schema.maximum}`;\n    }\n    function* Intersect(schema, references, value) {\n        const check1 = schema.allOf.map((schema)=>CreateExpression(schema, references, value)).join(\" && \");\n        if (schema.unevaluatedProperties === false) {\n            const keyCheck = PushLocal(`${new RegExp(Types.KeyResolver.ResolvePattern(schema))};`);\n            const check2 = `Object.getOwnPropertyNames(${value}).every(key => ${keyCheck}.test(key))`;\n            yield `(${check1} && ${check2})`;\n        } else if (Types.TypeGuard.TSchema(schema.unevaluatedProperties)) {\n            const keyCheck = PushLocal(`${new RegExp(Types.KeyResolver.ResolvePattern(schema))};`);\n            const check2 = `Object.getOwnPropertyNames(${value}).every(key => ${keyCheck}.test(key) || ${CreateExpression(schema.unevaluatedProperties, references, `${value}[key]`)})`;\n            yield `(${check1} && ${check2})`;\n        } else {\n            yield `(${check1})`;\n        }\n    }\n    function* Literal(schema, references, value) {\n        if (typeof schema.const === \"number\" || typeof schema.const === \"boolean\") {\n            yield `(${value} === ${schema.const})`;\n        } else {\n            yield `(${value} === '${schema.const}')`;\n        }\n    }\n    function* Never(schema, references, value) {\n        yield `false`;\n    }\n    function* Not(schema, references, value) {\n        const left = CreateExpression(schema.allOf[0].not, references, value);\n        const right = CreateExpression(schema.allOf[1], references, value);\n        yield `!${left} && ${right}`;\n    }\n    function* Null(schema, references, value) {\n        yield `(${value} === null)`;\n    }\n    function* Number(schema, references, value) {\n        yield IsNumberCheck(value);\n        if (IsNumber(schema.multipleOf)) yield `(${value} % ${schema.multipleOf}) === 0`;\n        if (IsNumber(schema.exclusiveMinimum)) yield `${value} > ${schema.exclusiveMinimum}`;\n        if (IsNumber(schema.exclusiveMaximum)) yield `${value} < ${schema.exclusiveMaximum}`;\n        if (IsNumber(schema.minimum)) yield `${value} >= ${schema.minimum}`;\n        if (IsNumber(schema.maximum)) yield `${value} <= ${schema.maximum}`;\n    }\n    function* Object1(schema, references, value) {\n        yield IsObjectCheck(value);\n        if (IsNumber(schema.minProperties)) yield `Object.getOwnPropertyNames(${value}).length >= ${schema.minProperties}`;\n        if (IsNumber(schema.maxProperties)) yield `Object.getOwnPropertyNames(${value}).length <= ${schema.maxProperties}`;\n        const knownKeys = globalThis.Object.getOwnPropertyNames(schema.properties);\n        for (const knownKey of knownKeys){\n            const memberExpression = MemberExpression.Encode(value, knownKey);\n            const property = schema.properties[knownKey];\n            if (schema.required && schema.required.includes(knownKey)) {\n                yield* Visit(property, references, memberExpression);\n                if (Types.ExtendsUndefined.Check(property) || IsAnyOrUnknown(property)) yield `('${knownKey}' in ${value})`;\n            } else {\n                const expression = CreateExpression(property, references, memberExpression);\n                yield IsExactOptionalProperty(value, knownKey, expression);\n            }\n        }\n        if (schema.additionalProperties === false) {\n            if (schema.required && schema.required.length === knownKeys.length) {\n                yield `Object.getOwnPropertyNames(${value}).length === ${knownKeys.length}`;\n            } else {\n                const keys = `[${knownKeys.map((key)=>`'${key}'`).join(\", \")}]`;\n                yield `Object.getOwnPropertyNames(${value}).every(key => ${keys}.includes(key))`;\n            }\n        }\n        if (typeof schema.additionalProperties === \"object\") {\n            const expression = CreateExpression(schema.additionalProperties, references, `${value}[key]`);\n            const keys = `[${knownKeys.map((key)=>`'${key}'`).join(\", \")}]`;\n            yield `(Object.getOwnPropertyNames(${value}).every(key => ${keys}.includes(key) || ${expression}))`;\n        }\n    }\n    function* Promise(schema, references, value) {\n        yield `(typeof value === 'object' && typeof ${value}.then === 'function')`;\n    }\n    function* Record(schema, references, value) {\n        yield IsRecordCheck(value);\n        if (IsNumber(schema.minProperties)) yield `Object.getOwnPropertyNames(${value}).length >= ${schema.minProperties}`;\n        if (IsNumber(schema.maxProperties)) yield `Object.getOwnPropertyNames(${value}).length <= ${schema.maxProperties}`;\n        const [patternKey, patternSchema] = globalThis.Object.entries(schema.patternProperties)[0];\n        const local = PushLocal(`new RegExp(/${patternKey}/)`);\n        const check1 = CreateExpression(patternSchema, references, \"value\");\n        const check2 = Types.TypeGuard.TSchema(schema.additionalProperties) ? CreateExpression(schema.additionalProperties, references, value) : schema.additionalProperties === false ? \"false\" : \"true\";\n        const expression = `(${local}.test(key) ? ${check1} : ${check2})`;\n        yield `(Object.entries(${value}).every(([key, value]) => ${expression}))`;\n    }\n    function* Ref(schema, references, value) {\n        const index = references.findIndex((foreign)=>foreign.$id === schema.$ref);\n        if (index === -1) throw new TypeCompilerDereferenceError(schema);\n        const target = references[index];\n        // Reference: If we have seen this reference before we can just yield and\n        // return the function call. If this isn't the case we defer to visit to\n        // generate and set the function for subsequent passes.\n        if (state.functions.has(schema.$ref)) return yield `${CreateFunctionName(schema.$ref)}(${value})`;\n        yield* Visit(target, references, value);\n    }\n    function* String(schema, references, value) {\n        yield `(typeof ${value} === 'string')`;\n        if (IsNumber(schema.minLength)) yield `${value}.length >= ${schema.minLength}`;\n        if (IsNumber(schema.maxLength)) yield `${value}.length <= ${schema.maxLength}`;\n        if (schema.pattern !== undefined) {\n            const local = PushLocal(`${new RegExp(schema.pattern)};`);\n            yield `${local}.test(${value})`;\n        }\n        if (schema.format !== undefined) {\n            yield `format('${schema.format}', ${value})`;\n        }\n    }\n    function* Symbol(schema, references, value) {\n        yield `(typeof ${value} === 'symbol')`;\n    }\n    function* TemplateLiteral(schema, references, value) {\n        yield `(typeof ${value} === 'string')`;\n        const local = PushLocal(`${new RegExp(schema.pattern)};`);\n        yield `${local}.test(${value})`;\n    }\n    function* This(schema, references, value) {\n        const func = CreateFunctionName(schema.$ref);\n        yield `${func}(${value})`;\n    }\n    function* Tuple(schema, references, value) {\n        yield `Array.isArray(${value})`;\n        if (schema.items === undefined) return yield `${value}.length === 0`;\n        yield `(${value}.length === ${schema.maxItems})`;\n        for(let i = 0; i < schema.items.length; i++){\n            const expression = CreateExpression(schema.items[i], references, `${value}[${i}]`);\n            yield `${expression}`;\n        }\n    }\n    function* Undefined(schema, references, value) {\n        yield `${value} === undefined`;\n    }\n    function* Union(schema, references, value) {\n        const expressions = schema.anyOf.map((schema)=>CreateExpression(schema, references, value));\n        yield `(${expressions.join(\" || \")})`;\n    }\n    function* Uint8Array(schema, references, value) {\n        yield `${value} instanceof Uint8Array`;\n        if (IsNumber(schema.maxByteLength)) yield `(${value}.length <= ${schema.maxByteLength})`;\n        if (IsNumber(schema.minByteLength)) yield `(${value}.length >= ${schema.minByteLength})`;\n    }\n    function* Unknown(schema, references, value) {\n        yield \"true\";\n    }\n    function* Void(schema, references, value) {\n        yield IsVoidCheck(value);\n    }\n    function* UserDefined(schema, references, value) {\n        const schema_key = `schema_key_${state.customs.size}`;\n        state.customs.set(schema_key, schema);\n        yield `custom('${schema[Types.Kind]}', '${schema_key}', ${value})`;\n    }\n    function* Visit(schema, references, value, root = false) {\n        const references_ = IsString(schema.$id) ? [\n            ...references,\n            schema\n        ] : references;\n        const schema_ = schema;\n        // Rule: Types with identifiers are hoisted into their own functions.\n        // The following will generate a function for the schema and yield the\n        // call to that function. This call is only made if NOT the root type\n        // which allows the generated function to yield its expression. The\n        // root argument is only true when making calls via CreateFunction().\n        // Note there is potential to omit the root argument and conditional\n        // by refactoring the logic below. Consider for review.\n        if (IsString(schema.$id)) {\n            const name = CreateFunctionName(schema.$id);\n            if (!state.functions.has(schema.$id)) {\n                state.functions.add(schema.$id);\n                const body = CreateFunction(name, schema, references, \"value\");\n                PushFunction(body);\n            }\n            if (!root) return yield `${name}(${value})`;\n        }\n        switch(schema_[Types.Kind]){\n            case \"Any\":\n                return yield* Any(schema_, references_, value);\n            case \"Array\":\n                return yield* Array(schema_, references_, value);\n            case \"BigInt\":\n                return yield* BigInt(schema_, references_, value);\n            case \"Boolean\":\n                return yield* Boolean(schema_, references_, value);\n            case \"Constructor\":\n                return yield* Constructor(schema_, references_, value);\n            case \"Date\":\n                return yield* Date(schema_, references_, value);\n            case \"Function\":\n                return yield* Function(schema_, references_, value);\n            case \"Integer\":\n                return yield* Integer(schema_, references_, value);\n            case \"Intersect\":\n                return yield* Intersect(schema_, references_, value);\n            case \"Literal\":\n                return yield* Literal(schema_, references_, value);\n            case \"Never\":\n                return yield* Never(schema_, references_, value);\n            case \"Not\":\n                return yield* Not(schema_, references_, value);\n            case \"Null\":\n                return yield* Null(schema_, references_, value);\n            case \"Number\":\n                return yield* Number(schema_, references_, value);\n            case \"Object\":\n                return yield* Object1(schema_, references_, value);\n            case \"Promise\":\n                return yield* Promise(schema_, references_, value);\n            case \"Record\":\n                return yield* Record(schema_, references_, value);\n            case \"Ref\":\n                return yield* Ref(schema_, references_, value);\n            case \"String\":\n                return yield* String(schema_, references_, value);\n            case \"Symbol\":\n                return yield* Symbol(schema_, references_, value);\n            case \"TemplateLiteral\":\n                return yield* TemplateLiteral(schema_, references_, value);\n            case \"This\":\n                return yield* This(schema_, references_, value);\n            case \"Tuple\":\n                return yield* Tuple(schema_, references_, value);\n            case \"Undefined\":\n                return yield* Undefined(schema_, references_, value);\n            case \"Union\":\n                return yield* Union(schema_, references_, value);\n            case \"Uint8Array\":\n                return yield* Uint8Array(schema_, references_, value);\n            case \"Unknown\":\n                return yield* Unknown(schema_, references_, value);\n            case \"Void\":\n                return yield* Void(schema_, references_, value);\n            default:\n                if (!Types.TypeRegistry.Has(schema_[Types.Kind])) throw new TypeCompilerUnknownTypeError(schema);\n                return yield* UserDefined(schema_, references_, value);\n        }\n    }\n    // -------------------------------------------------------------------\n    // Compiler State\n    // -------------------------------------------------------------------\n    // prettier-ignore\n    const state = {\n        language: \"javascript\",\n        variables: new Set(),\n        functions: new Set(),\n        customs: new Map()\n    };\n    function CreateFunctionName($id) {\n        return `check_${Identifier.Encode($id)}`;\n    }\n    function CreateExpression(schema, references, value) {\n        return `(${[\n            ...Visit(schema, references, value)\n        ].join(\" && \")})`;\n    }\n    function CreateParameter(name, type) {\n        const annotation = state.language === \"typescript\" ? `: ${type}` : \"\";\n        return `${name}${annotation}`;\n    }\n    function CreateReturns(type) {\n        return state.language === \"typescript\" ? `: ${type}` : \"\";\n    }\n    function CreateFunction(name, schema, references, value) {\n        const expression = [\n            ...Visit(schema, references, value, true)\n        ].map((condition)=>`    ${condition}`).join(\" &&\\n\");\n        const parameter = CreateParameter(\"value\", \"any\");\n        const returns = CreateReturns(\"boolean\");\n        return `function ${name}(${parameter})${returns} {\\n  return (\\n${expression}\\n )\\n}`;\n    }\n    function PushFunction(functionBody) {\n        state.variables.add(functionBody);\n    }\n    function PushLocal(expression) {\n        const local = `local_${state.variables.size}`;\n        state.variables.add(`const ${local} = ${expression}`);\n        return local;\n    }\n    function GetLocals() {\n        return [\n            ...state.variables.values()\n        ];\n    }\n    // -------------------------------------------------------------------\n    // Compile\n    // -------------------------------------------------------------------\n    function Build(schema, references) {\n        const check = CreateFunction(\"check\", schema, references, \"value\"); // interior visit\n        const locals = GetLocals();\n        const parameter = CreateParameter(\"value\", \"any\");\n        const returns = CreateReturns(\"boolean\");\n        // prettier-ignore\n        return IsString(schema.$id) // ensure top level schemas with $id's are hoisted\n         ? `${locals.join(\"\\n\")}\\nreturn function check(${parameter})${returns} {\\n  return ${CreateFunctionName(schema.$id)}(value)\\n}` : `${locals.join(\"\\n\")}\\nreturn ${check}`;\n    }\n    /** Returns the generated assertion code used to validate this type. */ function Code(schema, references = [], options = {\n        language: \"javascript\"\n    }) {\n        // compiler-reset\n        state.language = options.language;\n        state.variables.clear();\n        state.functions.clear();\n        state.customs.clear();\n        if (!Types.TypeGuard.TSchema(schema)) throw new TypeCompilerTypeGuardError(schema);\n        for (const schema of references)if (!Types.TypeGuard.TSchema(schema)) throw new TypeCompilerTypeGuardError(schema);\n        return Build(schema, references);\n    }\n    TypeCompiler.Code = Code;\n    /** Compiles the given type for runtime type checking. This compiler only accepts known TypeBox types non-inclusive of unsafe types. */ function Compile(schema, references = []) {\n        const code = Code(schema, references, {\n            language: \"javascript\"\n        });\n        const customs = new Map(state.customs);\n        const compiledFunction = globalThis.Function(\"custom\", \"format\", \"hash\", code);\n        const checkFunction = compiledFunction((kind, schema_key, value)=>{\n            if (!Types.TypeRegistry.Has(kind) || !customs.has(schema_key)) return false;\n            const schema = customs.get(schema_key);\n            const func = Types.TypeRegistry.Get(kind);\n            return func(schema, value);\n        }, (format, value)=>{\n            if (!Types.FormatRegistry.Has(format)) return false;\n            const func = Types.FormatRegistry.Get(format);\n            return func(value);\n        }, (value)=>{\n            return hash_1.ValueHash.Create(value);\n        });\n        return new TypeCheck(schema, references, checkFunction, code);\n    }\n    TypeCompiler.Compile = Compile;\n})(TypeCompiler || (exports.TypeCompiler = TypeCompiler = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/compiler/compiler.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/compiler/index.js":
/*!***********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/compiler/index.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*--------------------------------------------------------------------------\n\n@sinclair/typebox/compiler\n\nThe MIT License (MIT)\n\nCopyright (c) 2017-2023 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/ var __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ValueErrorType = void 0;\nvar index_1 = __webpack_require__(/*! ../errors/index */ \"(ssr)/../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/errors/index.js\");\nObject.defineProperty(exports, \"ValueErrorType\", ({\n    enumerable: true,\n    get: function() {\n        return index_1.ValueErrorType;\n    }\n}));\n__exportStar(__webpack_require__(/*! ./compiler */ \"(ssr)/../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/compiler/compiler.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzaW5jbGFpcit0eXBlYm94QDAuMjguMjAvbm9kZV9tb2R1bGVzL0BzaW5jbGFpci90eXBlYm94L2NvbXBpbGVyL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzJFQTBCMkUsR0FDM0UsSUFBSUEsa0JBQWtCLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsZUFBZSxJQUFNQyxDQUFBQSxPQUFPQyxNQUFNLEdBQUksU0FBU0MsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsRUFBRTtJQUMxRixJQUFJQSxPQUFPQyxXQUFXRCxLQUFLRDtJQUMzQixJQUFJRyxPQUFPUCxPQUFPUSx3QkFBd0IsQ0FBQ0wsR0FBR0M7SUFDOUMsSUFBSSxDQUFDRyxRQUFTLFVBQVNBLE9BQU8sQ0FBQ0osRUFBRU0sVUFBVSxHQUFHRixLQUFLRyxRQUFRLElBQUlILEtBQUtJLFlBQVksR0FBRztRQUNqRkosT0FBTztZQUFFSyxZQUFZO1lBQU1DLEtBQUs7Z0JBQWEsT0FBT1YsQ0FBQyxDQUFDQyxFQUFFO1lBQUU7UUFBRTtJQUM5RDtJQUNBSixPQUFPYyxjQUFjLENBQUNaLEdBQUdHLElBQUlFO0FBQ2pDLElBQU0sU0FBU0wsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsRUFBRTtJQUN0QixJQUFJQSxPQUFPQyxXQUFXRCxLQUFLRDtJQUMzQkYsQ0FBQyxDQUFDRyxHQUFHLEdBQUdGLENBQUMsQ0FBQ0MsRUFBRTtBQUNoQixDQUFDO0FBQ0QsSUFBSVcsZUFBZSxDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLFlBQVksSUFBSyxTQUFTWixDQUFDLEVBQUVhLFFBQU87SUFDakUsSUFBSyxJQUFJQyxLQUFLZCxFQUFHLElBQUljLE1BQU0sYUFBYSxDQUFDakIsT0FBT2tCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNKLFVBQVNDLElBQUlsQixnQkFBZ0JpQixVQUFTYixHQUFHYztBQUMzSDtBQUNBakIsOENBQTZDO0lBQUVxQixPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdETCxzQkFBc0IsR0FBRyxLQUFLO0FBQzlCLElBQUlPLFVBQVVDLG1CQUFPQSxDQUFDLGdJQUFpQjtBQUN2Q3hCLGtEQUFpRDtJQUFFWSxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPVSxRQUFRRCxjQUFjO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDM0hQLGFBQWFTLG1CQUFPQSxDQUFDLGdJQUFZLEdBQUdSIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2luY2xhaXIrdHlwZWJveEAwLjI4LjIwL25vZGVfbW9kdWxlcy9Ac2luY2xhaXIvdHlwZWJveC9jb21waWxlci9pbmRleC5qcz8xODg4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5Ac2luY2xhaXIvdHlwZWJveC9jb21waWxlclxuXG5UaGUgTUlUIExpY2Vuc2UgKE1JVClcblxuQ29weXJpZ2h0IChjKSAyMDE3LTIwMjMgSGF5ZG4gUGF0ZXJzb24gKHNpbmNsYWlyKSA8aGF5ZG4uZGV2ZWxvcGVyQGdtYWlsLmNvbT5cblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuVEhFIFNPRlRXQVJFLlxuXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlZhbHVlRXJyb3JUeXBlID0gdm9pZCAwO1xudmFyIGluZGV4XzEgPSByZXF1aXJlKFwiLi4vZXJyb3JzL2luZGV4XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVmFsdWVFcnJvclR5cGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGluZGV4XzEuVmFsdWVFcnJvclR5cGU7IH0gfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29tcGlsZXJcIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbIl9fY3JlYXRlQmluZGluZyIsIk9iamVjdCIsImNyZWF0ZSIsIm8iLCJtIiwiayIsImsyIiwidW5kZWZpbmVkIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZXNNb2R1bGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZXhwb3J0U3RhciIsImV4cG9ydHMiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwidmFsdWUiLCJWYWx1ZUVycm9yVHlwZSIsImluZGV4XzEiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/compiler/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/errors/errors.js":
/*!**********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/errors/errors.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ValueErrors = exports.ValueErrorsDereferenceError = exports.ValueErrorsUnknownTypeError = exports.ValueErrorIterator = exports.ValueErrorType = void 0;\n/*--------------------------------------------------------------------------\n\n@sinclair/typebox/errors\n\nThe MIT License (MIT)\n\nCopyright (c) 2017-2023 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/ const Types = __webpack_require__(/*! ../typebox */ \"(ssr)/../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/typebox.js\");\nconst index_1 = __webpack_require__(/*! ../system/index */ \"(ssr)/../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/system/index.js\");\nconst hash_1 = __webpack_require__(/*! ../value/hash */ \"(ssr)/../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/value/hash.js\");\n// -------------------------------------------------------------------\n// ValueErrorType\n// -------------------------------------------------------------------\nvar ValueErrorType;\n(function(ValueErrorType) {\n    ValueErrorType[ValueErrorType[\"Array\"] = 0] = \"Array\";\n    ValueErrorType[ValueErrorType[\"ArrayMinItems\"] = 1] = \"ArrayMinItems\";\n    ValueErrorType[ValueErrorType[\"ArrayMaxItems\"] = 2] = \"ArrayMaxItems\";\n    ValueErrorType[ValueErrorType[\"ArrayUniqueItems\"] = 3] = \"ArrayUniqueItems\";\n    ValueErrorType[ValueErrorType[\"BigInt\"] = 4] = \"BigInt\";\n    ValueErrorType[ValueErrorType[\"BigIntMultipleOf\"] = 5] = \"BigIntMultipleOf\";\n    ValueErrorType[ValueErrorType[\"BigIntExclusiveMinimum\"] = 6] = \"BigIntExclusiveMinimum\";\n    ValueErrorType[ValueErrorType[\"BigIntExclusiveMaximum\"] = 7] = \"BigIntExclusiveMaximum\";\n    ValueErrorType[ValueErrorType[\"BigIntMinimum\"] = 8] = \"BigIntMinimum\";\n    ValueErrorType[ValueErrorType[\"BigIntMaximum\"] = 9] = \"BigIntMaximum\";\n    ValueErrorType[ValueErrorType[\"Boolean\"] = 10] = \"Boolean\";\n    ValueErrorType[ValueErrorType[\"Date\"] = 11] = \"Date\";\n    ValueErrorType[ValueErrorType[\"DateExclusiveMinimumTimestamp\"] = 12] = \"DateExclusiveMinimumTimestamp\";\n    ValueErrorType[ValueErrorType[\"DateExclusiveMaximumTimestamp\"] = 13] = \"DateExclusiveMaximumTimestamp\";\n    ValueErrorType[ValueErrorType[\"DateMinimumTimestamp\"] = 14] = \"DateMinimumTimestamp\";\n    ValueErrorType[ValueErrorType[\"DateMaximumTimestamp\"] = 15] = \"DateMaximumTimestamp\";\n    ValueErrorType[ValueErrorType[\"Function\"] = 16] = \"Function\";\n    ValueErrorType[ValueErrorType[\"Integer\"] = 17] = \"Integer\";\n    ValueErrorType[ValueErrorType[\"IntegerMultipleOf\"] = 18] = \"IntegerMultipleOf\";\n    ValueErrorType[ValueErrorType[\"IntegerExclusiveMinimum\"] = 19] = \"IntegerExclusiveMinimum\";\n    ValueErrorType[ValueErrorType[\"IntegerExclusiveMaximum\"] = 20] = \"IntegerExclusiveMaximum\";\n    ValueErrorType[ValueErrorType[\"IntegerMinimum\"] = 21] = \"IntegerMinimum\";\n    ValueErrorType[ValueErrorType[\"IntegerMaximum\"] = 22] = \"IntegerMaximum\";\n    ValueErrorType[ValueErrorType[\"Intersect\"] = 23] = \"Intersect\";\n    ValueErrorType[ValueErrorType[\"IntersectUnevaluatedProperties\"] = 24] = \"IntersectUnevaluatedProperties\";\n    ValueErrorType[ValueErrorType[\"Literal\"] = 25] = \"Literal\";\n    ValueErrorType[ValueErrorType[\"Never\"] = 26] = \"Never\";\n    ValueErrorType[ValueErrorType[\"Not\"] = 27] = \"Not\";\n    ValueErrorType[ValueErrorType[\"Null\"] = 28] = \"Null\";\n    ValueErrorType[ValueErrorType[\"Number\"] = 29] = \"Number\";\n    ValueErrorType[ValueErrorType[\"NumberMultipleOf\"] = 30] = \"NumberMultipleOf\";\n    ValueErrorType[ValueErrorType[\"NumberExclusiveMinimum\"] = 31] = \"NumberExclusiveMinimum\";\n    ValueErrorType[ValueErrorType[\"NumberExclusiveMaximum\"] = 32] = \"NumberExclusiveMaximum\";\n    ValueErrorType[ValueErrorType[\"NumberMinimum\"] = 33] = \"NumberMinimum\";\n    ValueErrorType[ValueErrorType[\"NumberMaximum\"] = 34] = \"NumberMaximum\";\n    ValueErrorType[ValueErrorType[\"Object\"] = 35] = \"Object\";\n    ValueErrorType[ValueErrorType[\"ObjectMinProperties\"] = 36] = \"ObjectMinProperties\";\n    ValueErrorType[ValueErrorType[\"ObjectMaxProperties\"] = 37] = \"ObjectMaxProperties\";\n    ValueErrorType[ValueErrorType[\"ObjectAdditionalProperties\"] = 38] = \"ObjectAdditionalProperties\";\n    ValueErrorType[ValueErrorType[\"ObjectRequiredProperties\"] = 39] = \"ObjectRequiredProperties\";\n    ValueErrorType[ValueErrorType[\"Promise\"] = 40] = \"Promise\";\n    ValueErrorType[ValueErrorType[\"RecordKeyNumeric\"] = 41] = \"RecordKeyNumeric\";\n    ValueErrorType[ValueErrorType[\"RecordKeyString\"] = 42] = \"RecordKeyString\";\n    ValueErrorType[ValueErrorType[\"String\"] = 43] = \"String\";\n    ValueErrorType[ValueErrorType[\"StringMinLength\"] = 44] = \"StringMinLength\";\n    ValueErrorType[ValueErrorType[\"StringMaxLength\"] = 45] = \"StringMaxLength\";\n    ValueErrorType[ValueErrorType[\"StringPattern\"] = 46] = \"StringPattern\";\n    ValueErrorType[ValueErrorType[\"StringFormatUnknown\"] = 47] = \"StringFormatUnknown\";\n    ValueErrorType[ValueErrorType[\"StringFormat\"] = 48] = \"StringFormat\";\n    ValueErrorType[ValueErrorType[\"Symbol\"] = 49] = \"Symbol\";\n    ValueErrorType[ValueErrorType[\"TupleZeroLength\"] = 50] = \"TupleZeroLength\";\n    ValueErrorType[ValueErrorType[\"TupleLength\"] = 51] = \"TupleLength\";\n    ValueErrorType[ValueErrorType[\"Undefined\"] = 52] = \"Undefined\";\n    ValueErrorType[ValueErrorType[\"Union\"] = 53] = \"Union\";\n    ValueErrorType[ValueErrorType[\"Uint8Array\"] = 54] = \"Uint8Array\";\n    ValueErrorType[ValueErrorType[\"Uint8ArrayMinByteLength\"] = 55] = \"Uint8ArrayMinByteLength\";\n    ValueErrorType[ValueErrorType[\"Uint8ArrayMaxByteLength\"] = 56] = \"Uint8ArrayMaxByteLength\";\n    ValueErrorType[ValueErrorType[\"Void\"] = 57] = \"Void\";\n    ValueErrorType[ValueErrorType[\"Custom\"] = 58] = \"Custom\";\n})(ValueErrorType || (exports.ValueErrorType = ValueErrorType = {}));\n// -------------------------------------------------------------------\n// ValueErrorIterator\n// -------------------------------------------------------------------\nclass ValueErrorIterator {\n    constructor(iterator){\n        this.iterator = iterator;\n    }\n    [Symbol.iterator]() {\n        return this.iterator;\n    }\n    /** Returns the first value error or undefined if no errors */ First() {\n        const next = this.iterator.next();\n        return next.done ? undefined : next.value;\n    }\n}\nexports.ValueErrorIterator = ValueErrorIterator;\n// -------------------------------------------------------------------\n// ValueErrors\n// -------------------------------------------------------------------\nclass ValueErrorsUnknownTypeError extends Error {\n    constructor(schema){\n        super(\"ValueErrors: Unknown type\");\n        this.schema = schema;\n    }\n}\nexports.ValueErrorsUnknownTypeError = ValueErrorsUnknownTypeError;\nclass ValueErrorsDereferenceError extends Error {\n    constructor(schema){\n        super(`ValueErrors: Unable to dereference schema with $id '${schema.$ref}'`);\n        this.schema = schema;\n    }\n}\nexports.ValueErrorsDereferenceError = ValueErrorsDereferenceError;\n/** Provides functionality to generate a sequence of errors against a TypeBox type.  */ var ValueErrors;\n(function(ValueErrors) {\n    // ----------------------------------------------------------------------\n    // Guards\n    // ----------------------------------------------------------------------\n    function IsBigInt(value) {\n        return typeof value === \"bigint\";\n    }\n    function IsInteger(value) {\n        return globalThis.Number.isInteger(value);\n    }\n    function IsString(value) {\n        return typeof value === \"string\";\n    }\n    function IsDefined(value) {\n        return value !== undefined;\n    }\n    // ----------------------------------------------------------------------\n    // Policies\n    // ----------------------------------------------------------------------\n    function IsExactOptionalProperty(value, key) {\n        return index_1.TypeSystem.ExactOptionalPropertyTypes ? key in value : value[key] !== undefined;\n    }\n    function IsObject(value) {\n        const result = typeof value === \"object\" && value !== null;\n        return index_1.TypeSystem.AllowArrayObjects ? result : result && !globalThis.Array.isArray(value);\n    }\n    function IsRecordObject(value) {\n        return IsObject(value) && !(value instanceof globalThis.Date) && !(value instanceof globalThis.Uint8Array);\n    }\n    function IsNumber(value) {\n        const result = typeof value === \"number\";\n        return index_1.TypeSystem.AllowNaN ? result : result && globalThis.Number.isFinite(value);\n    }\n    function IsVoid(value) {\n        const result = value === undefined;\n        return index_1.TypeSystem.AllowVoidNull ? result || value === null : result;\n    }\n    // ----------------------------------------------------------------------\n    // Types\n    // ----------------------------------------------------------------------\n    function* Any(schema, references, path, value) {}\n    function* Array(schema, references, path, value) {\n        if (!globalThis.Array.isArray(value)) {\n            return yield {\n                type: ValueErrorType.Array,\n                schema,\n                path,\n                value,\n                message: `Expected array`\n            };\n        }\n        if (IsDefined(schema.minItems) && !(value.length >= schema.minItems)) {\n            yield {\n                type: ValueErrorType.ArrayMinItems,\n                schema,\n                path,\n                value,\n                message: `Expected array length to be greater or equal to ${schema.minItems}`\n            };\n        }\n        if (IsDefined(schema.maxItems) && !(value.length <= schema.maxItems)) {\n            yield {\n                type: ValueErrorType.ArrayMinItems,\n                schema,\n                path,\n                value,\n                message: `Expected array length to be less or equal to ${schema.maxItems}`\n            };\n        }\n        // prettier-ignore\n        if (schema.uniqueItems === true && !function() {\n            const set = new Set();\n            for (const element of value){\n                const hashed = hash_1.ValueHash.Create(element);\n                if (set.has(hashed)) {\n                    return false;\n                } else {\n                    set.add(hashed);\n                }\n            }\n            return true;\n        }()) {\n            yield {\n                type: ValueErrorType.ArrayUniqueItems,\n                schema,\n                path,\n                value,\n                message: `Expected array elements to be unique`\n            };\n        }\n        for(let i = 0; i < value.length; i++){\n            yield* Visit(schema.items, references, `${path}/${i}`, value[i]);\n        }\n    }\n    function* BigInt(schema, references, path, value) {\n        if (!IsBigInt(value)) {\n            return yield {\n                type: ValueErrorType.BigInt,\n                schema,\n                path,\n                value,\n                message: `Expected bigint`\n            };\n        }\n        if (IsDefined(schema.multipleOf) && !(value % schema.multipleOf === globalThis.BigInt(0))) {\n            yield {\n                type: ValueErrorType.BigIntMultipleOf,\n                schema,\n                path,\n                value,\n                message: `Expected bigint to be a multiple of ${schema.multipleOf}`\n            };\n        }\n        if (IsDefined(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {\n            yield {\n                type: ValueErrorType.BigIntExclusiveMinimum,\n                schema,\n                path,\n                value,\n                message: `Expected bigint to be greater than ${schema.exclusiveMinimum}`\n            };\n        }\n        if (IsDefined(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {\n            yield {\n                type: ValueErrorType.BigIntExclusiveMaximum,\n                schema,\n                path,\n                value,\n                message: `Expected bigint to be less than ${schema.exclusiveMaximum}`\n            };\n        }\n        if (IsDefined(schema.minimum) && !(value >= schema.minimum)) {\n            yield {\n                type: ValueErrorType.BigIntMinimum,\n                schema,\n                path,\n                value,\n                message: `Expected bigint to be greater or equal to ${schema.minimum}`\n            };\n        }\n        if (IsDefined(schema.maximum) && !(value <= schema.maximum)) {\n            yield {\n                type: ValueErrorType.BigIntMaximum,\n                schema,\n                path,\n                value,\n                message: `Expected bigint to be less or equal to ${schema.maximum}`\n            };\n        }\n    }\n    function* Boolean(schema, references, path, value) {\n        if (!(typeof value === \"boolean\")) {\n            return yield {\n                type: ValueErrorType.Boolean,\n                schema,\n                path,\n                value,\n                message: `Expected boolean`\n            };\n        }\n    }\n    function* Constructor(schema, references, path, value) {\n        yield* Visit(schema.returns, references, path, value.prototype);\n    }\n    function* Date(schema, references, path, value) {\n        if (!(value instanceof globalThis.Date)) {\n            return yield {\n                type: ValueErrorType.Date,\n                schema,\n                path,\n                value,\n                message: `Expected Date object`\n            };\n        }\n        if (!globalThis.isFinite(value.getTime())) {\n            return yield {\n                type: ValueErrorType.Date,\n                schema,\n                path,\n                value,\n                message: `Invalid Date`\n            };\n        }\n        if (IsDefined(schema.exclusiveMinimumTimestamp) && !(value.getTime() > schema.exclusiveMinimumTimestamp)) {\n            yield {\n                type: ValueErrorType.DateExclusiveMinimumTimestamp,\n                schema,\n                path,\n                value,\n                message: `Expected Date timestamp to be greater than ${schema.exclusiveMinimum}`\n            };\n        }\n        if (IsDefined(schema.exclusiveMaximumTimestamp) && !(value.getTime() < schema.exclusiveMaximumTimestamp)) {\n            yield {\n                type: ValueErrorType.DateExclusiveMaximumTimestamp,\n                schema,\n                path,\n                value,\n                message: `Expected Date timestamp to be less than ${schema.exclusiveMaximum}`\n            };\n        }\n        if (IsDefined(schema.minimumTimestamp) && !(value.getTime() >= schema.minimumTimestamp)) {\n            yield {\n                type: ValueErrorType.DateMinimumTimestamp,\n                schema,\n                path,\n                value,\n                message: `Expected Date timestamp to be greater or equal to ${schema.minimum}`\n            };\n        }\n        if (IsDefined(schema.maximumTimestamp) && !(value.getTime() <= schema.maximumTimestamp)) {\n            yield {\n                type: ValueErrorType.DateMaximumTimestamp,\n                schema,\n                path,\n                value,\n                message: `Expected Date timestamp to be less or equal to ${schema.maximum}`\n            };\n        }\n    }\n    function* Function(schema, references, path, value) {\n        if (!(typeof value === \"function\")) {\n            return yield {\n                type: ValueErrorType.Function,\n                schema,\n                path,\n                value,\n                message: `Expected function`\n            };\n        }\n    }\n    function* Integer(schema, references, path, value) {\n        if (!IsInteger(value)) {\n            return yield {\n                type: ValueErrorType.Integer,\n                schema,\n                path,\n                value,\n                message: `Expected integer`\n            };\n        }\n        if (IsDefined(schema.multipleOf) && !(value % schema.multipleOf === 0)) {\n            yield {\n                type: ValueErrorType.IntegerMultipleOf,\n                schema,\n                path,\n                value,\n                message: `Expected integer to be a multiple of ${schema.multipleOf}`\n            };\n        }\n        if (IsDefined(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {\n            yield {\n                type: ValueErrorType.IntegerExclusiveMinimum,\n                schema,\n                path,\n                value,\n                message: `Expected integer to be greater than ${schema.exclusiveMinimum}`\n            };\n        }\n        if (IsDefined(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {\n            yield {\n                type: ValueErrorType.IntegerExclusiveMaximum,\n                schema,\n                path,\n                value,\n                message: `Expected integer to be less than ${schema.exclusiveMaximum}`\n            };\n        }\n        if (IsDefined(schema.minimum) && !(value >= schema.minimum)) {\n            yield {\n                type: ValueErrorType.IntegerMinimum,\n                schema,\n                path,\n                value,\n                message: `Expected integer to be greater or equal to ${schema.minimum}`\n            };\n        }\n        if (IsDefined(schema.maximum) && !(value <= schema.maximum)) {\n            yield {\n                type: ValueErrorType.IntegerMaximum,\n                schema,\n                path,\n                value,\n                message: `Expected integer to be less or equal to ${schema.maximum}`\n            };\n        }\n    }\n    function* Intersect(schema, references, path, value) {\n        for (const inner of schema.allOf){\n            const next = Visit(inner, references, path, value).next();\n            if (!next.done) {\n                yield next.value;\n                yield {\n                    type: ValueErrorType.Intersect,\n                    schema,\n                    path,\n                    value,\n                    message: `Expected all sub schemas to be valid`\n                };\n                return;\n            }\n        }\n        if (schema.unevaluatedProperties === false) {\n            const keyCheck = new RegExp(Types.KeyResolver.ResolvePattern(schema));\n            for (const valueKey of globalThis.Object.getOwnPropertyNames(value)){\n                if (!keyCheck.test(valueKey)) {\n                    yield {\n                        type: ValueErrorType.IntersectUnevaluatedProperties,\n                        schema,\n                        path: `${path}/${valueKey}`,\n                        value,\n                        message: `Unexpected property`\n                    };\n                }\n            }\n        }\n        if (typeof schema.unevaluatedProperties === \"object\") {\n            const keyCheck = new RegExp(Types.KeyResolver.ResolvePattern(schema));\n            for (const valueKey of globalThis.Object.getOwnPropertyNames(value)){\n                if (!keyCheck.test(valueKey)) {\n                    const next = Visit(schema.unevaluatedProperties, references, `${path}/${valueKey}`, value[valueKey]).next();\n                    if (!next.done) {\n                        yield next.value;\n                        yield {\n                            type: ValueErrorType.IntersectUnevaluatedProperties,\n                            schema,\n                            path: `${path}/${valueKey}`,\n                            value,\n                            message: `Invalid additional property`\n                        };\n                        return;\n                    }\n                }\n            }\n        }\n    }\n    function* Literal(schema, references, path, value) {\n        if (!(value === schema.const)) {\n            const error = typeof schema.const === \"string\" ? `'${schema.const}'` : schema.const;\n            return yield {\n                type: ValueErrorType.Literal,\n                schema,\n                path,\n                value,\n                message: `Expected ${error}`\n            };\n        }\n    }\n    function* Never(schema, references, path, value) {\n        yield {\n            type: ValueErrorType.Never,\n            schema,\n            path,\n            value,\n            message: `Value cannot be validated`\n        };\n    }\n    function* Not(schema, references, path, value) {\n        if (Visit(schema.allOf[0].not, references, path, value).next().done === true) {\n            yield {\n                type: ValueErrorType.Not,\n                schema,\n                path,\n                value,\n                message: `Value should not validate`\n            };\n        }\n        yield* Visit(schema.allOf[1], references, path, value);\n    }\n    function* Null(schema, references, path, value) {\n        if (!(value === null)) {\n            return yield {\n                type: ValueErrorType.Null,\n                schema,\n                path,\n                value,\n                message: `Expected null`\n            };\n        }\n    }\n    function* Number(schema, references, path, value) {\n        if (!IsNumber(value)) {\n            return yield {\n                type: ValueErrorType.Number,\n                schema,\n                path,\n                value,\n                message: `Expected number`\n            };\n        }\n        if (IsDefined(schema.multipleOf) && !(value % schema.multipleOf === 0)) {\n            yield {\n                type: ValueErrorType.NumberMultipleOf,\n                schema,\n                path,\n                value,\n                message: `Expected number to be a multiple of ${schema.multipleOf}`\n            };\n        }\n        if (IsDefined(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {\n            yield {\n                type: ValueErrorType.NumberExclusiveMinimum,\n                schema,\n                path,\n                value,\n                message: `Expected number to be greater than ${schema.exclusiveMinimum}`\n            };\n        }\n        if (IsDefined(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {\n            yield {\n                type: ValueErrorType.NumberExclusiveMaximum,\n                schema,\n                path,\n                value,\n                message: `Expected number to be less than ${schema.exclusiveMaximum}`\n            };\n        }\n        if (IsDefined(schema.minimum) && !(value >= schema.minimum)) {\n            yield {\n                type: ValueErrorType.NumberMinimum,\n                schema,\n                path,\n                value,\n                message: `Expected number to be greater or equal to ${schema.minimum}`\n            };\n        }\n        if (IsDefined(schema.maximum) && !(value <= schema.maximum)) {\n            yield {\n                type: ValueErrorType.NumberMaximum,\n                schema,\n                path,\n                value,\n                message: `Expected number to be less or equal to ${schema.maximum}`\n            };\n        }\n    }\n    function* Object1(schema, references, path, value) {\n        if (!IsObject(value)) {\n            return yield {\n                type: ValueErrorType.Object,\n                schema,\n                path,\n                value,\n                message: `Expected object`\n            };\n        }\n        if (IsDefined(schema.minProperties) && !(globalThis.Object.getOwnPropertyNames(value).length >= schema.minProperties)) {\n            yield {\n                type: ValueErrorType.ObjectMinProperties,\n                schema,\n                path,\n                value,\n                message: `Expected object to have at least ${schema.minProperties} properties`\n            };\n        }\n        if (IsDefined(schema.maxProperties) && !(globalThis.Object.getOwnPropertyNames(value).length <= schema.maxProperties)) {\n            yield {\n                type: ValueErrorType.ObjectMaxProperties,\n                schema,\n                path,\n                value,\n                message: `Expected object to have less than ${schema.minProperties} properties`\n            };\n        }\n        const requiredKeys = globalThis.Array.isArray(schema.required) ? schema.required : [];\n        const knownKeys = globalThis.Object.getOwnPropertyNames(schema.properties);\n        const unknownKeys = globalThis.Object.getOwnPropertyNames(value);\n        for (const knownKey of knownKeys){\n            const property = schema.properties[knownKey];\n            if (schema.required && schema.required.includes(knownKey)) {\n                yield* Visit(property, references, `${path}/${knownKey}`, value[knownKey]);\n                if (Types.ExtendsUndefined.Check(schema) && !(knownKey in value)) {\n                    yield {\n                        type: ValueErrorType.ObjectRequiredProperties,\n                        schema: property,\n                        path: `${path}/${knownKey}`,\n                        value: undefined,\n                        message: `Expected required property`\n                    };\n                }\n            } else {\n                if (IsExactOptionalProperty(value, knownKey)) {\n                    yield* Visit(property, references, `${path}/${knownKey}`, value[knownKey]);\n                }\n            }\n        }\n        for (const requiredKey of requiredKeys){\n            if (unknownKeys.includes(requiredKey)) continue;\n            yield {\n                type: ValueErrorType.ObjectRequiredProperties,\n                schema: schema.properties[requiredKey],\n                path: `${path}/${requiredKey}`,\n                value: undefined,\n                message: `Expected required property`\n            };\n        }\n        if (schema.additionalProperties === false) {\n            for (const valueKey of unknownKeys){\n                if (!knownKeys.includes(valueKey)) {\n                    yield {\n                        type: ValueErrorType.ObjectAdditionalProperties,\n                        schema,\n                        path: `${path}/${valueKey}`,\n                        value: value[valueKey],\n                        message: `Unexpected property`\n                    };\n                }\n            }\n        }\n        if (typeof schema.additionalProperties === \"object\") {\n            for (const valueKey of unknownKeys){\n                if (knownKeys.includes(valueKey)) continue;\n                yield* Visit(schema.additionalProperties, references, `${path}/${valueKey}`, value[valueKey]);\n            }\n        }\n    }\n    function* Promise(schema, references, path, value) {\n        if (!(typeof value === \"object\" && typeof value.then === \"function\")) {\n            yield {\n                type: ValueErrorType.Promise,\n                schema,\n                path,\n                value,\n                message: `Expected Promise`\n            };\n        }\n    }\n    function* Record(schema, references, path, value) {\n        if (!IsRecordObject(value)) {\n            return yield {\n                type: ValueErrorType.Object,\n                schema,\n                path,\n                value,\n                message: `Expected record object`\n            };\n        }\n        if (IsDefined(schema.minProperties) && !(globalThis.Object.getOwnPropertyNames(value).length >= schema.minProperties)) {\n            yield {\n                type: ValueErrorType.ObjectMinProperties,\n                schema,\n                path,\n                value,\n                message: `Expected object to have at least ${schema.minProperties} properties`\n            };\n        }\n        if (IsDefined(schema.maxProperties) && !(globalThis.Object.getOwnPropertyNames(value).length <= schema.maxProperties)) {\n            yield {\n                type: ValueErrorType.ObjectMaxProperties,\n                schema,\n                path,\n                value,\n                message: `Expected object to have less than ${schema.minProperties} properties`\n            };\n        }\n        const [patternKey, patternSchema] = globalThis.Object.entries(schema.patternProperties)[0];\n        const regex = new RegExp(patternKey);\n        for (const [propertyKey, propertyValue] of globalThis.Object.entries(value)){\n            if (regex.test(propertyKey)) {\n                yield* Visit(patternSchema, references, `${path}/${propertyKey}`, propertyValue);\n                continue;\n            }\n            if (typeof schema.additionalProperties === \"object\") {\n                yield* Visit(schema.additionalProperties, references, `${path}/${propertyKey}`, propertyValue);\n            }\n            if (schema.additionalProperties === false) {\n                const propertyPath = `${path}/${propertyKey}`;\n                const message = `Unexpected property '${propertyPath}'`;\n                return yield {\n                    type: ValueErrorType.ObjectAdditionalProperties,\n                    schema,\n                    path: propertyPath,\n                    value: propertyValue,\n                    message\n                };\n            }\n        }\n    }\n    function* Ref(schema, references, path, value) {\n        const index = references.findIndex((foreign)=>foreign.$id === schema.$ref);\n        if (index === -1) throw new ValueErrorsDereferenceError(schema);\n        const target = references[index];\n        yield* Visit(target, references, path, value);\n    }\n    function* String(schema, references, path, value) {\n        if (!IsString(value)) {\n            return yield {\n                type: ValueErrorType.String,\n                schema,\n                path,\n                value,\n                message: \"Expected string\"\n            };\n        }\n        if (IsDefined(schema.minLength) && !(value.length >= schema.minLength)) {\n            yield {\n                type: ValueErrorType.StringMinLength,\n                schema,\n                path,\n                value,\n                message: `Expected string length greater or equal to ${schema.minLength}`\n            };\n        }\n        if (IsDefined(schema.maxLength) && !(value.length <= schema.maxLength)) {\n            yield {\n                type: ValueErrorType.StringMaxLength,\n                schema,\n                path,\n                value,\n                message: `Expected string length less or equal to ${schema.maxLength}`\n            };\n        }\n        if (schema.pattern !== undefined) {\n            const regex = new RegExp(schema.pattern);\n            if (!regex.test(value)) {\n                yield {\n                    type: ValueErrorType.StringPattern,\n                    schema,\n                    path,\n                    value,\n                    message: `Expected string to match pattern ${schema.pattern}`\n                };\n            }\n        }\n        if (schema.format !== undefined) {\n            if (!Types.FormatRegistry.Has(schema.format)) {\n                yield {\n                    type: ValueErrorType.StringFormatUnknown,\n                    schema,\n                    path,\n                    value,\n                    message: `Unknown string format '${schema.format}'`\n                };\n            } else {\n                const format = Types.FormatRegistry.Get(schema.format);\n                if (!format(value)) {\n                    yield {\n                        type: ValueErrorType.StringFormat,\n                        schema,\n                        path,\n                        value,\n                        message: `Expected string to match format '${schema.format}'`\n                    };\n                }\n            }\n        }\n    }\n    function* Symbol1(schema, references, path, value) {\n        if (!(typeof value === \"symbol\")) {\n            return yield {\n                type: ValueErrorType.Symbol,\n                schema,\n                path,\n                value,\n                message: \"Expected symbol\"\n            };\n        }\n    }\n    function* TemplateLiteral(schema, references, path, value) {\n        if (!IsString(value)) {\n            return yield {\n                type: ValueErrorType.String,\n                schema,\n                path,\n                value,\n                message: \"Expected string\"\n            };\n        }\n        const regex = new RegExp(schema.pattern);\n        if (!regex.test(value)) {\n            yield {\n                type: ValueErrorType.StringPattern,\n                schema,\n                path,\n                value,\n                message: `Expected string to match pattern ${schema.pattern}`\n            };\n        }\n    }\n    function* This(schema, references, path, value) {\n        const index = references.findIndex((foreign)=>foreign.$id === schema.$ref);\n        if (index === -1) throw new ValueErrorsDereferenceError(schema);\n        const target = references[index];\n        yield* Visit(target, references, path, value);\n    }\n    function* Tuple(schema, references, path, value) {\n        if (!globalThis.Array.isArray(value)) {\n            return yield {\n                type: ValueErrorType.Array,\n                schema,\n                path,\n                value,\n                message: \"Expected Array\"\n            };\n        }\n        if (schema.items === undefined && !(value.length === 0)) {\n            return yield {\n                type: ValueErrorType.TupleZeroLength,\n                schema,\n                path,\n                value,\n                message: \"Expected tuple to have 0 elements\"\n            };\n        }\n        if (!(value.length === schema.maxItems)) {\n            yield {\n                type: ValueErrorType.TupleLength,\n                schema,\n                path,\n                value,\n                message: `Expected tuple to have ${schema.maxItems} elements`\n            };\n        }\n        if (!schema.items) {\n            return;\n        }\n        for(let i = 0; i < schema.items.length; i++){\n            yield* Visit(schema.items[i], references, `${path}/${i}`, value[i]);\n        }\n    }\n    function* Undefined(schema, references, path, value) {\n        if (!(value === undefined)) {\n            yield {\n                type: ValueErrorType.Undefined,\n                schema,\n                path,\n                value,\n                message: `Expected undefined`\n            };\n        }\n    }\n    function* Union(schema, references, path, value) {\n        const errors = [];\n        for (const inner of schema.anyOf){\n            const variantErrors = [\n                ...Visit(inner, references, path, value)\n            ];\n            if (variantErrors.length === 0) return;\n            errors.push(...variantErrors);\n        }\n        if (errors.length > 0) {\n            yield {\n                type: ValueErrorType.Union,\n                schema,\n                path,\n                value,\n                message: \"Expected value of union\"\n            };\n        }\n        for (const error of errors){\n            yield error;\n        }\n    }\n    function* Uint8Array(schema, references, path, value) {\n        if (!(value instanceof globalThis.Uint8Array)) {\n            return yield {\n                type: ValueErrorType.Uint8Array,\n                schema,\n                path,\n                value,\n                message: `Expected Uint8Array`\n            };\n        }\n        if (IsDefined(schema.maxByteLength) && !(value.length <= schema.maxByteLength)) {\n            yield {\n                type: ValueErrorType.Uint8ArrayMaxByteLength,\n                schema,\n                path,\n                value,\n                message: `Expected Uint8Array to have a byte length less or equal to ${schema.maxByteLength}`\n            };\n        }\n        if (IsDefined(schema.minByteLength) && !(value.length >= schema.minByteLength)) {\n            yield {\n                type: ValueErrorType.Uint8ArrayMinByteLength,\n                schema,\n                path,\n                value,\n                message: `Expected Uint8Array to have a byte length greater or equal to ${schema.maxByteLength}`\n            };\n        }\n    }\n    function* Unknown(schema, references, path, value) {}\n    function* Void(schema, references, path, value) {\n        if (!IsVoid(value)) {\n            return yield {\n                type: ValueErrorType.Void,\n                schema,\n                path,\n                value,\n                message: `Expected void`\n            };\n        }\n    }\n    function* UserDefined(schema, references, path, value) {\n        const check = Types.TypeRegistry.Get(schema[Types.Kind]);\n        if (!check(schema, value)) {\n            return yield {\n                type: ValueErrorType.Custom,\n                schema,\n                path,\n                value,\n                message: `Expected kind ${schema[Types.Kind]}`\n            };\n        }\n    }\n    function* Visit(schema, references, path, value) {\n        const references_ = IsDefined(schema.$id) ? [\n            ...references,\n            schema\n        ] : references;\n        const schema_ = schema;\n        switch(schema_[Types.Kind]){\n            case \"Any\":\n                return yield* Any(schema_, references_, path, value);\n            case \"Array\":\n                return yield* Array(schema_, references_, path, value);\n            case \"BigInt\":\n                return yield* BigInt(schema_, references_, path, value);\n            case \"Boolean\":\n                return yield* Boolean(schema_, references_, path, value);\n            case \"Constructor\":\n                return yield* Constructor(schema_, references_, path, value);\n            case \"Date\":\n                return yield* Date(schema_, references_, path, value);\n            case \"Function\":\n                return yield* Function(schema_, references_, path, value);\n            case \"Integer\":\n                return yield* Integer(schema_, references_, path, value);\n            case \"Intersect\":\n                return yield* Intersect(schema_, references_, path, value);\n            case \"Literal\":\n                return yield* Literal(schema_, references_, path, value);\n            case \"Never\":\n                return yield* Never(schema_, references_, path, value);\n            case \"Not\":\n                return yield* Not(schema_, references_, path, value);\n            case \"Null\":\n                return yield* Null(schema_, references_, path, value);\n            case \"Number\":\n                return yield* Number(schema_, references_, path, value);\n            case \"Object\":\n                return yield* Object1(schema_, references_, path, value);\n            case \"Promise\":\n                return yield* Promise(schema_, references_, path, value);\n            case \"Record\":\n                return yield* Record(schema_, references_, path, value);\n            case \"Ref\":\n                return yield* Ref(schema_, references_, path, value);\n            case \"String\":\n                return yield* String(schema_, references_, path, value);\n            case \"Symbol\":\n                return yield* Symbol1(schema_, references_, path, value);\n            case \"TemplateLiteral\":\n                return yield* TemplateLiteral(schema_, references_, path, value);\n            case \"This\":\n                return yield* This(schema_, references_, path, value);\n            case \"Tuple\":\n                return yield* Tuple(schema_, references_, path, value);\n            case \"Undefined\":\n                return yield* Undefined(schema_, references_, path, value);\n            case \"Union\":\n                return yield* Union(schema_, references_, path, value);\n            case \"Uint8Array\":\n                return yield* Uint8Array(schema_, references_, path, value);\n            case \"Unknown\":\n                return yield* Unknown(schema_, references_, path, value);\n            case \"Void\":\n                return yield* Void(schema_, references_, path, value);\n            default:\n                if (!Types.TypeRegistry.Has(schema_[Types.Kind])) throw new ValueErrorsUnknownTypeError(schema);\n                return yield* UserDefined(schema_, references_, path, value);\n        }\n    }\n    function Errors(schema, references, value) {\n        const iterator = Visit(schema, references, \"\", value);\n        return new ValueErrorIterator(iterator);\n    }\n    ValueErrors.Errors = Errors;\n})(ValueErrors || (exports.ValueErrors = ValueErrors = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/errors/errors.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/errors/index.js":
/*!*********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/errors/index.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*--------------------------------------------------------------------------\n\n@sinclair/typebox/errors\n\nThe MIT License (MIT)\n\nCopyright (c) 2017-2023 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/ var __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n__exportStar(__webpack_require__(/*! ./errors */ \"(ssr)/../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/errors/errors.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzaW5jbGFpcit0eXBlYm94QDAuMjguMjAvbm9kZV9tb2R1bGVzL0BzaW5jbGFpci90eXBlYm94L2Vycm9ycy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsyRUEwQjJFLEdBQzNFLElBQUlBLGtCQUFrQixDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLGVBQWUsSUFBTUMsQ0FBQUEsT0FBT0MsTUFBTSxHQUFJLFNBQVNDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEVBQUU7SUFDMUYsSUFBSUEsT0FBT0MsV0FBV0QsS0FBS0Q7SUFDM0IsSUFBSUcsT0FBT1AsT0FBT1Esd0JBQXdCLENBQUNMLEdBQUdDO0lBQzlDLElBQUksQ0FBQ0csUUFBUyxVQUFTQSxPQUFPLENBQUNKLEVBQUVNLFVBQVUsR0FBR0YsS0FBS0csUUFBUSxJQUFJSCxLQUFLSSxZQUFZLEdBQUc7UUFDakZKLE9BQU87WUFBRUssWUFBWTtZQUFNQyxLQUFLO2dCQUFhLE9BQU9WLENBQUMsQ0FBQ0MsRUFBRTtZQUFFO1FBQUU7SUFDOUQ7SUFDQUosT0FBT2MsY0FBYyxDQUFDWixHQUFHRyxJQUFJRTtBQUNqQyxJQUFNLFNBQVNMLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEVBQUU7SUFDdEIsSUFBSUEsT0FBT0MsV0FBV0QsS0FBS0Q7SUFDM0JGLENBQUMsQ0FBQ0csR0FBRyxHQUFHRixDQUFDLENBQUNDLEVBQUU7QUFDaEIsQ0FBQztBQUNELElBQUlXLGVBQWUsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxZQUFZLElBQUssU0FBU1osQ0FBQyxFQUFFYSxRQUFPO0lBQ2pFLElBQUssSUFBSUMsS0FBS2QsRUFBRyxJQUFJYyxNQUFNLGFBQWEsQ0FBQ2pCLE9BQU9rQixTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDSixVQUFTQyxJQUFJbEIsZ0JBQWdCaUIsVUFBU2IsR0FBR2M7QUFDM0g7QUFDQWpCLDhDQUE2QztJQUFFcUIsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RE4sYUFBYU8sbUJBQU9BLENBQUMsMEhBQVUsR0FBR04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzaW5jbGFpcit0eXBlYm94QDAuMjguMjAvbm9kZV9tb2R1bGVzL0BzaW5jbGFpci90eXBlYm94L2Vycm9ycy9pbmRleC5qcz9mMmY4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5Ac2luY2xhaXIvdHlwZWJveC9lcnJvcnNcblxuVGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cbkNvcHlyaWdodCAoYykgMjAxNy0yMDIzIEhheWRuIFBhdGVyc29uIChzaW5jbGFpcikgPGhheWRuLmRldmVsb3BlckBnbWFpbC5jb20+XG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbmFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cblRIRSBTT0ZUV0FSRS5cblxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2Vycm9yc1wiKSwgZXhwb3J0cyk7XG4iXSwibmFtZXMiOlsiX19jcmVhdGVCaW5kaW5nIiwiT2JqZWN0IiwiY3JlYXRlIiwibyIsIm0iLCJrIiwiazIiLCJ1bmRlZmluZWQiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19lc01vZHVsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsImRlZmluZVByb3BlcnR5IiwiX19leHBvcnRTdGFyIiwiZXhwb3J0cyIsInAiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJ2YWx1ZSIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/errors/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/system/index.js":
/*!*********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/system/index.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*--------------------------------------------------------------------------\n\n@sinclair/typebox/system\n\nThe MIT License (MIT)\n\nCopyright (c) 2017-2023 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/ var __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n__exportStar(__webpack_require__(/*! ./system */ \"(ssr)/../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/system/system.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzaW5jbGFpcit0eXBlYm94QDAuMjguMjAvbm9kZV9tb2R1bGVzL0BzaW5jbGFpci90eXBlYm94L3N5c3RlbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsyRUEwQjJFLEdBQzNFLElBQUlBLGtCQUFrQixDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLGVBQWUsSUFBTUMsQ0FBQUEsT0FBT0MsTUFBTSxHQUFJLFNBQVNDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEVBQUU7SUFDMUYsSUFBSUEsT0FBT0MsV0FBV0QsS0FBS0Q7SUFDM0IsSUFBSUcsT0FBT1AsT0FBT1Esd0JBQXdCLENBQUNMLEdBQUdDO0lBQzlDLElBQUksQ0FBQ0csUUFBUyxVQUFTQSxPQUFPLENBQUNKLEVBQUVNLFVBQVUsR0FBR0YsS0FBS0csUUFBUSxJQUFJSCxLQUFLSSxZQUFZLEdBQUc7UUFDakZKLE9BQU87WUFBRUssWUFBWTtZQUFNQyxLQUFLO2dCQUFhLE9BQU9WLENBQUMsQ0FBQ0MsRUFBRTtZQUFFO1FBQUU7SUFDOUQ7SUFDQUosT0FBT2MsY0FBYyxDQUFDWixHQUFHRyxJQUFJRTtBQUNqQyxJQUFNLFNBQVNMLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEVBQUU7SUFDdEIsSUFBSUEsT0FBT0MsV0FBV0QsS0FBS0Q7SUFDM0JGLENBQUMsQ0FBQ0csR0FBRyxHQUFHRixDQUFDLENBQUNDLEVBQUU7QUFDaEIsQ0FBQztBQUNELElBQUlXLGVBQWUsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxZQUFZLElBQUssU0FBU1osQ0FBQyxFQUFFYSxRQUFPO0lBQ2pFLElBQUssSUFBSUMsS0FBS2QsRUFBRyxJQUFJYyxNQUFNLGFBQWEsQ0FBQ2pCLE9BQU9rQixTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDSixVQUFTQyxJQUFJbEIsZ0JBQWdCaUIsVUFBU2IsR0FBR2M7QUFDM0g7QUFDQWpCLDhDQUE2QztJQUFFcUIsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RE4sYUFBYU8sbUJBQU9BLENBQUMsMEhBQVUsR0FBR04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzaW5jbGFpcit0eXBlYm94QDAuMjguMjAvbm9kZV9tb2R1bGVzL0BzaW5jbGFpci90eXBlYm94L3N5c3RlbS9pbmRleC5qcz9lZmQyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5Ac2luY2xhaXIvdHlwZWJveC9zeXN0ZW1cblxuVGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cbkNvcHlyaWdodCAoYykgMjAxNy0yMDIzIEhheWRuIFBhdGVyc29uIChzaW5jbGFpcikgPGhheWRuLmRldmVsb3BlckBnbWFpbC5jb20+XG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbmFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cblRIRSBTT0ZUV0FSRS5cblxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3N5c3RlbVwiKSwgZXhwb3J0cyk7XG4iXSwibmFtZXMiOlsiX19jcmVhdGVCaW5kaW5nIiwiT2JqZWN0IiwiY3JlYXRlIiwibyIsIm0iLCJrIiwiazIiLCJ1bmRlZmluZWQiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19lc01vZHVsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsImRlZmluZVByb3BlcnR5IiwiX19leHBvcnRTdGFyIiwiZXhwb3J0cyIsInAiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJ2YWx1ZSIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/system/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/system/system.js":
/*!**********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/system/system.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*--------------------------------------------------------------------------\n\n@sinclair/typebox/system\n\nThe MIT License (MIT)\n\nCopyright (c) 2017-2023 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TypeSystem = exports.TypeSystemDuplicateFormat = exports.TypeSystemDuplicateTypeKind = void 0;\nconst Types = __webpack_require__(/*! ../typebox */ \"(ssr)/../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/typebox.js\");\nclass TypeSystemDuplicateTypeKind extends Error {\n    constructor(kind){\n        super(`Duplicate type kind '${kind}' detected`);\n    }\n}\nexports.TypeSystemDuplicateTypeKind = TypeSystemDuplicateTypeKind;\nclass TypeSystemDuplicateFormat extends Error {\n    constructor(kind){\n        super(`Duplicate string format '${kind}' detected`);\n    }\n}\nexports.TypeSystemDuplicateFormat = TypeSystemDuplicateFormat;\n/** Creates user defined types and formats and provides overrides for value checking behaviours */ var TypeSystem;\n(function(TypeSystem) {\n    // ------------------------------------------------------------------------\n    // Assertion Policies\n    // ------------------------------------------------------------------------\n    /** Sets whether TypeBox should assert optional properties using the TypeScript `exactOptionalPropertyTypes` assertion policy. The default is `false` */ TypeSystem.ExactOptionalPropertyTypes = false;\n    /** Sets whether arrays should be treated as a kind of objects. The default is `false` */ TypeSystem.AllowArrayObjects = false;\n    /** Sets whether `NaN` or `Infinity` should be treated as valid numeric values. The default is `false` */ TypeSystem.AllowNaN = false;\n    /** Sets whether `null` should validate for void types. The default is `false` */ TypeSystem.AllowVoidNull = false;\n    // ------------------------------------------------------------------------\n    // String Formats and Types\n    // ------------------------------------------------------------------------\n    /** Creates a new type */ function Type(kind, check) {\n        if (Types.TypeRegistry.Has(kind)) throw new TypeSystemDuplicateTypeKind(kind);\n        Types.TypeRegistry.Set(kind, check);\n        return (options = {})=>Types.Type.Unsafe({\n                ...options,\n                [Types.Kind]: kind\n            });\n    }\n    TypeSystem.Type = Type;\n    /** Creates a new string format */ function Format(format, check) {\n        if (Types.FormatRegistry.Has(format)) throw new TypeSystemDuplicateFormat(format);\n        Types.FormatRegistry.Set(format, check);\n        return format;\n    }\n    TypeSystem.Format = Format;\n})(TypeSystem || (exports.TypeSystem = TypeSystem = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzaW5jbGFpcit0eXBlYm94QDAuMjguMjAvbm9kZV9tb2R1bGVzL0BzaW5jbGFpci90eXBlYm94L3N5c3RlbS9zeXN0ZW0uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MkVBMEIyRSxHQUMzRUEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGtCQUFrQixHQUFHQSxpQ0FBaUMsR0FBR0EsbUNBQW1DLEdBQUcsS0FBSztBQUNwRyxNQUFNSyxRQUFRQyxtQkFBT0EsQ0FBQyxzSEFBWTtBQUNsQyxNQUFNRixvQ0FBb0NHO0lBQ3RDQyxZQUFZQyxJQUFJLENBQUU7UUFDZCxLQUFLLENBQUMsQ0FBQyxxQkFBcUIsRUFBRUEsS0FBSyxVQUFVLENBQUM7SUFDbEQ7QUFDSjtBQUNBVCxtQ0FBbUMsR0FBR0k7QUFDdEMsTUFBTUQsa0NBQWtDSTtJQUNwQ0MsWUFBWUMsSUFBSSxDQUFFO1FBQ2QsS0FBSyxDQUFDLENBQUMseUJBQXlCLEVBQUVBLEtBQUssVUFBVSxDQUFDO0lBQ3REO0FBQ0o7QUFDQVQsaUNBQWlDLEdBQUdHO0FBQ3BDLGdHQUFnRyxHQUNoRyxJQUFJRDtBQUNILFVBQVVBLFVBQVU7SUFDakIsMkVBQTJFO0lBQzNFLHFCQUFxQjtJQUNyQiwyRUFBMkU7SUFDM0Usc0pBQXNKLEdBQ3RKQSxXQUFXUSwwQkFBMEIsR0FBRztJQUN4Qyx1RkFBdUYsR0FDdkZSLFdBQVdTLGlCQUFpQixHQUFHO0lBQy9CLHVHQUF1RyxHQUN2R1QsV0FBV1UsUUFBUSxHQUFHO0lBQ3RCLCtFQUErRSxHQUMvRVYsV0FBV1csYUFBYSxHQUFHO0lBQzNCLDJFQUEyRTtJQUMzRSwyQkFBMkI7SUFDM0IsMkVBQTJFO0lBQzNFLHVCQUF1QixHQUN2QixTQUFTQyxLQUFLTCxJQUFJLEVBQUVNLEtBQUs7UUFDckIsSUFBSVYsTUFBTVcsWUFBWSxDQUFDQyxHQUFHLENBQUNSLE9BQ3ZCLE1BQU0sSUFBSUwsNEJBQTRCSztRQUMxQ0osTUFBTVcsWUFBWSxDQUFDRSxHQUFHLENBQUNULE1BQU1NO1FBQzdCLE9BQU8sQ0FBQ0ksVUFBVSxDQUFDLENBQUMsR0FBS2QsTUFBTVMsSUFBSSxDQUFDTSxNQUFNLENBQUM7Z0JBQUUsR0FBR0QsT0FBTztnQkFBRSxDQUFDZCxNQUFNZ0IsSUFBSSxDQUFDLEVBQUVaO1lBQUs7SUFDaEY7SUFDQVAsV0FBV1ksSUFBSSxHQUFHQTtJQUNsQixnQ0FBZ0MsR0FDaEMsU0FBU1EsT0FBT0MsTUFBTSxFQUFFUixLQUFLO1FBQ3pCLElBQUlWLE1BQU1tQixjQUFjLENBQUNQLEdBQUcsQ0FBQ00sU0FDekIsTUFBTSxJQUFJcEIsMEJBQTBCb0I7UUFDeENsQixNQUFNbUIsY0FBYyxDQUFDTixHQUFHLENBQUNLLFFBQVFSO1FBQ2pDLE9BQU9RO0lBQ1g7SUFDQXJCLFdBQVdvQixNQUFNLEdBQUdBO0FBQ3hCLEdBQUdwQixjQUFlRixDQUFBQSxrQkFBa0IsR0FBR0UsYUFBYSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2luY2xhaXIrdHlwZWJveEAwLjI4LjIwL25vZGVfbW9kdWxlcy9Ac2luY2xhaXIvdHlwZWJveC9zeXN0ZW0vc3lzdGVtLmpzPzUwODkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbkBzaW5jbGFpci90eXBlYm94L3N5c3RlbVxuXG5UaGUgTUlUIExpY2Vuc2UgKE1JVClcblxuQ29weXJpZ2h0IChjKSAyMDE3LTIwMjMgSGF5ZG4gUGF0ZXJzb24gKHNpbmNsYWlyKSA8aGF5ZG4uZGV2ZWxvcGVyQGdtYWlsLmNvbT5cblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuVEhFIFNPRlRXQVJFLlxuXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UeXBlU3lzdGVtID0gZXhwb3J0cy5UeXBlU3lzdGVtRHVwbGljYXRlRm9ybWF0ID0gZXhwb3J0cy5UeXBlU3lzdGVtRHVwbGljYXRlVHlwZUtpbmQgPSB2b2lkIDA7XG5jb25zdCBUeXBlcyA9IHJlcXVpcmUoXCIuLi90eXBlYm94XCIpO1xuY2xhc3MgVHlwZVN5c3RlbUR1cGxpY2F0ZVR5cGVLaW5kIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGtpbmQpIHtcbiAgICAgICAgc3VwZXIoYER1cGxpY2F0ZSB0eXBlIGtpbmQgJyR7a2luZH0nIGRldGVjdGVkYCk7XG4gICAgfVxufVxuZXhwb3J0cy5UeXBlU3lzdGVtRHVwbGljYXRlVHlwZUtpbmQgPSBUeXBlU3lzdGVtRHVwbGljYXRlVHlwZUtpbmQ7XG5jbGFzcyBUeXBlU3lzdGVtRHVwbGljYXRlRm9ybWF0IGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGtpbmQpIHtcbiAgICAgICAgc3VwZXIoYER1cGxpY2F0ZSBzdHJpbmcgZm9ybWF0ICcke2tpbmR9JyBkZXRlY3RlZGApO1xuICAgIH1cbn1cbmV4cG9ydHMuVHlwZVN5c3RlbUR1cGxpY2F0ZUZvcm1hdCA9IFR5cGVTeXN0ZW1EdXBsaWNhdGVGb3JtYXQ7XG4vKiogQ3JlYXRlcyB1c2VyIGRlZmluZWQgdHlwZXMgYW5kIGZvcm1hdHMgYW5kIHByb3ZpZGVzIG92ZXJyaWRlcyBmb3IgdmFsdWUgY2hlY2tpbmcgYmVoYXZpb3VycyAqL1xudmFyIFR5cGVTeXN0ZW07XG4oZnVuY3Rpb24gKFR5cGVTeXN0ZW0pIHtcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBBc3NlcnRpb24gUG9saWNpZXNcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvKiogU2V0cyB3aGV0aGVyIFR5cGVCb3ggc2hvdWxkIGFzc2VydCBvcHRpb25hbCBwcm9wZXJ0aWVzIHVzaW5nIHRoZSBUeXBlU2NyaXB0IGBleGFjdE9wdGlvbmFsUHJvcGVydHlUeXBlc2AgYXNzZXJ0aW9uIHBvbGljeS4gVGhlIGRlZmF1bHQgaXMgYGZhbHNlYCAqL1xuICAgIFR5cGVTeXN0ZW0uRXhhY3RPcHRpb25hbFByb3BlcnR5VHlwZXMgPSBmYWxzZTtcbiAgICAvKiogU2V0cyB3aGV0aGVyIGFycmF5cyBzaG91bGQgYmUgdHJlYXRlZCBhcyBhIGtpbmQgb2Ygb2JqZWN0cy4gVGhlIGRlZmF1bHQgaXMgYGZhbHNlYCAqL1xuICAgIFR5cGVTeXN0ZW0uQWxsb3dBcnJheU9iamVjdHMgPSBmYWxzZTtcbiAgICAvKiogU2V0cyB3aGV0aGVyIGBOYU5gIG9yIGBJbmZpbml0eWAgc2hvdWxkIGJlIHRyZWF0ZWQgYXMgdmFsaWQgbnVtZXJpYyB2YWx1ZXMuIFRoZSBkZWZhdWx0IGlzIGBmYWxzZWAgKi9cbiAgICBUeXBlU3lzdGVtLkFsbG93TmFOID0gZmFsc2U7XG4gICAgLyoqIFNldHMgd2hldGhlciBgbnVsbGAgc2hvdWxkIHZhbGlkYXRlIGZvciB2b2lkIHR5cGVzLiBUaGUgZGVmYXVsdCBpcyBgZmFsc2VgICovXG4gICAgVHlwZVN5c3RlbS5BbGxvd1ZvaWROdWxsID0gZmFsc2U7XG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gU3RyaW5nIEZvcm1hdHMgYW5kIFR5cGVzXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLyoqIENyZWF0ZXMgYSBuZXcgdHlwZSAqL1xuICAgIGZ1bmN0aW9uIFR5cGUoa2luZCwgY2hlY2spIHtcbiAgICAgICAgaWYgKFR5cGVzLlR5cGVSZWdpc3RyeS5IYXMoa2luZCkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZVN5c3RlbUR1cGxpY2F0ZVR5cGVLaW5kKGtpbmQpO1xuICAgICAgICBUeXBlcy5UeXBlUmVnaXN0cnkuU2V0KGtpbmQsIGNoZWNrKTtcbiAgICAgICAgcmV0dXJuIChvcHRpb25zID0ge30pID0+IFR5cGVzLlR5cGUuVW5zYWZlKHsgLi4ub3B0aW9ucywgW1R5cGVzLktpbmRdOiBraW5kIH0pO1xuICAgIH1cbiAgICBUeXBlU3lzdGVtLlR5cGUgPSBUeXBlO1xuICAgIC8qKiBDcmVhdGVzIGEgbmV3IHN0cmluZyBmb3JtYXQgKi9cbiAgICBmdW5jdGlvbiBGb3JtYXQoZm9ybWF0LCBjaGVjaykge1xuICAgICAgICBpZiAoVHlwZXMuRm9ybWF0UmVnaXN0cnkuSGFzKGZvcm1hdCkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZVN5c3RlbUR1cGxpY2F0ZUZvcm1hdChmb3JtYXQpO1xuICAgICAgICBUeXBlcy5Gb3JtYXRSZWdpc3RyeS5TZXQoZm9ybWF0LCBjaGVjayk7XG4gICAgICAgIHJldHVybiBmb3JtYXQ7XG4gICAgfVxuICAgIFR5cGVTeXN0ZW0uRm9ybWF0ID0gRm9ybWF0O1xufSkoVHlwZVN5c3RlbSB8fCAoZXhwb3J0cy5UeXBlU3lzdGVtID0gVHlwZVN5c3RlbSA9IHt9KSk7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJUeXBlU3lzdGVtIiwiVHlwZVN5c3RlbUR1cGxpY2F0ZUZvcm1hdCIsIlR5cGVTeXN0ZW1EdXBsaWNhdGVUeXBlS2luZCIsIlR5cGVzIiwicmVxdWlyZSIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJraW5kIiwiRXhhY3RPcHRpb25hbFByb3BlcnR5VHlwZXMiLCJBbGxvd0FycmF5T2JqZWN0cyIsIkFsbG93TmFOIiwiQWxsb3dWb2lkTnVsbCIsIlR5cGUiLCJjaGVjayIsIlR5cGVSZWdpc3RyeSIsIkhhcyIsIlNldCIsIm9wdGlvbnMiLCJVbnNhZmUiLCJLaW5kIiwiRm9ybWF0IiwiZm9ybWF0IiwiRm9ybWF0UmVnaXN0cnkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/system/system.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/typebox.js":
/*!****************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/typebox.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*--------------------------------------------------------------------------\n\n@sinclair/typebox\n\nThe MIT License (MIT)\n\nCopyright (c) 2017-2023 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Type = exports.StandardType = exports.ExtendedTypeBuilder = exports.StandardTypeBuilder = exports.TypeBuilder = exports.TemplateLiteralDslParser = exports.TemplateLiteralGenerator = exports.TemplateLiteralFinite = exports.TemplateLiteralParser = exports.TemplateLiteralParserError = exports.TemplateLiteralResolver = exports.TemplateLiteralPattern = exports.UnionResolver = exports.KeyArrayResolver = exports.KeyResolver = exports.ObjectMap = exports.IndexedAccessor = exports.TypeClone = exports.TypeExtends = exports.TypeExtendsResult = exports.ExtendsUndefined = exports.TypeGuard = exports.TypeGuardUnknownTypeError = exports.FormatRegistry = exports.TypeRegistry = exports.PatternStringExact = exports.PatternNumberExact = exports.PatternBooleanExact = exports.PatternString = exports.PatternNumber = exports.PatternBoolean = exports.Kind = exports.Hint = exports.Modifier = void 0;\n// --------------------------------------------------------------------------\n// Symbols\n// --------------------------------------------------------------------------\nexports.Modifier = Symbol.for(\"TypeBox.Modifier\");\nexports.Hint = Symbol.for(\"TypeBox.Hint\");\nexports.Kind = Symbol.for(\"TypeBox.Kind\");\n// --------------------------------------------------------------------------\n// Patterns\n// --------------------------------------------------------------------------\nexports.PatternBoolean = \"(true|false)\";\nexports.PatternNumber = \"(0|[1-9][0-9]*)\";\nexports.PatternString = \"(.*)\";\nexports.PatternBooleanExact = `^${exports.PatternBoolean}$`;\nexports.PatternNumberExact = `^${exports.PatternNumber}$`;\nexports.PatternStringExact = `^${exports.PatternString}$`;\n/** A registry for user defined types */ var TypeRegistry;\n(function(TypeRegistry) {\n    const map = new Map();\n    /** Returns the entries in this registry */ function Entries() {\n        return new Map(map);\n    }\n    TypeRegistry.Entries = Entries;\n    /** Clears all user defined types */ function Clear() {\n        return map.clear();\n    }\n    TypeRegistry.Clear = Clear;\n    /** Returns true if this registry contains this kind */ function Has(kind) {\n        return map.has(kind);\n    }\n    TypeRegistry.Has = Has;\n    /** Sets a validation function for a user defined type */ function Set1(kind, func) {\n        map.set(kind, func);\n    }\n    TypeRegistry.Set = Set1;\n    /** Gets a custom validation function for a user defined type */ function Get(kind) {\n        return map.get(kind);\n    }\n    TypeRegistry.Get = Get;\n})(TypeRegistry || (exports.TypeRegistry = TypeRegistry = {}));\n/** A registry for user defined string formats */ var FormatRegistry;\n(function(FormatRegistry) {\n    const map = new Map();\n    /** Returns the entries in this registry */ function Entries() {\n        return new Map(map);\n    }\n    FormatRegistry.Entries = Entries;\n    /** Clears all user defined string formats */ function Clear() {\n        return map.clear();\n    }\n    FormatRegistry.Clear = Clear;\n    /** Returns true if the user defined string format exists */ function Has(format) {\n        return map.has(format);\n    }\n    FormatRegistry.Has = Has;\n    /** Sets a validation function for a user defined string format */ function Set1(format, func) {\n        map.set(format, func);\n    }\n    FormatRegistry.Set = Set1;\n    /** Gets a validation function for a user defined string format */ function Get(format) {\n        return map.get(format);\n    }\n    FormatRegistry.Get = Get;\n})(FormatRegistry || (exports.FormatRegistry = FormatRegistry = {}));\n// --------------------------------------------------------------------------\n// TypeGuard\n// --------------------------------------------------------------------------\nclass TypeGuardUnknownTypeError extends Error {\n    constructor(schema){\n        super(\"TypeGuard: Unknown type\");\n        this.schema = schema;\n    }\n}\nexports.TypeGuardUnknownTypeError = TypeGuardUnknownTypeError;\n/** Provides functions to test if JavaScript values are TypeBox types */ var TypeGuard;\n(function(TypeGuard) {\n    function IsObject(value) {\n        return typeof value === \"object\" && value !== null && !Array.isArray(value);\n    }\n    function IsArray(value) {\n        return typeof value === \"object\" && value !== null && Array.isArray(value);\n    }\n    function IsPattern(value) {\n        try {\n            new RegExp(value);\n            return true;\n        } catch  {\n            return false;\n        }\n    }\n    function IsControlCharacterFree(value) {\n        if (typeof value !== \"string\") return false;\n        for(let i = 0; i < value.length; i++){\n            const code = value.charCodeAt(i);\n            if (code >= 7 && code <= 13 || code === 27 || code === 127) {\n                return false;\n            }\n        }\n        return true;\n    }\n    function IsAdditionalProperties(value) {\n        return IsOptionalBoolean(value) || TSchema(value);\n    }\n    function IsBigInt(value) {\n        return typeof value === \"bigint\";\n    }\n    function IsString(value) {\n        return typeof value === \"string\";\n    }\n    function IsNumber(value) {\n        return typeof value === \"number\" && globalThis.Number.isFinite(value);\n    }\n    function IsBoolean(value) {\n        return typeof value === \"boolean\";\n    }\n    function IsOptionalBigInt(value) {\n        return value === undefined || value !== undefined && IsBigInt(value);\n    }\n    function IsOptionalNumber(value) {\n        return value === undefined || value !== undefined && IsNumber(value);\n    }\n    function IsOptionalBoolean(value) {\n        return value === undefined || value !== undefined && IsBoolean(value);\n    }\n    function IsOptionalString(value) {\n        return value === undefined || value !== undefined && IsString(value);\n    }\n    function IsOptionalPattern(value) {\n        return value === undefined || value !== undefined && IsString(value) && IsControlCharacterFree(value) && IsPattern(value);\n    }\n    function IsOptionalFormat(value) {\n        return value === undefined || value !== undefined && IsString(value) && IsControlCharacterFree(value);\n    }\n    function IsOptionalSchema(value) {\n        return value === undefined || TSchema(value);\n    }\n    /** Returns true if the given schema is TAny */ function TAny(schema) {\n        return TKind(schema) && schema[exports.Kind] === \"Any\" && IsOptionalString(schema.$id);\n    }\n    TypeGuard.TAny = TAny;\n    /** Returns true if the given schema is TArray */ function TArray(schema) {\n        return TKind(schema) && schema[exports.Kind] === \"Array\" && schema.type === \"array\" && IsOptionalString(schema.$id) && TSchema(schema.items) && IsOptionalNumber(schema.minItems) && IsOptionalNumber(schema.maxItems) && IsOptionalBoolean(schema.uniqueItems);\n    }\n    TypeGuard.TArray = TArray;\n    /** Returns true if the given schema is TBigInt */ function TBigInt(schema) {\n        // prettier-ignore\n        return TKind(schema) && schema[exports.Kind] === \"BigInt\" && schema.type === \"null\" && schema.typeOf === \"BigInt\" && IsOptionalString(schema.$id) && IsOptionalBigInt(schema.multipleOf) && IsOptionalBigInt(schema.minimum) && IsOptionalBigInt(schema.maximum) && IsOptionalBigInt(schema.exclusiveMinimum) && IsOptionalBigInt(schema.exclusiveMaximum);\n    }\n    TypeGuard.TBigInt = TBigInt;\n    /** Returns true if the given schema is TBoolean */ function TBoolean(schema) {\n        // prettier-ignore\n        return TKind(schema) && schema[exports.Kind] === \"Boolean\" && schema.type === \"boolean\" && IsOptionalString(schema.$id);\n    }\n    TypeGuard.TBoolean = TBoolean;\n    /** Returns true if the given schema is TConstructor */ function TConstructor(schema) {\n        // prettier-ignore\n        if (!(TKind(schema) && schema[exports.Kind] === \"Constructor\" && schema.type === \"object\" && schema.instanceOf === \"Constructor\" && IsOptionalString(schema.$id) && IsArray(schema.parameters) && TSchema(schema.returns))) {\n            return false;\n        }\n        for (const parameter of schema.parameters){\n            if (!TSchema(parameter)) return false;\n        }\n        return true;\n    }\n    TypeGuard.TConstructor = TConstructor;\n    /** Returns true if the given schema is TDate */ function TDate(schema) {\n        return TKind(schema) && schema[exports.Kind] === \"Date\" && schema.type === \"object\" && schema.instanceOf === \"Date\" && IsOptionalString(schema.$id) && IsOptionalNumber(schema.minimumTimestamp) && IsOptionalNumber(schema.maximumTimestamp) && IsOptionalNumber(schema.exclusiveMinimumTimestamp) && IsOptionalNumber(schema.exclusiveMaximumTimestamp);\n    }\n    TypeGuard.TDate = TDate;\n    /** Returns true if the given schema is TFunction */ function TFunction(schema) {\n        // prettier-ignore\n        if (!(TKind(schema) && schema[exports.Kind] === \"Function\" && schema.type === \"object\" && schema.instanceOf === \"Function\" && IsOptionalString(schema.$id) && IsArray(schema.parameters) && TSchema(schema.returns))) {\n            return false;\n        }\n        for (const parameter of schema.parameters){\n            if (!TSchema(parameter)) return false;\n        }\n        return true;\n    }\n    TypeGuard.TFunction = TFunction;\n    /** Returns true if the given schema is TInteger */ function TInteger(schema) {\n        return TKind(schema) && schema[exports.Kind] === \"Integer\" && schema.type === \"integer\" && IsOptionalString(schema.$id) && IsOptionalNumber(schema.multipleOf) && IsOptionalNumber(schema.minimum) && IsOptionalNumber(schema.maximum) && IsOptionalNumber(schema.exclusiveMinimum) && IsOptionalNumber(schema.exclusiveMaximum);\n    }\n    TypeGuard.TInteger = TInteger;\n    /** Returns true if the given schema is TIntersect */ function TIntersect(schema) {\n        // prettier-ignore\n        if (!(TKind(schema) && schema[exports.Kind] === \"Intersect\" && IsArray(schema.allOf) && IsOptionalString(schema.type) && (IsOptionalBoolean(schema.unevaluatedProperties) || IsOptionalSchema(schema.unevaluatedProperties)) && IsOptionalString(schema.$id))) {\n            return false;\n        }\n        if (\"type\" in schema && schema.type !== \"object\") {\n            return false;\n        }\n        for (const inner of schema.allOf){\n            if (!TSchema(inner)) return false;\n        }\n        return true;\n    }\n    TypeGuard.TIntersect = TIntersect;\n    /** Returns true if the given schema is TKind */ function TKind(schema) {\n        return IsObject(schema) && exports.Kind in schema && typeof schema[exports.Kind] === \"string\"; // TS 4.1.5: any required for symbol indexer\n    }\n    TypeGuard.TKind = TKind;\n    /** Returns true if the given schema is TLiteral<string> */ function TLiteralString(schema) {\n        return TKind(schema) && schema[exports.Kind] === \"Literal\" && IsOptionalString(schema.$id) && typeof schema.const === \"string\";\n    }\n    TypeGuard.TLiteralString = TLiteralString;\n    /** Returns true if the given schema is TLiteral<number> */ function TLiteralNumber(schema) {\n        return TKind(schema) && schema[exports.Kind] === \"Literal\" && IsOptionalString(schema.$id) && typeof schema.const === \"number\";\n    }\n    TypeGuard.TLiteralNumber = TLiteralNumber;\n    /** Returns true if the given schema is TLiteral<boolean> */ function TLiteralBoolean(schema) {\n        return TKind(schema) && schema[exports.Kind] === \"Literal\" && IsOptionalString(schema.$id) && typeof schema.const === \"boolean\";\n    }\n    TypeGuard.TLiteralBoolean = TLiteralBoolean;\n    /** Returns true if the given schema is TLiteral */ function TLiteral(schema) {\n        return TLiteralString(schema) || TLiteralNumber(schema) || TLiteralBoolean(schema);\n    }\n    TypeGuard.TLiteral = TLiteral;\n    /** Returns true if the given schema is TNever */ function TNever(schema) {\n        return TKind(schema) && schema[exports.Kind] === \"Never\" && IsObject(schema.not) && globalThis.Object.getOwnPropertyNames(schema.not).length === 0;\n    }\n    TypeGuard.TNever = TNever;\n    /** Returns true if the given schema is TNot */ function TNot(schema) {\n        // prettier-ignore\n        return TKind(schema) && schema[exports.Kind] === \"Not\" && IsArray(schema.allOf) && schema.allOf.length === 2 && IsObject(schema.allOf[0]) && TSchema(schema.allOf[0].not) && TSchema(schema.allOf[1]);\n    }\n    TypeGuard.TNot = TNot;\n    /** Returns true if the given schema is TNull */ function TNull(schema) {\n        // prettier-ignore\n        return TKind(schema) && schema[exports.Kind] === \"Null\" && schema.type === \"null\" && IsOptionalString(schema.$id);\n    }\n    TypeGuard.TNull = TNull;\n    /** Returns true if the given schema is TNumber */ function TNumber(schema) {\n        return TKind(schema) && schema[exports.Kind] === \"Number\" && schema.type === \"number\" && IsOptionalString(schema.$id) && IsOptionalNumber(schema.multipleOf) && IsOptionalNumber(schema.minimum) && IsOptionalNumber(schema.maximum) && IsOptionalNumber(schema.exclusiveMinimum) && IsOptionalNumber(schema.exclusiveMaximum);\n    }\n    TypeGuard.TNumber = TNumber;\n    /** Returns true if the given schema is TObject */ function TObject(schema) {\n        if (!(TKind(schema) && schema[exports.Kind] === \"Object\" && schema.type === \"object\" && IsOptionalString(schema.$id) && IsObject(schema.properties) && IsAdditionalProperties(schema.additionalProperties) && IsOptionalNumber(schema.minProperties) && IsOptionalNumber(schema.maxProperties))) {\n            return false;\n        }\n        for (const [key, value] of Object.entries(schema.properties)){\n            if (!IsControlCharacterFree(key)) return false;\n            if (!TSchema(value)) return false;\n        }\n        return true;\n    }\n    TypeGuard.TObject = TObject;\n    /** Returns true if the given schema is TPromise */ function TPromise(schema) {\n        // prettier-ignore\n        return TKind(schema) && schema[exports.Kind] === \"Promise\" && schema.type === \"object\" && schema.instanceOf === \"Promise\" && IsOptionalString(schema.$id) && TSchema(schema.item);\n    }\n    TypeGuard.TPromise = TPromise;\n    /** Returns true if the given schema is TRecord */ function TRecord(schema) {\n        // prettier-ignore\n        if (!(TKind(schema) && schema[exports.Kind] === \"Record\" && schema.type === \"object\" && IsOptionalString(schema.$id) && IsAdditionalProperties(schema.additionalProperties) && IsObject(schema.patternProperties))) {\n            return false;\n        }\n        const keys = Object.keys(schema.patternProperties);\n        if (keys.length !== 1) {\n            return false;\n        }\n        if (!IsPattern(keys[0])) {\n            return false;\n        }\n        if (!TSchema(schema.patternProperties[keys[0]])) {\n            return false;\n        }\n        return true;\n    }\n    TypeGuard.TRecord = TRecord;\n    /** Returns true if the given schema is TRef */ function TRef(schema) {\n        // prettier-ignore\n        return TKind(schema) && schema[exports.Kind] === \"Ref\" && IsOptionalString(schema.$id) && IsString(schema.$ref);\n    }\n    TypeGuard.TRef = TRef;\n    /** Returns true if the given schema is TString */ function TString(schema) {\n        return TKind(schema) && schema[exports.Kind] === \"String\" && schema.type === \"string\" && IsOptionalString(schema.$id) && IsOptionalNumber(schema.minLength) && IsOptionalNumber(schema.maxLength) && IsOptionalPattern(schema.pattern) && IsOptionalFormat(schema.format);\n    }\n    TypeGuard.TString = TString;\n    /** Returns true if the given schema is TSymbol */ function TSymbol(schema) {\n        // prettier-ignore\n        return TKind(schema) && schema[exports.Kind] === \"Symbol\" && schema.type === \"null\" && schema.typeOf === \"Symbol\" && IsOptionalString(schema.$id);\n    }\n    TypeGuard.TSymbol = TSymbol;\n    /** Returns true if the given schema is TTemplateLiteral */ function TTemplateLiteral(schema) {\n        // prettier-ignore\n        return TKind(schema) && schema[exports.Kind] === \"TemplateLiteral\" && schema.type === \"string\" && IsString(schema.pattern) && schema.pattern[0] === \"^\" && schema.pattern[schema.pattern.length - 1] === \"$\";\n    }\n    TypeGuard.TTemplateLiteral = TTemplateLiteral;\n    /** Returns true if the given schema is TThis */ function TThis(schema) {\n        // prettier-ignore\n        return TKind(schema) && schema[exports.Kind] === \"This\" && IsOptionalString(schema.$id) && IsString(schema.$ref);\n    }\n    TypeGuard.TThis = TThis;\n    /** Returns true if the given schema is TTuple */ function TTuple(schema) {\n        // prettier-ignore\n        if (!(TKind(schema) && schema[exports.Kind] === \"Tuple\" && schema.type === \"array\" && IsOptionalString(schema.$id) && IsNumber(schema.minItems) && IsNumber(schema.maxItems) && schema.minItems === schema.maxItems)) {\n            return false;\n        }\n        if (schema.items === undefined && schema.additionalItems === undefined && schema.minItems === 0) {\n            return true;\n        }\n        if (!IsArray(schema.items)) {\n            return false;\n        }\n        for (const inner of schema.items){\n            if (!TSchema(inner)) return false;\n        }\n        return true;\n    }\n    TypeGuard.TTuple = TTuple;\n    /** Returns true if the given schema is TUndefined */ function TUndefined(schema) {\n        // prettier-ignore\n        return TKind(schema) && schema[exports.Kind] === \"Undefined\" && schema.type === \"null\" && schema.typeOf === \"Undefined\" && IsOptionalString(schema.$id);\n    }\n    TypeGuard.TUndefined = TUndefined;\n    /** Returns true if the given schema is TUnion<Literal<string | number>[]> */ function TUnionLiteral(schema) {\n        return TUnion(schema) && schema.anyOf.every((schema)=>TLiteralString(schema) || TLiteralNumber(schema));\n    }\n    TypeGuard.TUnionLiteral = TUnionLiteral;\n    /** Returns true if the given schema is TUnion */ function TUnion(schema) {\n        // prettier-ignore\n        if (!(TKind(schema) && schema[exports.Kind] === \"Union\" && IsArray(schema.anyOf) && IsOptionalString(schema.$id))) {\n            return false;\n        }\n        for (const inner of schema.anyOf){\n            if (!TSchema(inner)) return false;\n        }\n        return true;\n    }\n    TypeGuard.TUnion = TUnion;\n    /** Returns true if the given schema is TUint8Array */ function TUint8Array(schema) {\n        return TKind(schema) && schema[exports.Kind] === \"Uint8Array\" && schema.type === \"object\" && IsOptionalString(schema.$id) && schema.instanceOf === \"Uint8Array\" && IsOptionalNumber(schema.minByteLength) && IsOptionalNumber(schema.maxByteLength);\n    }\n    TypeGuard.TUint8Array = TUint8Array;\n    /** Returns true if the given schema is TUnknown */ function TUnknown(schema) {\n        // prettier-ignore\n        return TKind(schema) && schema[exports.Kind] === \"Unknown\" && IsOptionalString(schema.$id);\n    }\n    TypeGuard.TUnknown = TUnknown;\n    /** Returns true if the given schema is a raw TUnsafe */ function TUnsafe(schema) {\n        // prettier-ignore\n        return TKind(schema) && schema[exports.Kind] === \"Unsafe\";\n    }\n    TypeGuard.TUnsafe = TUnsafe;\n    /** Returns true if the given schema is TVoid */ function TVoid(schema) {\n        // prettier-ignore\n        return TKind(schema) && schema[exports.Kind] === \"Void\" && schema.type === \"null\" && schema.typeOf === \"Void\" && IsOptionalString(schema.$id);\n    }\n    TypeGuard.TVoid = TVoid;\n    /** Returns true if this schema has the ReadonlyOptional modifier */ function TReadonlyOptional(schema) {\n        return IsObject(schema) && schema[exports.Modifier] === \"ReadonlyOptional\";\n    }\n    TypeGuard.TReadonlyOptional = TReadonlyOptional;\n    /** Returns true if this schema has the Readonly modifier */ function TReadonly(schema) {\n        return IsObject(schema) && schema[exports.Modifier] === \"Readonly\";\n    }\n    TypeGuard.TReadonly = TReadonly;\n    /** Returns true if this schema has the Optional modifier */ function TOptional(schema) {\n        return IsObject(schema) && schema[exports.Modifier] === \"Optional\";\n    }\n    TypeGuard.TOptional = TOptional;\n    /** Returns true if the given schema is TSchema */ function TSchema(schema) {\n        return typeof schema === \"object\" && (TAny(schema) || TArray(schema) || TBoolean(schema) || TBigInt(schema) || TConstructor(schema) || TDate(schema) || TFunction(schema) || TInteger(schema) || TIntersect(schema) || TLiteral(schema) || TNever(schema) || TNot(schema) || TNull(schema) || TNumber(schema) || TObject(schema) || TPromise(schema) || TRecord(schema) || TRef(schema) || TString(schema) || TSymbol(schema) || TTemplateLiteral(schema) || TThis(schema) || TTuple(schema) || TUndefined(schema) || TUnion(schema) || TUint8Array(schema) || TUnknown(schema) || TUnsafe(schema) || TVoid(schema) || TKind(schema) && TypeRegistry.Has(schema[exports.Kind]));\n    }\n    TypeGuard.TSchema = TSchema;\n})(TypeGuard || (exports.TypeGuard = TypeGuard = {}));\n// --------------------------------------------------------------------------\n// ExtendsUndefined\n// --------------------------------------------------------------------------\n/** Fast undefined check used for properties of type undefined */ var ExtendsUndefined;\n(function(ExtendsUndefined) {\n    function Check(schema) {\n        if (schema[exports.Kind] === \"Undefined\") return true;\n        if (schema[exports.Kind] === \"Not\") {\n            const not = schema;\n            return Check(not.allOf[1]);\n        }\n        if (schema[exports.Kind] === \"Intersect\") {\n            const intersect = schema;\n            return intersect.allOf.every((schema)=>Check(schema));\n        }\n        if (schema[exports.Kind] === \"Union\") {\n            const union = schema;\n            return union.anyOf.some((schema)=>Check(schema));\n        }\n        return false;\n    }\n    ExtendsUndefined.Check = Check;\n})(ExtendsUndefined || (exports.ExtendsUndefined = ExtendsUndefined = {}));\n// --------------------------------------------------------------------------\n// TypeExtends\n// --------------------------------------------------------------------------\nvar TypeExtendsResult;\n(function(TypeExtendsResult) {\n    TypeExtendsResult[TypeExtendsResult[\"Union\"] = 0] = \"Union\";\n    TypeExtendsResult[TypeExtendsResult[\"True\"] = 1] = \"True\";\n    TypeExtendsResult[TypeExtendsResult[\"False\"] = 2] = \"False\";\n})(TypeExtendsResult || (exports.TypeExtendsResult = TypeExtendsResult = {}));\nvar TypeExtends;\n(function(TypeExtends) {\n    // --------------------------------------------------------------------------\n    // IntoBooleanResult\n    // --------------------------------------------------------------------------\n    function IntoBooleanResult(result) {\n        return result === TypeExtendsResult.False ? TypeExtendsResult.False : TypeExtendsResult.True;\n    }\n    // --------------------------------------------------------------------------\n    // Any\n    // --------------------------------------------------------------------------\n    function AnyRight(left, right) {\n        return TypeExtendsResult.True;\n    }\n    function Any(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right) && right.anyOf.some((schema)=>TypeGuard.TAny(schema) || TypeGuard.TUnknown(schema))) return TypeExtendsResult.True;\n        if (TypeGuard.TUnion(right)) return TypeExtendsResult.Union;\n        if (TypeGuard.TUnknown(right)) return TypeExtendsResult.True;\n        if (TypeGuard.TAny(right)) return TypeExtendsResult.True;\n        return TypeExtendsResult.Union;\n    }\n    // --------------------------------------------------------------------------\n    // Array\n    // --------------------------------------------------------------------------\n    function ArrayRight(left, right) {\n        if (TypeGuard.TUnknown(left)) return TypeExtendsResult.False;\n        if (TypeGuard.TAny(left)) return TypeExtendsResult.Union;\n        if (TypeGuard.TNever(left)) return TypeExtendsResult.True;\n        return TypeExtendsResult.False;\n    }\n    function Array1(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right) && IsObjectArrayLike(right)) return TypeExtendsResult.True;\n        if (!TypeGuard.TArray(right)) return TypeExtendsResult.False;\n        return IntoBooleanResult(Visit(left.items, right.items));\n    }\n    // --------------------------------------------------------------------------\n    // BigInt\n    // --------------------------------------------------------------------------\n    function BigInt(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TNever(right)) return NeverRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right)) return ObjectRight(left, right);\n        if (TypeGuard.TRecord(right)) return RecordRight(left, right);\n        return TypeGuard.TBigInt(right) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    // --------------------------------------------------------------------------\n    // Boolean\n    // --------------------------------------------------------------------------\n    function BooleanRight(left, right) {\n        if (TypeGuard.TLiteral(left) && typeof left.const === \"boolean\") return TypeExtendsResult.True;\n        return TypeGuard.TBoolean(left) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    function Boolean(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TNever(right)) return NeverRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right)) return ObjectRight(left, right);\n        if (TypeGuard.TRecord(right)) return RecordRight(left, right);\n        return TypeGuard.TBoolean(right) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    // --------------------------------------------------------------------------\n    // Constructor\n    // --------------------------------------------------------------------------\n    function Constructor(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right)) return ObjectRight(left, right);\n        if (!TypeGuard.TConstructor(right)) return TypeExtendsResult.False;\n        if (left.parameters.length > right.parameters.length) return TypeExtendsResult.False;\n        if (!left.parameters.every((schema, index)=>IntoBooleanResult(Visit(right.parameters[index], schema)) === TypeExtendsResult.True)) {\n            return TypeExtendsResult.False;\n        }\n        return IntoBooleanResult(Visit(left.returns, right.returns));\n    }\n    // --------------------------------------------------------------------------\n    // Date\n    // --------------------------------------------------------------------------\n    function Date(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right)) return ObjectRight(left, right);\n        if (TypeGuard.TRecord(right)) return RecordRight(left, right);\n        return TypeGuard.TDate(right) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    // --------------------------------------------------------------------------\n    // Function\n    // --------------------------------------------------------------------------\n    function Function(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right)) return ObjectRight(left, right);\n        if (!TypeGuard.TFunction(right)) return TypeExtendsResult.False;\n        if (left.parameters.length > right.parameters.length) return TypeExtendsResult.False;\n        if (!left.parameters.every((schema, index)=>IntoBooleanResult(Visit(right.parameters[index], schema)) === TypeExtendsResult.True)) {\n            return TypeExtendsResult.False;\n        }\n        return IntoBooleanResult(Visit(left.returns, right.returns));\n    }\n    // --------------------------------------------------------------------------\n    // Integer\n    // --------------------------------------------------------------------------\n    function IntegerRight(left, right) {\n        if (TypeGuard.TLiteral(left) && typeof left.const === \"number\") return TypeExtendsResult.True;\n        return TypeGuard.TNumber(left) || TypeGuard.TInteger(left) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    function Integer(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TNever(right)) return NeverRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right)) return ObjectRight(left, right);\n        if (TypeGuard.TRecord(right)) return RecordRight(left, right);\n        return TypeGuard.TInteger(right) || TypeGuard.TNumber(right) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    // --------------------------------------------------------------------------\n    // Intersect\n    // --------------------------------------------------------------------------\n    function IntersectRight(left, right) {\n        return right.allOf.every((schema)=>Visit(left, schema) === TypeExtendsResult.True) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    function Intersect(left, right) {\n        return left.allOf.some((schema)=>Visit(schema, right) === TypeExtendsResult.True) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    // --------------------------------------------------------------------------\n    // Literal\n    // --------------------------------------------------------------------------\n    function IsLiteralString(schema) {\n        return typeof schema.const === \"string\";\n    }\n    function IsLiteralNumber(schema) {\n        return typeof schema.const === \"number\";\n    }\n    function IsLiteralBoolean(schema) {\n        return typeof schema.const === \"boolean\";\n    }\n    function Literal(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TNever(right)) return NeverRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right)) return ObjectRight(left, right);\n        if (TypeGuard.TRecord(right)) return RecordRight(left, right);\n        if (TypeGuard.TString(right)) return StringRight(left, right);\n        if (TypeGuard.TNumber(right)) return NumberRight(left, right);\n        if (TypeGuard.TInteger(right)) return IntegerRight(left, right);\n        if (TypeGuard.TBoolean(right)) return BooleanRight(left, right);\n        return TypeGuard.TLiteral(right) && right.const === left.const ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    // --------------------------------------------------------------------------\n    // Never\n    // --------------------------------------------------------------------------\n    function NeverRight(left, right) {\n        return TypeExtendsResult.False;\n    }\n    function Never(left, right) {\n        return TypeExtendsResult.True;\n    }\n    // --------------------------------------------------------------------------\n    // Null\n    // --------------------------------------------------------------------------\n    function Null(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TNever(right)) return NeverRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right)) return ObjectRight(left, right);\n        if (TypeGuard.TRecord(right)) return RecordRight(left, right);\n        return TypeGuard.TNull(right) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    // --------------------------------------------------------------------------\n    // Number\n    // --------------------------------------------------------------------------\n    function NumberRight(left, right) {\n        if (TypeGuard.TLiteral(left) && IsLiteralNumber(left)) return TypeExtendsResult.True;\n        return TypeGuard.TNumber(left) || TypeGuard.TInteger(left) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    function Number(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TNever(right)) return NeverRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right)) return ObjectRight(left, right);\n        if (TypeGuard.TRecord(right)) return RecordRight(left, right);\n        return TypeGuard.TInteger(right) || TypeGuard.TNumber(right) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    // --------------------------------------------------------------------------\n    // Object\n    // --------------------------------------------------------------------------\n    function IsObjectPropertyCount(schema, count) {\n        return globalThis.Object.keys(schema.properties).length === count;\n    }\n    function IsObjectStringLike(schema) {\n        return IsObjectArrayLike(schema);\n    }\n    function IsObjectSymbolLike(schema) {\n        // prettier-ignore\n        return IsObjectPropertyCount(schema, 0) || IsObjectPropertyCount(schema, 1) && \"description\" in schema.properties && TypeGuard.TUnion(schema.properties.description) && schema.properties.description.anyOf.length === 2 && (TypeGuard.TString(schema.properties.description.anyOf[0]) && TypeGuard.TUndefined(schema.properties.description.anyOf[1]) || TypeGuard.TString(schema.properties.description.anyOf[1]) && TypeGuard.TUndefined(schema.properties.description.anyOf[0]));\n    }\n    function IsObjectNumberLike(schema) {\n        return IsObjectPropertyCount(schema, 0);\n    }\n    function IsObjectBooleanLike(schema) {\n        return IsObjectPropertyCount(schema, 0);\n    }\n    function IsObjectBigIntLike(schema) {\n        return IsObjectPropertyCount(schema, 0);\n    }\n    function IsObjectDateLike(schema) {\n        return IsObjectPropertyCount(schema, 0);\n    }\n    function IsObjectUint8ArrayLike(schema) {\n        return IsObjectArrayLike(schema);\n    }\n    function IsObjectFunctionLike(schema) {\n        const length = exports.Type.Number();\n        return IsObjectPropertyCount(schema, 0) || IsObjectPropertyCount(schema, 1) && \"length\" in schema.properties && IntoBooleanResult(Visit(schema.properties[\"length\"], length)) === TypeExtendsResult.True;\n    }\n    function IsObjectConstructorLike(schema) {\n        return IsObjectPropertyCount(schema, 0);\n    }\n    function IsObjectArrayLike(schema) {\n        const length = exports.Type.Number();\n        return IsObjectPropertyCount(schema, 0) || IsObjectPropertyCount(schema, 1) && \"length\" in schema.properties && IntoBooleanResult(Visit(schema.properties[\"length\"], length)) === TypeExtendsResult.True;\n    }\n    function IsObjectPromiseLike(schema) {\n        const then = exports.Type.Function([\n            exports.Type.Any()\n        ], exports.Type.Any());\n        return IsObjectPropertyCount(schema, 0) || IsObjectPropertyCount(schema, 1) && \"then\" in schema.properties && IntoBooleanResult(Visit(schema.properties[\"then\"], then)) === TypeExtendsResult.True;\n    }\n    // --------------------------------------------------------------------------\n    // Property\n    // --------------------------------------------------------------------------\n    function Property(left, right) {\n        if (Visit(left, right) === TypeExtendsResult.False) return TypeExtendsResult.False;\n        if (TypeGuard.TOptional(left) && !TypeGuard.TOptional(right)) return TypeExtendsResult.False;\n        return TypeExtendsResult.True;\n    }\n    function ObjectRight(left, right) {\n        if (TypeGuard.TUnknown(left)) return TypeExtendsResult.False;\n        if (TypeGuard.TAny(left)) return TypeExtendsResult.Union;\n        if (TypeGuard.TNever(left)) return TypeExtendsResult.True;\n        if (TypeGuard.TLiteral(left) && IsLiteralString(left) && IsObjectStringLike(right)) return TypeExtendsResult.True;\n        if (TypeGuard.TLiteral(left) && IsLiteralNumber(left) && IsObjectNumberLike(right)) return TypeExtendsResult.True;\n        if (TypeGuard.TLiteral(left) && IsLiteralBoolean(left) && IsObjectBooleanLike(right)) return TypeExtendsResult.True;\n        if (TypeGuard.TSymbol(left) && IsObjectSymbolLike(right)) return TypeExtendsResult.True;\n        if (TypeGuard.TBigInt(left) && IsObjectBigIntLike(right)) return TypeExtendsResult.True;\n        if (TypeGuard.TString(left) && IsObjectStringLike(right)) return TypeExtendsResult.True;\n        if (TypeGuard.TSymbol(left) && IsObjectSymbolLike(right)) return TypeExtendsResult.True;\n        if (TypeGuard.TNumber(left) && IsObjectNumberLike(right)) return TypeExtendsResult.True;\n        if (TypeGuard.TInteger(left) && IsObjectNumberLike(right)) return TypeExtendsResult.True;\n        if (TypeGuard.TBoolean(left) && IsObjectBooleanLike(right)) return TypeExtendsResult.True;\n        if (TypeGuard.TUint8Array(left) && IsObjectUint8ArrayLike(right)) return TypeExtendsResult.True;\n        if (TypeGuard.TDate(left) && IsObjectDateLike(right)) return TypeExtendsResult.True;\n        if (TypeGuard.TConstructor(left) && IsObjectConstructorLike(right)) return TypeExtendsResult.True;\n        if (TypeGuard.TFunction(left) && IsObjectFunctionLike(right)) return TypeExtendsResult.True;\n        if (TypeGuard.TRecord(left) && TypeGuard.TString(RecordKey(left))) {\n            // When expressing a Record with literal key values, the Record is converted into a Object with\n            // the Hint assigned as `Record`. This is used to invert the extends logic.\n            return right[exports.Hint] === \"Record\" ? TypeExtendsResult.True : TypeExtendsResult.False;\n        }\n        if (TypeGuard.TRecord(left) && TypeGuard.TNumber(RecordKey(left))) {\n            return IsObjectPropertyCount(right, 0) ? TypeExtendsResult.True : TypeExtendsResult.False;\n        }\n        return TypeExtendsResult.False;\n    }\n    function Object1(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TRecord(right)) return RecordRight(left, right);\n        if (!TypeGuard.TObject(right)) return TypeExtendsResult.False;\n        for (const key of globalThis.Object.keys(right.properties)){\n            if (!(key in left.properties)) return TypeExtendsResult.False;\n            if (Property(left.properties[key], right.properties[key]) === TypeExtendsResult.False) {\n                return TypeExtendsResult.False;\n            }\n        }\n        return TypeExtendsResult.True;\n    }\n    // --------------------------------------------------------------------------\n    // Promise\n    // --------------------------------------------------------------------------\n    function Promise(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right) && IsObjectPromiseLike(right)) return TypeExtendsResult.True;\n        if (!TypeGuard.TPromise(right)) return TypeExtendsResult.False;\n        return IntoBooleanResult(Visit(left.item, right.item));\n    }\n    // --------------------------------------------------------------------------\n    // Record\n    // --------------------------------------------------------------------------\n    function RecordKey(schema) {\n        if (exports.PatternNumberExact in schema.patternProperties) return exports.Type.Number();\n        if (exports.PatternStringExact in schema.patternProperties) return exports.Type.String();\n        throw Error(\"TypeExtends: Cannot get record key\");\n    }\n    function RecordValue(schema) {\n        if (exports.PatternNumberExact in schema.patternProperties) return schema.patternProperties[exports.PatternNumberExact];\n        if (exports.PatternStringExact in schema.patternProperties) return schema.patternProperties[exports.PatternStringExact];\n        throw Error(\"TypeExtends: Cannot get record value\");\n    }\n    function RecordRight(left, right) {\n        const Key = RecordKey(right);\n        const Value = RecordValue(right);\n        if (TypeGuard.TLiteral(left) && IsLiteralString(left) && TypeGuard.TNumber(Key) && IntoBooleanResult(Visit(left, Value)) === TypeExtendsResult.True) return TypeExtendsResult.True;\n        if (TypeGuard.TUint8Array(left) && TypeGuard.TNumber(Key)) return Visit(left, Value);\n        if (TypeGuard.TString(left) && TypeGuard.TNumber(Key)) return Visit(left, Value);\n        if (TypeGuard.TArray(left) && TypeGuard.TNumber(Key)) return Visit(left, Value);\n        if (TypeGuard.TObject(left)) {\n            for (const key of globalThis.Object.keys(left.properties)){\n                if (Property(Value, left.properties[key]) === TypeExtendsResult.False) {\n                    return TypeExtendsResult.False;\n                }\n            }\n            return TypeExtendsResult.True;\n        }\n        return TypeExtendsResult.False;\n    }\n    function Record(left, right) {\n        const Value = RecordValue(left);\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right)) return ObjectRight(left, right);\n        if (!TypeGuard.TRecord(right)) return TypeExtendsResult.False;\n        return Visit(Value, RecordValue(right));\n    }\n    // --------------------------------------------------------------------------\n    // String\n    // --------------------------------------------------------------------------\n    function StringRight(left, right) {\n        if (TypeGuard.TLiteral(left) && typeof left.const === \"string\") return TypeExtendsResult.True;\n        return TypeGuard.TString(left) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    function String(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TNever(right)) return NeverRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right)) return ObjectRight(left, right);\n        if (TypeGuard.TRecord(right)) return RecordRight(left, right);\n        return TypeGuard.TString(right) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    // --------------------------------------------------------------------------\n    // Symbol\n    // --------------------------------------------------------------------------\n    function Symbol1(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TNever(right)) return NeverRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right)) return ObjectRight(left, right);\n        if (TypeGuard.TRecord(right)) return RecordRight(left, right);\n        return TypeGuard.TSymbol(right) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    // --------------------------------------------------------------------------\n    // Tuple\n    // --------------------------------------------------------------------------\n    function TupleRight(left, right) {\n        if (TypeGuard.TUnknown(left)) return TypeExtendsResult.False;\n        if (TypeGuard.TAny(left)) return TypeExtendsResult.Union;\n        if (TypeGuard.TNever(left)) return TypeExtendsResult.True;\n        return TypeExtendsResult.False;\n    }\n    function IsArrayOfTuple(left, right) {\n        return TypeGuard.TArray(right) && left.items !== undefined && left.items.every((schema)=>Visit(schema, right.items) === TypeExtendsResult.True);\n    }\n    function Tuple(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right) && IsObjectArrayLike(right)) return TypeExtendsResult.True;\n        if (TypeGuard.TArray(right) && IsArrayOfTuple(left, right)) return TypeExtendsResult.True;\n        if (!TypeGuard.TTuple(right)) return TypeExtendsResult.False;\n        if (left.items === undefined && right.items !== undefined || left.items !== undefined && right.items === undefined) return TypeExtendsResult.False;\n        if (left.items === undefined && right.items === undefined) return TypeExtendsResult.True;\n        return left.items.every((schema, index)=>Visit(schema, right.items[index]) === TypeExtendsResult.True) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    // --------------------------------------------------------------------------\n    // Uint8Array\n    // --------------------------------------------------------------------------\n    function Uint8Array(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right)) return ObjectRight(left, right);\n        if (TypeGuard.TRecord(right)) return RecordRight(left, right);\n        return TypeGuard.TUint8Array(right) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    // --------------------------------------------------------------------------\n    // Undefined\n    // --------------------------------------------------------------------------\n    function Undefined(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TNever(right)) return NeverRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right)) return ObjectRight(left, right);\n        if (TypeGuard.TRecord(right)) return RecordRight(left, right);\n        if (TypeGuard.TVoid(right)) return VoidRight(left, right);\n        return TypeGuard.TUndefined(right) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    // --------------------------------------------------------------------------\n    // Union\n    // --------------------------------------------------------------------------\n    function UnionRight(left, right) {\n        return right.anyOf.some((schema)=>Visit(left, schema) === TypeExtendsResult.True) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    function Union(left, right) {\n        return left.anyOf.every((schema)=>Visit(schema, right) === TypeExtendsResult.True) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    // --------------------------------------------------------------------------\n    // Unknown\n    // --------------------------------------------------------------------------\n    function UnknownRight(left, right) {\n        return TypeExtendsResult.True;\n    }\n    function Unknown(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TString(right)) return StringRight(left, right);\n        if (TypeGuard.TNumber(right)) return NumberRight(left, right);\n        if (TypeGuard.TInteger(right)) return IntegerRight(left, right);\n        if (TypeGuard.TBoolean(right)) return BooleanRight(left, right);\n        if (TypeGuard.TArray(right)) return ArrayRight(left, right);\n        if (TypeGuard.TTuple(right)) return TupleRight(left, right);\n        if (TypeGuard.TObject(right)) return ObjectRight(left, right);\n        return TypeGuard.TUnknown(right) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    // --------------------------------------------------------------------------\n    // Void\n    // --------------------------------------------------------------------------\n    function VoidRight(left, right) {\n        if (TypeGuard.TUndefined(left)) return TypeExtendsResult.True;\n        return TypeGuard.TUndefined(left) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    function Void(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right)) return ObjectRight(left, right);\n        return TypeGuard.TVoid(right) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    function Visit(left, right) {\n        // Template Literal Union Unwrap\n        if (TypeGuard.TTemplateLiteral(left)) return Visit(TemplateLiteralResolver.Resolve(left), right);\n        if (TypeGuard.TTemplateLiteral(right)) return Visit(left, TemplateLiteralResolver.Resolve(right));\n        // Standard Extends\n        if (TypeGuard.TAny(left)) return Any(left, right);\n        if (TypeGuard.TArray(left)) return Array1(left, right);\n        if (TypeGuard.TBigInt(left)) return BigInt(left, right);\n        if (TypeGuard.TBoolean(left)) return Boolean(left, right);\n        if (TypeGuard.TConstructor(left)) return Constructor(left, right);\n        if (TypeGuard.TDate(left)) return Date(left, right);\n        if (TypeGuard.TFunction(left)) return Function(left, right);\n        if (TypeGuard.TInteger(left)) return Integer(left, right);\n        if (TypeGuard.TIntersect(left)) return Intersect(left, right);\n        if (TypeGuard.TLiteral(left)) return Literal(left, right);\n        if (TypeGuard.TNever(left)) return Never(left, right);\n        if (TypeGuard.TNull(left)) return Null(left, right);\n        if (TypeGuard.TNumber(left)) return Number(left, right);\n        if (TypeGuard.TObject(left)) return Object1(left, right);\n        if (TypeGuard.TRecord(left)) return Record(left, right);\n        if (TypeGuard.TString(left)) return String(left, right);\n        if (TypeGuard.TSymbol(left)) return Symbol1(left, right);\n        if (TypeGuard.TTuple(left)) return Tuple(left, right);\n        if (TypeGuard.TPromise(left)) return Promise(left, right);\n        if (TypeGuard.TUint8Array(left)) return Uint8Array(left, right);\n        if (TypeGuard.TUndefined(left)) return Undefined(left, right);\n        if (TypeGuard.TUnion(left)) return Union(left, right);\n        if (TypeGuard.TUnknown(left)) return Unknown(left, right);\n        if (TypeGuard.TVoid(left)) return Void(left, right);\n        throw Error(`TypeExtends: Unknown left type operand '${left[exports.Kind]}'`);\n    }\n    function Extends(left, right) {\n        return Visit(left, right);\n    }\n    TypeExtends.Extends = Extends;\n})(TypeExtends || (exports.TypeExtends = TypeExtends = {}));\n// --------------------------------------------------------------------------\n// TypeClone\n// --------------------------------------------------------------------------\n/** Specialized Clone for Types */ var TypeClone;\n(function(TypeClone) {\n    function IsObject(value) {\n        return typeof value === \"object\" && value !== null;\n    }\n    function IsArray(value) {\n        return globalThis.Array.isArray(value);\n    }\n    function Array1(value) {\n        return value.map((value)=>Visit(value));\n    }\n    function Object1(value) {\n        const clonedProperties = globalThis.Object.getOwnPropertyNames(value).reduce((acc, key)=>{\n            return {\n                ...acc,\n                [key]: Visit(value[key])\n            };\n        }, {});\n        const clonedSymbols = globalThis.Object.getOwnPropertySymbols(value).reduce((acc, key)=>{\n            return {\n                ...acc,\n                [key]: Visit(value[key])\n            };\n        }, {});\n        return {\n            ...clonedProperties,\n            ...clonedSymbols\n        };\n    }\n    function Visit(value) {\n        if (IsArray(value)) return Array1(value);\n        if (IsObject(value)) return Object1(value);\n        return value;\n    }\n    /** Clones a type. */ function Clone(schema, options) {\n        return {\n            ...Visit(schema),\n            ...options\n        };\n    }\n    TypeClone.Clone = Clone;\n})(TypeClone || (exports.TypeClone = TypeClone = {}));\n// --------------------------------------------------------------------------\n// IndexedAccessor\n// --------------------------------------------------------------------------\nvar IndexedAccessor;\n(function(IndexedAccessor) {\n    function Intersect(schema, key) {\n        const schemas = schema.allOf.reduce((acc, schema)=>{\n            const indexed = Visit(schema, key);\n            return indexed[exports.Kind] === \"Never\" ? acc : [\n                ...acc,\n                indexed\n            ];\n        }, []);\n        return exports.Type.Intersect(schemas);\n    }\n    function Union(schema, key) {\n        const schemas = schema.anyOf.map((schema)=>Visit(schema, key));\n        return exports.Type.Union(schemas);\n    }\n    function Object1(schema, key) {\n        const property = schema.properties[key];\n        return property === undefined ? exports.Type.Never() : exports.Type.Union([\n            property\n        ]);\n    }\n    function Tuple(schema, key) {\n        const items = schema.items;\n        if (items === undefined) return exports.Type.Never();\n        const element = items[key]; //\n        if (element === undefined) return exports.Type.Never();\n        return element;\n    }\n    function Visit(schema, key) {\n        if (schema[exports.Kind] === \"Intersect\") return Intersect(schema, key);\n        if (schema[exports.Kind] === \"Union\") return Union(schema, key);\n        if (schema[exports.Kind] === \"Object\") return Object1(schema, key);\n        if (schema[exports.Kind] === \"Tuple\") return Tuple(schema, key);\n        return exports.Type.Never();\n    }\n    function Resolve(schema, keys, options = {}) {\n        // prettier-ignore\n        return exports.Type.Union(keys.map((key)=>Visit(schema, key.toString())), options);\n    }\n    IndexedAccessor.Resolve = Resolve;\n})(IndexedAccessor || (exports.IndexedAccessor = IndexedAccessor = {}));\n// --------------------------------------------------------------------------\n// ObjectMap\n// --------------------------------------------------------------------------\nvar ObjectMap;\n(function(ObjectMap) {\n    function Intersect(schema, callback) {\n        // prettier-ignore\n        return exports.Type.Intersect(schema.allOf.map((inner)=>Visit(inner, callback)), {\n            ...schema\n        });\n    }\n    function Union(schema, callback) {\n        // prettier-ignore\n        return exports.Type.Union(schema.anyOf.map((inner)=>Visit(inner, callback)), {\n            ...schema\n        });\n    }\n    function Object1(schema, callback) {\n        return callback(schema);\n    }\n    function Visit(schema, callback) {\n        // There are cases where users need to map objects with unregistered kinds. Using a TypeGuard here would\n        // prevent sub schema mapping as unregistered kinds will not pass TSchema checks. This is notable in the\n        // case of TObject where unregistered property kinds cause the TObject check to fail. As mapping is only\n        // used for composition, we use explicit checks instead.\n        if (schema[exports.Kind] === \"Intersect\") return Intersect(schema, callback);\n        if (schema[exports.Kind] === \"Union\") return Union(schema, callback);\n        if (schema[exports.Kind] === \"Object\") return Object1(schema, callback);\n        return schema;\n    }\n    function Map1(schema, callback, options) {\n        return {\n            ...Visit(TypeClone.Clone(schema, {}), callback),\n            ...options\n        };\n    }\n    ObjectMap.Map = Map1;\n})(ObjectMap || (exports.ObjectMap = ObjectMap = {}));\nvar KeyResolver;\n(function(KeyResolver) {\n    function UnwrapPattern(key) {\n        return key[0] === \"^\" && key[key.length - 1] === \"$\" ? key.slice(1, key.length - 1) : key;\n    }\n    function Intersect(schema, options) {\n        return schema.allOf.reduce((acc, schema)=>[\n                ...acc,\n                ...Visit(schema, options)\n            ], []);\n    }\n    function Union(schema, options) {\n        const sets = schema.anyOf.map((inner)=>Visit(inner, options));\n        return [\n            ...sets.reduce((set, outer)=>outer.map((key)=>sets.every((inner)=>inner.includes(key)) ? set.add(key) : set)[0], new Set())\n        ];\n    }\n    function Object1(schema, options) {\n        return globalThis.Object.keys(schema.properties);\n    }\n    function Record(schema, options) {\n        return options.includePatterns ? globalThis.Object.keys(schema.patternProperties) : [];\n    }\n    function Visit(schema, options) {\n        if (TypeGuard.TIntersect(schema)) return Intersect(schema, options);\n        if (TypeGuard.TUnion(schema)) return Union(schema, options);\n        if (TypeGuard.TObject(schema)) return Object1(schema, options);\n        if (TypeGuard.TRecord(schema)) return Record(schema, options);\n        return [];\n    }\n    /** Resolves an array of keys in this schema */ function ResolveKeys(schema, options) {\n        return [\n            ...new Set(Visit(schema, options))\n        ];\n    }\n    KeyResolver.ResolveKeys = ResolveKeys;\n    /** Resolves a regular expression pattern matching all keys in this schema */ function ResolvePattern(schema) {\n        const keys = ResolveKeys(schema, {\n            includePatterns: true\n        });\n        const pattern = keys.map((key)=>`(${UnwrapPattern(key)})`);\n        return `^(${pattern.join(\"|\")})$`;\n    }\n    KeyResolver.ResolvePattern = ResolvePattern;\n})(KeyResolver || (exports.KeyResolver = KeyResolver = {}));\n// --------------------------------------------------------------------------\n// KeyArrayResolver\n// --------------------------------------------------------------------------\nvar KeyArrayResolver;\n(function(KeyArrayResolver) {\n    /** Resolves an array of string[] keys from the given schema or array type. */ function Resolve(schema) {\n        if (globalThis.Array.isArray(schema)) return schema;\n        if (TypeGuard.TUnionLiteral(schema)) return schema.anyOf.map((schema)=>schema.const.toString());\n        if (TypeGuard.TLiteral(schema)) return [\n            schema.const\n        ];\n        if (TypeGuard.TTemplateLiteral(schema)) {\n            const expression = TemplateLiteralParser.ParseExact(schema.pattern);\n            if (!TemplateLiteralFinite.Check(expression)) throw Error(\"KeyArrayResolver: Cannot resolve keys from infinite template expression\");\n            return [\n                ...TemplateLiteralGenerator.Generate(expression)\n            ];\n        }\n        return [];\n    }\n    KeyArrayResolver.Resolve = Resolve;\n})(KeyArrayResolver || (exports.KeyArrayResolver = KeyArrayResolver = {}));\n// --------------------------------------------------------------------------\n// UnionResolver\n// --------------------------------------------------------------------------\nvar UnionResolver;\n(function(UnionResolver) {\n    function* Union(union) {\n        for (const schema of union.anyOf){\n            if (schema[exports.Kind] === \"Union\") {\n                yield* Union(schema);\n            } else {\n                yield schema;\n            }\n        }\n    }\n    /** Returns a resolved union with interior unions flattened */ function Resolve(union) {\n        return exports.Type.Union([\n            ...Union(union)\n        ], {\n            ...union\n        });\n    }\n    UnionResolver.Resolve = Resolve;\n})(UnionResolver || (exports.UnionResolver = UnionResolver = {}));\n// --------------------------------------------------------------------------\n// TemplateLiteralPattern\n// --------------------------------------------------------------------------\nvar TemplateLiteralPattern;\n(function(TemplateLiteralPattern) {\n    function Escape(value) {\n        return value.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n    }\n    function Visit(schema, acc) {\n        if (TypeGuard.TTemplateLiteral(schema)) {\n            const pattern = schema.pattern.slice(1, schema.pattern.length - 1);\n            return pattern;\n        } else if (TypeGuard.TUnion(schema)) {\n            const tokens = schema.anyOf.map((schema)=>Visit(schema, acc)).join(\"|\");\n            return `(${tokens})`;\n        } else if (TypeGuard.TNumber(schema)) {\n            return `${acc}${exports.PatternNumber}`;\n        } else if (TypeGuard.TInteger(schema)) {\n            return `${acc}${exports.PatternNumber}`;\n        } else if (TypeGuard.TBigInt(schema)) {\n            return `${acc}${exports.PatternNumber}`;\n        } else if (TypeGuard.TString(schema)) {\n            return `${acc}${exports.PatternString}`;\n        } else if (TypeGuard.TLiteral(schema)) {\n            return `${acc}${Escape(schema.const.toString())}`;\n        } else if (TypeGuard.TBoolean(schema)) {\n            return `${acc}${exports.PatternBoolean}`;\n        } else if (TypeGuard.TNever(schema)) {\n            throw Error(\"TemplateLiteralPattern: TemplateLiteral cannot operate on types of TNever\");\n        } else {\n            throw Error(`TemplateLiteralPattern: Unexpected Kind '${schema[exports.Kind]}'`);\n        }\n    }\n    function Create(kinds) {\n        return `^${kinds.map((schema)=>Visit(schema, \"\")).join(\"\")}\\$`;\n    }\n    TemplateLiteralPattern.Create = Create;\n})(TemplateLiteralPattern || (exports.TemplateLiteralPattern = TemplateLiteralPattern = {}));\n// --------------------------------------------------------------------------------------\n// TemplateLiteralResolver\n// --------------------------------------------------------------------------------------\nvar TemplateLiteralResolver;\n(function(TemplateLiteralResolver) {\n    /** Resolves a template literal as a TUnion */ function Resolve(template) {\n        const expression = TemplateLiteralParser.ParseExact(template.pattern);\n        if (!TemplateLiteralFinite.Check(expression)) return exports.Type.String();\n        const literals = [\n            ...TemplateLiteralGenerator.Generate(expression)\n        ].map((value)=>exports.Type.Literal(value));\n        return exports.Type.Union(literals);\n    }\n    TemplateLiteralResolver.Resolve = Resolve;\n})(TemplateLiteralResolver || (exports.TemplateLiteralResolver = TemplateLiteralResolver = {}));\n// --------------------------------------------------------------------------------------\n// TemplateLiteralParser\n// --------------------------------------------------------------------------------------\nclass TemplateLiteralParserError extends Error {\n    constructor(message){\n        super(message);\n    }\n}\nexports.TemplateLiteralParserError = TemplateLiteralParserError;\nvar TemplateLiteralParser;\n(function(TemplateLiteralParser) {\n    function IsNonEscaped(pattern, index, char) {\n        return pattern[index] === char && pattern.charCodeAt(index - 1) !== 92;\n    }\n    function IsOpenParen(pattern, index) {\n        return IsNonEscaped(pattern, index, \"(\");\n    }\n    function IsCloseParen(pattern, index) {\n        return IsNonEscaped(pattern, index, \")\");\n    }\n    function IsSeparator(pattern, index) {\n        return IsNonEscaped(pattern, index, \"|\");\n    }\n    function IsGroup(pattern) {\n        if (!(IsOpenParen(pattern, 0) && IsCloseParen(pattern, pattern.length - 1))) return false;\n        let count = 0;\n        for(let index = 0; index < pattern.length; index++){\n            if (IsOpenParen(pattern, index)) count += 1;\n            if (IsCloseParen(pattern, index)) count -= 1;\n            if (count === 0 && index !== pattern.length - 1) return false;\n        }\n        return true;\n    }\n    function InGroup(pattern) {\n        return pattern.slice(1, pattern.length - 1);\n    }\n    function IsPrecedenceOr(pattern) {\n        let count = 0;\n        for(let index = 0; index < pattern.length; index++){\n            if (IsOpenParen(pattern, index)) count += 1;\n            if (IsCloseParen(pattern, index)) count -= 1;\n            if (IsSeparator(pattern, index) && count === 0) return true;\n        }\n        return false;\n    }\n    function IsPrecedenceAnd(pattern) {\n        for(let index = 0; index < pattern.length; index++){\n            if (IsOpenParen(pattern, index)) return true;\n        }\n        return false;\n    }\n    function Or(pattern) {\n        let [count, start] = [\n            0,\n            0\n        ];\n        const expressions = [];\n        for(let index = 0; index < pattern.length; index++){\n            if (IsOpenParen(pattern, index)) count += 1;\n            if (IsCloseParen(pattern, index)) count -= 1;\n            if (IsSeparator(pattern, index) && count === 0) {\n                const range = pattern.slice(start, index);\n                if (range.length > 0) expressions.push(Parse(range));\n                start = index + 1;\n            }\n        }\n        const range = pattern.slice(start);\n        if (range.length > 0) expressions.push(Parse(range));\n        if (expressions.length === 0) return {\n            type: \"const\",\n            const: \"\"\n        };\n        if (expressions.length === 1) return expressions[0];\n        return {\n            type: \"or\",\n            expr: expressions\n        };\n    }\n    function And(pattern) {\n        function Group(value, index) {\n            if (!IsOpenParen(value, index)) throw new TemplateLiteralParserError(`TemplateLiteralParser: Index must point to open parens`);\n            let count = 0;\n            for(let scan = index; scan < value.length; scan++){\n                if (IsOpenParen(value, scan)) count += 1;\n                if (IsCloseParen(value, scan)) count -= 1;\n                if (count === 0) return [\n                    index,\n                    scan\n                ];\n            }\n            throw new TemplateLiteralParserError(`TemplateLiteralParser: Unclosed group parens in expression`);\n        }\n        function Range(pattern, index) {\n            for(let scan = index; scan < pattern.length; scan++){\n                if (IsOpenParen(pattern, scan)) return [\n                    index,\n                    scan\n                ];\n            }\n            return [\n                index,\n                pattern.length\n            ];\n        }\n        const expressions = [];\n        for(let index = 0; index < pattern.length; index++){\n            if (IsOpenParen(pattern, index)) {\n                const [start, end] = Group(pattern, index);\n                const range = pattern.slice(start, end + 1);\n                expressions.push(Parse(range));\n                index = end;\n            } else {\n                const [start, end] = Range(pattern, index);\n                const range = pattern.slice(start, end);\n                if (range.length > 0) expressions.push(Parse(range));\n                index = end - 1;\n            }\n        }\n        if (expressions.length === 0) return {\n            type: \"const\",\n            const: \"\"\n        };\n        if (expressions.length === 1) return expressions[0];\n        return {\n            type: \"and\",\n            expr: expressions\n        };\n    }\n    /** Parses a pattern and returns an expression tree */ function Parse(pattern) {\n        if (IsGroup(pattern)) return Parse(InGroup(pattern));\n        if (IsPrecedenceOr(pattern)) return Or(pattern);\n        if (IsPrecedenceAnd(pattern)) return And(pattern);\n        return {\n            type: \"const\",\n            const: pattern\n        };\n    }\n    TemplateLiteralParser.Parse = Parse;\n    /** Parses a pattern and strips forward and trailing ^ and $ */ function ParseExact(pattern) {\n        return Parse(pattern.slice(1, pattern.length - 1));\n    }\n    TemplateLiteralParser.ParseExact = ParseExact;\n})(TemplateLiteralParser || (exports.TemplateLiteralParser = TemplateLiteralParser = {}));\n// --------------------------------------------------------------------------------------\n// TemplateLiteralFinite\n// --------------------------------------------------------------------------------------\nvar TemplateLiteralFinite;\n(function(TemplateLiteralFinite) {\n    function IsNumber(expression) {\n        // prettier-ignore\n        return expression.type === \"or\" && expression.expr.length === 2 && expression.expr[0].type === \"const\" && expression.expr[0].const === \"0\" && expression.expr[1].type === \"const\" && expression.expr[1].const === \"[1-9][0-9]*\";\n    }\n    function IsBoolean(expression) {\n        // prettier-ignore\n        return expression.type === \"or\" && expression.expr.length === 2 && expression.expr[0].type === \"const\" && expression.expr[0].const === \"true\" && expression.expr[1].type === \"const\" && expression.expr[1].const === \"false\";\n    }\n    function IsString(expression) {\n        return expression.type === \"const\" && expression.const === \".*\";\n    }\n    function Check(expression) {\n        if (IsBoolean(expression)) return true;\n        if (IsNumber(expression) || IsString(expression)) return false;\n        if (expression.type === \"and\") return expression.expr.every((expr)=>Check(expr));\n        if (expression.type === \"or\") return expression.expr.every((expr)=>Check(expr));\n        if (expression.type === \"const\") return true;\n        throw Error(`TemplateLiteralFinite: Unknown expression type`);\n    }\n    TemplateLiteralFinite.Check = Check;\n})(TemplateLiteralFinite || (exports.TemplateLiteralFinite = TemplateLiteralFinite = {}));\n// --------------------------------------------------------------------------------------\n// TemplateLiteralGenerator\n// --------------------------------------------------------------------------------------\nvar TemplateLiteralGenerator;\n(function(TemplateLiteralGenerator) {\n    function* Reduce(buffer) {\n        if (buffer.length === 1) return yield* buffer[0];\n        for (const left of buffer[0]){\n            for (const right of Reduce(buffer.slice(1))){\n                yield `${left}${right}`;\n            }\n        }\n    }\n    function* And(expression) {\n        return yield* Reduce(expression.expr.map((expr)=>[\n                ...Generate(expr)\n            ]));\n    }\n    function* Or(expression) {\n        for (const expr of expression.expr)yield* Generate(expr);\n    }\n    function* Const(expression) {\n        return yield expression.const;\n    }\n    function* Generate(expression) {\n        if (expression.type === \"and\") return yield* And(expression);\n        if (expression.type === \"or\") return yield* Or(expression);\n        if (expression.type === \"const\") return yield* Const(expression);\n        throw Error(\"TemplateLiteralGenerator: Unknown expression\");\n    }\n    TemplateLiteralGenerator.Generate = Generate;\n})(TemplateLiteralGenerator || (exports.TemplateLiteralGenerator = TemplateLiteralGenerator = {}));\n// ---------------------------------------------------------------------\n// TemplateLiteralDslParser\n// ---------------------------------------------------------------------\nvar TemplateLiteralDslParser;\n(function(TemplateLiteralDslParser) {\n    function* ParseUnion(template) {\n        const trim = template.trim().replace(/\"|'/g, \"\");\n        if (trim === \"boolean\") return yield exports.Type.Boolean();\n        if (trim === \"number\") return yield exports.Type.Number();\n        if (trim === \"bigint\") return yield exports.Type.BigInt();\n        if (trim === \"string\") return yield exports.Type.String();\n        const literals = trim.split(\"|\").map((literal)=>exports.Type.Literal(literal.trim()));\n        return yield literals.length === 0 ? exports.Type.Never() : literals.length === 1 ? literals[0] : exports.Type.Union(literals);\n    }\n    function* ParseTerminal(template) {\n        if (template[1] !== \"{\") {\n            const L = exports.Type.Literal(\"$\");\n            const R = ParseLiteral(template.slice(1));\n            return yield* [\n                L,\n                ...R\n            ];\n        }\n        for(let i = 2; i < template.length; i++){\n            if (template[i] === \"}\") {\n                const L = ParseUnion(template.slice(2, i));\n                const R = ParseLiteral(template.slice(i + 1));\n                return yield* [\n                    ...L,\n                    ...R\n                ];\n            }\n        }\n        yield exports.Type.Literal(template);\n    }\n    function* ParseLiteral(template) {\n        for(let i = 0; i < template.length; i++){\n            if (template[i] === \"$\") {\n                const L = exports.Type.Literal(template.slice(0, i));\n                const R = ParseTerminal(template.slice(i));\n                return yield* [\n                    L,\n                    ...R\n                ];\n            }\n        }\n        yield exports.Type.Literal(template);\n    }\n    function Parse(template_dsl) {\n        return [\n            ...ParseLiteral(template_dsl)\n        ];\n    }\n    TemplateLiteralDslParser.Parse = Parse;\n})(TemplateLiteralDslParser || (exports.TemplateLiteralDslParser = TemplateLiteralDslParser = {}));\n// --------------------------------------------------------------------------\n// TypeOrdinal: Used for auto $id generation\n// --------------------------------------------------------------------------\nlet TypeOrdinal = 0;\n// --------------------------------------------------------------------------\n// TypeBuilder\n// --------------------------------------------------------------------------\nclass TypeBuilder {\n    /** `[Utility]` Creates a schema without `static` and `params` types */ Create(schema) {\n        return schema;\n    }\n    /** `[Standard]` Omits compositing symbols from this schema */ Strict(schema) {\n        return JSON.parse(JSON.stringify(schema));\n    }\n}\nexports.TypeBuilder = TypeBuilder;\n// --------------------------------------------------------------------------\n// StandardTypeBuilder\n// --------------------------------------------------------------------------\nclass StandardTypeBuilder extends TypeBuilder {\n    // ------------------------------------------------------------------------\n    // Modifiers\n    // ------------------------------------------------------------------------\n    /** `[Modifier]` Creates a Optional property */ Optional(schema) {\n        return {\n            [exports.Modifier]: \"Optional\",\n            ...TypeClone.Clone(schema, {})\n        };\n    }\n    /** `[Modifier]` Creates a ReadonlyOptional property */ ReadonlyOptional(schema) {\n        return {\n            [exports.Modifier]: \"ReadonlyOptional\",\n            ...TypeClone.Clone(schema, {})\n        };\n    }\n    /** `[Modifier]` Creates a Readonly object or property */ Readonly(schema) {\n        return {\n            [exports.Modifier]: \"Readonly\",\n            ...schema\n        };\n    }\n    // ------------------------------------------------------------------------\n    // Types\n    // ------------------------------------------------------------------------\n    /** `[Standard]` Creates an Any type */ Any(options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Any\"\n        });\n    }\n    /** `[Standard]` Creates an Array type */ Array(items, options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Array\",\n            type: \"array\",\n            items: TypeClone.Clone(items, {})\n        });\n    }\n    /** `[Standard]` Creates a Boolean type */ Boolean(options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Boolean\",\n            type: \"boolean\"\n        });\n    }\n    /** `[Standard]` Creates a Composite object type. */ Composite(objects, options) {\n        const intersect = exports.Type.Intersect(objects, {});\n        const keys = KeyResolver.ResolveKeys(intersect, {\n            includePatterns: false\n        });\n        const properties = keys.reduce((acc, key)=>({\n                ...acc,\n                [key]: exports.Type.Index(intersect, [\n                    key\n                ])\n            }), {});\n        return exports.Type.Object(properties, options);\n    }\n    /** `[Standard]` Creates a Enum type */ Enum(item, options = {}) {\n        // prettier-ignore\n        const values = globalThis.Object.keys(item).filter((key)=>isNaN(key)).map((key)=>item[key]);\n        const anyOf = values.map((value)=>typeof value === \"string\" ? {\n                [exports.Kind]: \"Literal\",\n                type: \"string\",\n                const: value\n            } : {\n                [exports.Kind]: \"Literal\",\n                type: \"number\",\n                const: value\n            });\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Union\",\n            anyOf\n        });\n    }\n    /** `[Standard]` A conditional type expression that will return the true type if the left type extends the right */ Extends(left, right, trueType, falseType, options = {}) {\n        switch(TypeExtends.Extends(left, right)){\n            case TypeExtendsResult.Union:\n                return this.Union([\n                    TypeClone.Clone(trueType, options),\n                    TypeClone.Clone(falseType, options)\n                ]);\n            case TypeExtendsResult.True:\n                return TypeClone.Clone(trueType, options);\n            case TypeExtendsResult.False:\n                return TypeClone.Clone(falseType, options);\n        }\n    }\n    /** `[Standard]` Excludes from the left type any type that is not assignable to the right */ Exclude(left, right, options = {}) {\n        if (TypeGuard.TTemplateLiteral(left)) return this.Exclude(TemplateLiteralResolver.Resolve(left), right, options);\n        if (TypeGuard.TTemplateLiteral(right)) return this.Exclude(left, TemplateLiteralResolver.Resolve(right), options);\n        if (TypeGuard.TUnion(left)) {\n            const narrowed = left.anyOf.filter((inner)=>TypeExtends.Extends(inner, right) === TypeExtendsResult.False);\n            return narrowed.length === 1 ? TypeClone.Clone(narrowed[0], options) : this.Union(narrowed, options);\n        } else {\n            return TypeExtends.Extends(left, right) !== TypeExtendsResult.False ? this.Never(options) : TypeClone.Clone(left, options);\n        }\n    }\n    /** `[Standard]` Extracts from the left type any type that is assignable to the right */ Extract(left, right, options = {}) {\n        if (TypeGuard.TTemplateLiteral(left)) return this.Extract(TemplateLiteralResolver.Resolve(left), right, options);\n        if (TypeGuard.TTemplateLiteral(right)) return this.Extract(left, TemplateLiteralResolver.Resolve(right), options);\n        if (TypeGuard.TUnion(left)) {\n            const narrowed = left.anyOf.filter((inner)=>TypeExtends.Extends(inner, right) !== TypeExtendsResult.False);\n            return narrowed.length === 1 ? TypeClone.Clone(narrowed[0], options) : this.Union(narrowed, options);\n        } else {\n            return TypeExtends.Extends(left, right) !== TypeExtendsResult.False ? TypeClone.Clone(left, options) : this.Never(options);\n        }\n    }\n    /** `[Standard]` Returns indexed property types for the given keys */ Index(schema, unresolved, options = {}) {\n        if (TypeGuard.TArray(schema) && TypeGuard.TNumber(unresolved)) {\n            return TypeClone.Clone(schema.items, options);\n        } else if (TypeGuard.TTuple(schema) && TypeGuard.TNumber(unresolved)) {\n            const items = schema.items === undefined ? [] : schema.items;\n            const cloned = items.map((schema)=>TypeClone.Clone(schema, {}));\n            return this.Union(cloned, options);\n        } else {\n            const keys = KeyArrayResolver.Resolve(unresolved);\n            const clone = TypeClone.Clone(schema, {});\n            return IndexedAccessor.Resolve(clone, keys, options);\n        }\n    }\n    /** `[Standard]` Creates an Integer type */ Integer(options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Integer\",\n            type: \"integer\"\n        });\n    }\n    Intersect(allOf, options = {}) {\n        if (allOf.length === 0) return exports.Type.Never();\n        if (allOf.length === 1) return TypeClone.Clone(allOf[0], options);\n        const objects = allOf.every((schema)=>TypeGuard.TObject(schema));\n        const cloned = allOf.map((schema)=>TypeClone.Clone(schema, {}));\n        const clonedUnevaluatedProperties = TypeGuard.TSchema(options.unevaluatedProperties) ? {\n            unevaluatedProperties: TypeClone.Clone(options.unevaluatedProperties, {})\n        } : {};\n        if (options.unevaluatedProperties === false || TypeGuard.TSchema(options.unevaluatedProperties) || objects) {\n            return this.Create({\n                ...options,\n                ...clonedUnevaluatedProperties,\n                [exports.Kind]: \"Intersect\",\n                type: \"object\",\n                allOf: cloned\n            });\n        } else {\n            return this.Create({\n                ...options,\n                ...clonedUnevaluatedProperties,\n                [exports.Kind]: \"Intersect\",\n                allOf: cloned\n            });\n        }\n    }\n    /** `[Standard]` Creates a KeyOf type */ KeyOf(schema, options = {}) {\n        if (TypeGuard.TRecord(schema)) {\n            const pattern = Object.getOwnPropertyNames(schema.patternProperties)[0];\n            if (pattern === exports.PatternNumberExact) return this.Number(options);\n            if (pattern === exports.PatternStringExact) return this.String(options);\n            throw Error(\"StandardTypeBuilder: Unable to resolve key type from Record key pattern\");\n        } else if (TypeGuard.TTuple(schema)) {\n            const items = schema.items === undefined ? [] : schema.items;\n            const literals = items.map((_, index)=>exports.Type.Literal(index));\n            return this.Union(literals, options);\n        } else if (TypeGuard.TArray(schema)) {\n            return this.Number(options);\n        } else {\n            const keys = KeyResolver.ResolveKeys(schema, {\n                includePatterns: false\n            });\n            if (keys.length === 0) return this.Never(options);\n            const literals = keys.map((key)=>this.Literal(key));\n            return this.Union(literals, options);\n        }\n    }\n    /** `[Standard]` Creates a Literal type */ Literal(value, options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Literal\",\n            const: value,\n            type: typeof value\n        });\n    }\n    /** `[Standard]` Creates a Never type */ Never(options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Never\",\n            not: {}\n        });\n    }\n    /** `[Standard]` Creates a Not type. The first argument is the disallowed type, the second is the allowed. */ Not(not, schema, options) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Not\",\n            allOf: [\n                {\n                    not: TypeClone.Clone(not, {})\n                },\n                TypeClone.Clone(schema, {})\n            ]\n        });\n    }\n    /** `[Standard]` Creates a Null type */ Null(options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Null\",\n            type: \"null\"\n        });\n    }\n    /** `[Standard]` Creates a Number type */ Number(options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Number\",\n            type: \"number\"\n        });\n    }\n    /** `[Standard]` Creates an Object type */ Object(properties, options = {}) {\n        const propertyKeys = globalThis.Object.getOwnPropertyNames(properties);\n        const optionalKeys = propertyKeys.filter((key)=>TypeGuard.TOptional(properties[key]) || TypeGuard.TReadonlyOptional(properties[key]));\n        const requiredKeys = propertyKeys.filter((name)=>!optionalKeys.includes(name));\n        const clonedAdditionalProperties = TypeGuard.TSchema(options.additionalProperties) ? {\n            additionalProperties: TypeClone.Clone(options.additionalProperties, {})\n        } : {};\n        const clonedProperties = propertyKeys.reduce((acc, key)=>({\n                ...acc,\n                [key]: TypeClone.Clone(properties[key], {})\n            }), {});\n        if (requiredKeys.length > 0) {\n            return this.Create({\n                ...options,\n                ...clonedAdditionalProperties,\n                [exports.Kind]: \"Object\",\n                type: \"object\",\n                properties: clonedProperties,\n                required: requiredKeys\n            });\n        } else {\n            return this.Create({\n                ...options,\n                ...clonedAdditionalProperties,\n                [exports.Kind]: \"Object\",\n                type: \"object\",\n                properties: clonedProperties\n            });\n        }\n    }\n    Omit(schema, unresolved, options = {}) {\n        const keys = KeyArrayResolver.Resolve(unresolved);\n        // prettier-ignore\n        return ObjectMap.Map(TypeClone.Clone(schema, {}), (schema)=>{\n            if (schema.required) {\n                schema.required = schema.required.filter((key)=>!keys.includes(key));\n                if (schema.required.length === 0) delete schema.required;\n            }\n            for (const key of globalThis.Object.keys(schema.properties)){\n                if (keys.includes(key)) delete schema.properties[key];\n            }\n            return this.Create(schema);\n        }, options);\n    }\n    /** `[Standard]` Creates a mapped type where all properties are Optional */ Partial(schema, options = {}) {\n        function Apply(schema) {\n            // prettier-ignore\n            switch(schema[exports.Modifier]){\n                case \"ReadonlyOptional\":\n                    schema[exports.Modifier] = \"ReadonlyOptional\";\n                    break;\n                case \"Readonly\":\n                    schema[exports.Modifier] = \"ReadonlyOptional\";\n                    break;\n                case \"Optional\":\n                    schema[exports.Modifier] = \"Optional\";\n                    break;\n                default:\n                    schema[exports.Modifier] = \"Optional\";\n                    break;\n            }\n        }\n        // prettier-ignore\n        return ObjectMap.Map(TypeClone.Clone(schema, {}), (schema)=>{\n            delete schema.required;\n            globalThis.Object.keys(schema.properties).forEach((key)=>Apply(schema.properties[key]));\n            return schema;\n        }, options);\n    }\n    Pick(schema, unresolved, options = {}) {\n        const keys = KeyArrayResolver.Resolve(unresolved);\n        // prettier-ignore\n        return ObjectMap.Map(TypeClone.Clone(schema, {}), (schema)=>{\n            if (schema.required) {\n                schema.required = schema.required.filter((key)=>keys.includes(key));\n                if (schema.required.length === 0) delete schema.required;\n            }\n            for (const key of globalThis.Object.keys(schema.properties)){\n                if (!keys.includes(key)) delete schema.properties[key];\n            }\n            return this.Create(schema);\n        }, options);\n    }\n    /** `[Standard]` Creates a Record type */ Record(key, schema, options = {}) {\n        if (TypeGuard.TTemplateLiteral(key)) {\n            const expression = TemplateLiteralParser.ParseExact(key.pattern);\n            // prettier-ignore\n            return TemplateLiteralFinite.Check(expression) ? this.Object([\n                ...TemplateLiteralGenerator.Generate(expression)\n            ].reduce((acc, key)=>({\n                    ...acc,\n                    [key]: TypeClone.Clone(schema, {})\n                }), {}), options) : this.Create({\n                ...options,\n                [exports.Kind]: \"Record\",\n                type: \"object\",\n                patternProperties: {\n                    [key.pattern]: TypeClone.Clone(schema, {})\n                }\n            });\n        } else if (TypeGuard.TUnion(key)) {\n            const union = UnionResolver.Resolve(key);\n            if (TypeGuard.TUnionLiteral(union)) {\n                const properties = union.anyOf.reduce((acc, literal)=>({\n                        ...acc,\n                        [literal.const]: TypeClone.Clone(schema, {})\n                    }), {});\n                return this.Object(properties, {\n                    ...options,\n                    [exports.Hint]: \"Record\"\n                });\n            } else throw Error(\"TypeBuilder: Record key of type union contains non-literal types\");\n        } else if (TypeGuard.TLiteral(key)) {\n            if (typeof key.const === \"string\" || typeof key.const === \"number\") {\n                return this.Object({\n                    [key.const]: TypeClone.Clone(schema, {})\n                }, options);\n            } else throw Error(\"TypeBuilder: Record key of type literal is not of type string or number\");\n        } else if (TypeGuard.TInteger(key) || TypeGuard.TNumber(key)) {\n            const pattern = exports.PatternNumberExact;\n            return this.Create({\n                ...options,\n                [exports.Kind]: \"Record\",\n                type: \"object\",\n                patternProperties: {\n                    [pattern]: TypeClone.Clone(schema, {})\n                }\n            });\n        } else if (TypeGuard.TString(key)) {\n            const pattern = key.pattern === undefined ? exports.PatternStringExact : key.pattern;\n            return this.Create({\n                ...options,\n                [exports.Kind]: \"Record\",\n                type: \"object\",\n                patternProperties: {\n                    [pattern]: TypeClone.Clone(schema, {})\n                }\n            });\n        } else {\n            throw Error(`StandardTypeBuilder: Record key is an invalid type`);\n        }\n    }\n    /** `[Standard]` Creates a Recursive type */ Recursive(callback, options = {}) {\n        if (options.$id === undefined) options.$id = `T${TypeOrdinal++}`;\n        const thisType = callback({\n            [exports.Kind]: \"This\",\n            $ref: `${options.$id}`\n        });\n        thisType.$id = options.$id;\n        return this.Create({\n            ...options,\n            [exports.Hint]: \"Recursive\",\n            ...thisType\n        });\n    }\n    /** `[Standard]` Creates a Ref type. The referenced type must contain a $id */ Ref(schema, options = {}) {\n        if (schema.$id === undefined) throw Error(\"StandardTypeBuilder.Ref: Target type must specify an $id\");\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Ref\",\n            $ref: schema.$id\n        });\n    }\n    /** `[Standard]` Creates a mapped type where all properties are Required */ Required(schema, options = {}) {\n        function Apply(schema) {\n            // prettier-ignore\n            switch(schema[exports.Modifier]){\n                case \"ReadonlyOptional\":\n                    schema[exports.Modifier] = \"Readonly\";\n                    break;\n                case \"Readonly\":\n                    schema[exports.Modifier] = \"Readonly\";\n                    break;\n                case \"Optional\":\n                    delete schema[exports.Modifier];\n                    break;\n                default:\n                    delete schema[exports.Modifier];\n                    break;\n            }\n        }\n        // prettier-ignore\n        return ObjectMap.Map(TypeClone.Clone(schema, {}), (schema)=>{\n            schema.required = globalThis.Object.keys(schema.properties);\n            globalThis.Object.keys(schema.properties).forEach((key)=>Apply(schema.properties[key]));\n            return schema;\n        }, options);\n    }\n    /** `[Standard]` Returns a schema array which allows types to compose with the JavaScript spread operator */ Rest(schema) {\n        if (TypeGuard.TTuple(schema)) {\n            if (schema.items === undefined) return [];\n            return schema.items.map((schema)=>TypeClone.Clone(schema, {}));\n        } else {\n            return [\n                TypeClone.Clone(schema, {})\n            ];\n        }\n    }\n    /** `[Standard]` Creates a String type */ String(options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"String\",\n            type: \"string\"\n        });\n    }\n    /** `[Standard]` Creates a template literal type */ TemplateLiteral(unresolved, options = {}) {\n        // prettier-ignore\n        const pattern = typeof unresolved === \"string\" ? TemplateLiteralPattern.Create(TemplateLiteralDslParser.Parse(unresolved)) : TemplateLiteralPattern.Create(unresolved);\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"TemplateLiteral\",\n            type: \"string\",\n            pattern\n        });\n    }\n    /** `[Standard]` Creates a Tuple type */ Tuple(items, options = {}) {\n        const [additionalItems, minItems, maxItems] = [\n            false,\n            items.length,\n            items.length\n        ];\n        const clonedItems = items.map((item)=>TypeClone.Clone(item, {}));\n        // prettier-ignore\n        const schema = items.length > 0 ? {\n            ...options,\n            [exports.Kind]: \"Tuple\",\n            type: \"array\",\n            items: clonedItems,\n            additionalItems,\n            minItems,\n            maxItems\n        } : {\n            ...options,\n            [exports.Kind]: \"Tuple\",\n            type: \"array\",\n            minItems,\n            maxItems\n        };\n        return this.Create(schema);\n    }\n    Union(union, options = {}) {\n        if (TypeGuard.TTemplateLiteral(union)) {\n            return TemplateLiteralResolver.Resolve(union);\n        } else {\n            const anyOf = union;\n            if (anyOf.length === 0) return this.Never(options);\n            if (anyOf.length === 1) return this.Create(TypeClone.Clone(anyOf[0], options));\n            const clonedAnyOf = anyOf.map((schema)=>TypeClone.Clone(schema, {}));\n            return this.Create({\n                ...options,\n                [exports.Kind]: \"Union\",\n                anyOf: clonedAnyOf\n            });\n        }\n    }\n    /** `[Standard]` Creates an Unknown type */ Unknown(options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Unknown\"\n        });\n    }\n    /** `[Standard]` Creates a Unsafe type that infers for the generic argument */ Unsafe(options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: options[exports.Kind] || \"Unsafe\"\n        });\n    }\n}\nexports.StandardTypeBuilder = StandardTypeBuilder;\n// --------------------------------------------------------------------------\n// ExtendedTypeBuilder\n// --------------------------------------------------------------------------\nclass ExtendedTypeBuilder extends StandardTypeBuilder {\n    /** `[Extended]` Creates a BigInt type */ BigInt(options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"BigInt\",\n            type: \"null\",\n            typeOf: \"BigInt\"\n        });\n    }\n    /** `[Extended]` Extracts the ConstructorParameters from the given Constructor type */ ConstructorParameters(schema, options = {}) {\n        return this.Tuple([\n            ...schema.parameters\n        ], {\n            ...options\n        });\n    }\n    /** `[Extended]` Creates a Constructor type */ Constructor(parameters, returns, options) {\n        const clonedReturns = TypeClone.Clone(returns, {});\n        const clonedParameters = parameters.map((parameter)=>TypeClone.Clone(parameter, {}));\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Constructor\",\n            type: \"object\",\n            instanceOf: \"Constructor\",\n            parameters: clonedParameters,\n            returns: clonedReturns\n        });\n    }\n    /** `[Extended]` Creates a Date type */ Date(options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Date\",\n            type: \"object\",\n            instanceOf: \"Date\"\n        });\n    }\n    /** `[Extended]` Creates a Function type */ Function(parameters, returns, options) {\n        const clonedReturns = TypeClone.Clone(returns, {});\n        const clonedParameters = parameters.map((parameter)=>TypeClone.Clone(parameter, {}));\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Function\",\n            type: \"object\",\n            instanceOf: \"Function\",\n            parameters: clonedParameters,\n            returns: clonedReturns\n        });\n    }\n    /** `[Extended]` Extracts the InstanceType from the given Constructor */ InstanceType(schema, options = {}) {\n        return TypeClone.Clone(schema.returns, options);\n    }\n    /** `[Extended]` Extracts the Parameters from the given Function type */ Parameters(schema, options = {}) {\n        return this.Tuple(schema.parameters, {\n            ...options\n        });\n    }\n    /** `[Extended]` Creates a Promise type */ Promise(item, options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Promise\",\n            type: \"object\",\n            instanceOf: \"Promise\",\n            item: TypeClone.Clone(item, {})\n        });\n    }\n    /** `[Extended]` Creates a regular expression type */ RegEx(regex, options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"String\",\n            type: \"string\",\n            pattern: regex.source\n        });\n    }\n    /** `[Extended]` Extracts the ReturnType from the given Function */ ReturnType(schema, options = {}) {\n        return TypeClone.Clone(schema.returns, options);\n    }\n    /** `[Extended]` Creates a Symbol type */ Symbol(options) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Symbol\",\n            type: \"null\",\n            typeOf: \"Symbol\"\n        });\n    }\n    /** `[Extended]` Creates a Undefined type */ Undefined(options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Undefined\",\n            type: \"null\",\n            typeOf: \"Undefined\"\n        });\n    }\n    /** `[Extended]` Creates a Uint8Array type */ Uint8Array(options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Uint8Array\",\n            type: \"object\",\n            instanceOf: \"Uint8Array\"\n        });\n    }\n    /** `[Extended]` Creates a Void type */ Void(options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Void\",\n            type: \"null\",\n            typeOf: \"Void\"\n        });\n    }\n}\nexports.ExtendedTypeBuilder = ExtendedTypeBuilder;\n/** JSON Schema TypeBuilder with Static Resolution for TypeScript */ exports.StandardType = new StandardTypeBuilder();\n/** JSON Schema TypeBuilder with Static Resolution for TypeScript */ exports.Type = new ExtendedTypeBuilder();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/typebox.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/value/hash.js":
/*!*******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/value/hash.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*--------------------------------------------------------------------------\n\n@sinclair/typebox/hash\n\nThe MIT License (MIT)\n\nCopyright (c) 2017-2023 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ValueHash = exports.ValueHashError = void 0;\nclass ValueHashError extends Error {\n    constructor(value){\n        super(`Hash: Unable to hash value`);\n        this.value = value;\n    }\n}\nexports.ValueHashError = ValueHashError;\nvar ValueHash;\n(function(ValueHash) {\n    let ByteMarker;\n    (function(ByteMarker) {\n        ByteMarker[ByteMarker[\"Undefined\"] = 0] = \"Undefined\";\n        ByteMarker[ByteMarker[\"Null\"] = 1] = \"Null\";\n        ByteMarker[ByteMarker[\"Boolean\"] = 2] = \"Boolean\";\n        ByteMarker[ByteMarker[\"Number\"] = 3] = \"Number\";\n        ByteMarker[ByteMarker[\"String\"] = 4] = \"String\";\n        ByteMarker[ByteMarker[\"Object\"] = 5] = \"Object\";\n        ByteMarker[ByteMarker[\"Array\"] = 6] = \"Array\";\n        ByteMarker[ByteMarker[\"Date\"] = 7] = \"Date\";\n        ByteMarker[ByteMarker[\"Uint8Array\"] = 8] = \"Uint8Array\";\n        ByteMarker[ByteMarker[\"Symbol\"] = 9] = \"Symbol\";\n        ByteMarker[ByteMarker[\"BigInt\"] = 10] = \"BigInt\";\n    })(ByteMarker || (ByteMarker = {}));\n    // ----------------------------------------------------\n    // State\n    // ----------------------------------------------------\n    let Hash = globalThis.BigInt(\"14695981039346656037\");\n    const [Prime, Size] = [\n        globalThis.BigInt(\"1099511628211\"),\n        globalThis.BigInt(\"2\") ** globalThis.BigInt(\"64\")\n    ];\n    const Bytes = globalThis.Array.from({\n        length: 256\n    }).map((_, i)=>globalThis.BigInt(i));\n    const F64 = new globalThis.Float64Array(1);\n    const F64In = new globalThis.DataView(F64.buffer);\n    const F64Out = new globalThis.Uint8Array(F64.buffer);\n    // ----------------------------------------------------\n    // Guards\n    // ----------------------------------------------------\n    function IsDate(value) {\n        return value instanceof globalThis.Date;\n    }\n    function IsUint8Array(value) {\n        return value instanceof globalThis.Uint8Array;\n    }\n    function IsArray(value) {\n        return globalThis.Array.isArray(value);\n    }\n    function IsBoolean(value) {\n        return typeof value === \"boolean\";\n    }\n    function IsNull(value) {\n        return value === null;\n    }\n    function IsNumber(value) {\n        return typeof value === \"number\";\n    }\n    function IsSymbol(value) {\n        return typeof value === \"symbol\";\n    }\n    function IsBigInt(value) {\n        return typeof value === \"bigint\";\n    }\n    function IsObject(value) {\n        return typeof value === \"object\" && value !== null && !IsArray(value) && !IsDate(value) && !IsUint8Array(value);\n    }\n    function IsString(value) {\n        return typeof value === \"string\";\n    }\n    function IsUndefined(value) {\n        return value === undefined;\n    }\n    // ----------------------------------------------------\n    // Encoding\n    // ----------------------------------------------------\n    function Array(value) {\n        FNV1A64(ByteMarker.Array);\n        for (const item of value){\n            Visit(item);\n        }\n    }\n    function Boolean(value) {\n        FNV1A64(ByteMarker.Boolean);\n        FNV1A64(value ? 1 : 0);\n    }\n    function BigInt(value) {\n        FNV1A64(ByteMarker.BigInt);\n        F64In.setBigInt64(0, value);\n        for (const byte of F64Out){\n            FNV1A64(byte);\n        }\n    }\n    function Date(value) {\n        FNV1A64(ByteMarker.Date);\n        Visit(value.getTime());\n    }\n    function Null(value) {\n        FNV1A64(ByteMarker.Null);\n    }\n    function Number(value) {\n        FNV1A64(ByteMarker.Number);\n        F64In.setFloat64(0, value);\n        for (const byte of F64Out){\n            FNV1A64(byte);\n        }\n    }\n    function Object1(value) {\n        FNV1A64(ByteMarker.Object);\n        for (const key of globalThis.Object.keys(value).sort()){\n            Visit(key);\n            Visit(value[key]);\n        }\n    }\n    function String(value) {\n        FNV1A64(ByteMarker.String);\n        for(let i = 0; i < value.length; i++){\n            FNV1A64(value.charCodeAt(i));\n        }\n    }\n    function Symbol(value) {\n        FNV1A64(ByteMarker.Symbol);\n        Visit(value.description);\n    }\n    function Uint8Array(value) {\n        FNV1A64(ByteMarker.Uint8Array);\n        for(let i = 0; i < value.length; i++){\n            FNV1A64(value[i]);\n        }\n    }\n    function Undefined(value) {\n        return FNV1A64(ByteMarker.Undefined);\n    }\n    function Visit(value) {\n        if (IsArray(value)) {\n            Array(value);\n        } else if (IsBoolean(value)) {\n            Boolean(value);\n        } else if (IsBigInt(value)) {\n            BigInt(value);\n        } else if (IsDate(value)) {\n            Date(value);\n        } else if (IsNull(value)) {\n            Null(value);\n        } else if (IsNumber(value)) {\n            Number(value);\n        } else if (IsObject(value)) {\n            Object1(value);\n        } else if (IsString(value)) {\n            String(value);\n        } else if (IsSymbol(value)) {\n            Symbol(value);\n        } else if (IsUint8Array(value)) {\n            Uint8Array(value);\n        } else if (IsUndefined(value)) {\n            Undefined(value);\n        } else {\n            throw new ValueHashError(value);\n        }\n    }\n    function FNV1A64(byte) {\n        Hash = Hash ^ Bytes[byte];\n        Hash = Hash * Prime % Size;\n    }\n    /** Creates a FNV1A-64 non cryptographic hash of the given value */ function Create(value) {\n        Hash = globalThis.BigInt(\"14695981039346656037\");\n        Visit(value);\n        return Hash;\n    }\n    ValueHash.Create = Create;\n})(ValueHash || (exports.ValueHash = ValueHash = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sinclair+typebox@0.28.20/node_modules/@sinclair/typebox/value/hash.js\n");

/***/ })

};
;